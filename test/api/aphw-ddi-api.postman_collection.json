{
	"info": {
		"_postman_id": "3b419c8e-90f2-47b2-aa0f-df8fa06894b4",
		"name": "aphw-ddi-api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12107479"
	},
	"item": [
		{
			"name": "Tests",
			"item": [
				{
					"name": "CDO",
					"item": [
						{
							"name": "User can add a Cdo and view Cdo, Dog and Owner",
							"item": [
								{
									"name": "A change from interim exempt without cdo expiry should have default expiry",
									"item": [
										{
											"name": "/cdo create interim exempt",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"response is ok\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"setup id details\", function () {",
															"    const dogs = pm.response.json().dogs;",
															"    const dog = dogs[0]",
															"    pm.collectionVariables.set(\"dogIndexNumberChange\",  dog.indexNumber);",
															"});",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "ddi-username",
														"value": "internal-user"
													},
													{
														"key": "ddi-displayname",
														"value": "User, Internal"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"owner\": {\n    \"firstName\": \"Super\",\n    \"lastName\": \"Mario\",\n    \"personReference\": null,\n    \"address\": {\n      \"addressLine1\": \"802 SLOANE AVENUE\",\n      \"town\": \"LONDON\",\n      \"postcode\": \"SW3 3ER\",\n      \"country\": \"England\"\n    }\n  },\n  \"enforcementDetails\": {\n    \"court\": null,\n    \"policeForce\": \"30\",\n    \"legislationOfficer\": \"\"\n  },\n  \"dogs\": [\n    {\n      \"breed\": \"XL Bully\",\n      \"name\": \"Francis\",\n      \"applicationType\": \"interim-exemption\",\n      \"cdoIssued\": null,\n      \"cdoExpiry\": null,\n      \"interimExemption\": \"2024-05-08T00:00:00.000Z\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{DDI_API_BASE_URL}}/cdo",
													"host": [
														"{{DDI_API_BASE_URL}}"
													],
													"path": [
														"cdo"
													]
												}
											},
											"response": []
										},
										{
											"name": "/exemption should add default expiry date",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"response is ok\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"response returns a dog\", function () {",
															"    const exemption = pm.response.json();",
															"    pm.expect(exemption.cdo_expiry).not.to.be.null",
															"    pm.expect(exemption.cdo_expiry).contains('2024-07-01')",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "ddi-username",
														"value": "internal-user"
													},
													{
														"key": "ddi-displayname",
														"value": "User, Internal"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"indexNumber\": \"{{dogIndexNumberChange}}\",\n    \"cdoIssued\": \"2024-05-01T00:00:00.000Z\",\n    \"cdoExpiry\": null,\n    \"court\": \"\",\n    \"policeForce\": \"Metropolitan Police Service\",\n    \"legislationOfficer\": \"\",\n    \"joinedExemptionScheme\": \"2024-05-08T00:00:00.000Z\",\n    \"exemptionOrder\": 2015\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{DDI_API_BASE_URL}}/exemption",
													"host": [
														"{{DDI_API_BASE_URL}}"
													],
													"path": [
														"exemption"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Deleted Court still shows on CDO",
									"item": [
										{
											"name": "Setup - add court for test",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"response is ok\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"response returns the created court\", function () {",
															"    const jsonData = pm.response.json();",
															"    pm.collectionVariables.set('courtToDeleteId', jsonData.id)",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "ddi-username",
														"value": "internal-user"
													},
													{
														"key": "ddi-displayname",
														"value": "User, Internal"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"City of Gotham State District Courthouse\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{DDI_API_BASE_URL}}/courts",
													"host": [
														"{{DDI_API_BASE_URL}}"
													],
													"path": [
														"courts"
													]
												}
											},
											"response": []
										},
										{
											"name": "Setup - add police force",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"response is ok\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"response returns the created Police Force\", function () {",
															"    const jsonData = pm.response.json();",
															"    pm.collectionVariables.set('policeToBeDeleted', jsonData.id)",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "ddi-username",
														"value": "internal-user"
													},
													{
														"key": "ddi-displayname",
														"value": "User, Internal"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"Gotham City Police Department\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{DDI_API_BASE_URL}}/police-forces",
													"host": [
														"{{DDI_API_BASE_URL}}"
													],
													"path": [
														"police-forces"
													]
												}
											},
											"response": []
										},
										{
											"name": "Setup - add insurance company",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"response is ok\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"save Insurance Company id\", function () {",
															"    const jsonData = pm.response.json();",
															"       pm.collectionVariables.set('insuranceIdToDelete', jsonData.id)",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "ddi-username",
														"value": "internal-user"
													},
													{
														"key": "ddi-displayname",
														"value": "User, Internal"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"Gotham City Pets R Us\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{DDI_API_BASE_URL}}/insurance/companies",
													"host": [
														"{{DDI_API_BASE_URL}}"
													],
													"path": [
														"insurance",
														"companies"
													]
												}
											},
											"response": []
										},
										{
											"name": "/cdo create interim exempt",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"response is ok\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"setup id details\", function () {",
															"    const dogs = pm.response.json().dogs;",
															"    const dog = dogs[0]",
															"    pm.collectionVariables.set(\"dogIndexNumberWithDeletedCourt\",  dog.indexNumber);",
															"});",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "ddi-username",
														"value": "internal-user"
													},
													{
														"key": "ddi-displayname",
														"value": "User, Internal"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"owner\": {\n    \"firstName\": \"Bruce\",\n    \"lastName\": \"Wayne\",\n    \"personReference\": null,\n    \"address\": {\n      \"addressLine1\": \"802 SLOANE AVENUE\",\n      \"town\": \"Metropolis\",\n      \"postcode\": \"SW3 3ER\",\n      \"country\": \"England\"\n    }\n  },\n  \"enforcementDetails\": {\n    \"court\": \"{{courtToDeleteId}}\",\n    \"policeForce\": \"{{policeToBeDeleted}}\",\n    \"legislationOfficer\": \"\"\n  },\n  \"dogs\": [\n    {\n      \"breed\": \"XL Bully\",\n      \"name\": \"Ace the Bat-Hound\",\n      \"applicationType\": \"interim-exemption\",\n      \"cdoIssued\": null,\n      \"cdoExpiry\": null,\n      \"interimExemption\": \"2024-05-08T00:00:00.000Z\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{DDI_API_BASE_URL}}/cdo",
													"host": [
														"{{DDI_API_BASE_URL}}"
													],
													"path": [
														"cdo"
													]
												}
											},
											"response": []
										},
										{
											"name": "/exemption returns 200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"response is ok\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"response returns a dog\", function () {",
															"    const exemption = pm.response.json();",
															"    pm.expect(exemption.dog_id).to.eq(parseInt(pm.collectionVariables.get('dogIndexNumberWithDeletedCourt').replace('ED','')))",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "ddi-username",
														"value": "internal-user"
													},
													{
														"key": "ddi-displayname",
														"value": "User, Internal"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"exemptionOrder\": 2023,\n  \"indexNumber\": \"{{dogIndexNumberWithDeletedCourt}}\",\n  \"cdoIssued\": null,\n  \"cdoExpiry\": null,\n  \"policeForce\": \"Gotham City Police Department\",\n  \"legislationOfficer\": \"Commissioner James Gordon\",\n  \"certificateIssued\": \"2020-03-01\",\n  \"applicationFeePaid\": \"2020-03-01\",\n  \"neuteringConfirmation\": \"2020-04-01\",\n  \"microchipVerification\": \"2020-04-01\",\n  \"joinedExemptionScheme\": \"2020-05-01\",\n  \"insurance\": {\n    \"company\": \"Gotham City Pets R Us\",\n    \"renewalDate\": \"2020-06-01\"\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{DDI_API_BASE_URL}}/exemption",
													"host": [
														"{{DDI_API_BASE_URL}}"
													],
													"path": [
														"exemption"
													]
												}
											},
											"response": []
										},
										{
											"name": "/courts/:court-id Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"response is ok\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "ddi-username",
														"value": "internal-user"
													},
													{
														"key": "ddi-displayname",
														"value": "User, Internal"
													}
												],
												"url": {
													"raw": "{{DDI_API_BASE_URL}}/courts/{{courtToDeleteId}}",
													"host": [
														"{{DDI_API_BASE_URL}}"
													],
													"path": [
														"courts",
														"{{courtToDeleteId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/police-forces/:police-id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"response is ok\", function () {",
															"    pm.response.to.have.status(204);",
															"    const body = pm.response.body",
															"    pm.expect(body).to.eq(undefined)",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "ddi-username",
														"value": "internal-user"
													},
													{
														"key": "ddi-displayname",
														"value": "User, Internal"
													}
												],
												"url": {
													"raw": "{{DDI_API_BASE_URL}}/police-forces/{{policeToBeDeleted}}",
													"host": [
														"{{DDI_API_BASE_URL}}"
													],
													"path": [
														"police-forces",
														"{{policeToBeDeleted}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/insurance/companies Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"response is ok\", function () {",
															"    pm.response.to.have.status(204);",
															"    const body = pm.response.body",
															"    pm.expect(body).to.eq(undefined)",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "ddi-username",
														"value": "internal-user"
													},
													{
														"key": "ddi-displayname",
														"value": "User, Internal"
													}
												],
												"url": {
													"raw": "{{DDI_API_BASE_URL}}/insurance/companies/{{insuranceIdToDelete}}",
													"host": [
														"{{DDI_API_BASE_URL}}"
													],
													"path": [
														"insurance",
														"companies",
														"{{insuranceIdToDelete}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/cdo/:index-number returns a 200 and valid cdo",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"response is ok\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"response returns an exemption\", function () {",
															"    const exemption = pm.response.json().cdo.exemption;",
															"    pm.expect(exemption.court).to.eq(\"City of Gotham State District Courthouse\")",
															"    pm.expect(exemption.policeForce).to.eq(\"Gotham City Police Department\")",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "ddi-username",
														"value": "internal-user"
													},
													{
														"key": "ddi-displayname",
														"value": "User, Internal"
													}
												],
												"url": {
													"raw": "{{DDI_API_BASE_URL}}/cdo/{{dogIndexNumberWithDeletedCourt}}",
													"host": [
														"{{DDI_API_BASE_URL}}"
													],
													"path": [
														"cdo",
														"{{dogIndexNumberWithDeletedCourt}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/cdos - with Pre-Exempt status",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const hasSoftDeletePoliceForce = cdo => {",
															"    return cdo.exemption.policeForce === 'Gotham City Police Department'",
															"}",
															"",
															"const cdos = pm.response.json().cdos;",
															"",
															"",
															"pm.test(\"response is ok\", function () {",
															"    pm.response.to.have.status(200);",
															"})",
															"",
															"pm.test(\"has soft delete policeForce\", function () {",
															"    pm.expect(cdos.some(hasSoftDeletePoliceForce)).to.be.true;",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{DDI_API_BASE_URL}}/cdos?status=InterimExempt",
													"host": [
														"{{DDI_API_BASE_URL}}"
													],
													"path": [
														"cdos"
													],
													"query": [
														{
															"key": "status",
															"value": "InterimExempt"
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"packages": {},
												"exec": [
													"console.log(pm.collectionVariables.get('courtToDeleteId'))"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"packages": {},
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "/cdo submits a valid CDO",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let cdoPostIndex = pm.environment.get(\"cdoPostIndex\");",
													"",
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"response returns an owner\", function () {",
													"    const owner = pm.response.json().owner;",
													"    pm.expect(owner).to.deep.include({",
													"        \"firstName\": `Homer${cdoPostIndex}`,",
													"        \"lastName\": `Simpson${cdoPostIndex}`,",
													"        \"birthDate\": \"1998-05-10\",",
													"        \"address\": {",
													"            \"addressLine1\": `${cdoPostIndex} Anywhere St`,",
													"            \"addressLine2\": \"Anywhere Estate\",",
													"            \"town\": \"City of London\",",
													"            \"postcode\": \"S1 1AA\",",
													"            \"country\": \"England\"",
													"        }",
													"    })",
													"    pm.expect(owner.personReference).to.be.a('string')",
													"});",
													"",
													"pm.test(\"response returns enforcement details\", function () {",
													"    const enforcementDetails = pm.response.json().enforcementDetails;",
													"    pm.expect(enforcementDetails.policeForce).to.be.a('string')",
													"    pm.expect(enforcementDetails.court).to.be.a('string')",
													"    pm.expect(enforcementDetails.legislationOfficer).to.equal('Sidney Lewis')",
													"});",
													"",
													"pm.test(\"dog details\", function () {",
													"    const dogs = pm.response.json().dogs;",
													"    const dog = dogs[0]",
													"    pm.expect(dogs).to.have.length(1)",
													"    pm.expect(dog.indexNumber.startsWith('ED')).to.be.true",
													"    pm.expect(dog.name).to.eq(`Rex${cdoPostIndex}`)",
													"    pm.expect(dog.status).to.eq('Interim exempt')",
													"    pm.expect(dog.breed).to.eq('XL Bully')",
													"    pm.expect(dog.cdoIssued).to.eq('2023-10-10')",
													"    pm.expect(dog.cdoExpiry).to.eq('2023-12-10')",
													"    pm.expect(dog.interimExemption).to.eq('2023-12-10')",
													"    const indexNumber = dog.indexNumber",
													"    pm.collectionVariables.set(\"index-number\",  indexNumber);",
													"    const dogId = parseInt(dog.indexNumber.replace('ED',''))",
													"    pm.collectionVariables.set(\"dogId1\",  dogId);",
													"    ",
													"});",
													"",
													"cdoPostIndex++",
													"pm.environment.set(\"cdoPostIndex\", cdoPostIndex);",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"owner\": {\n    \"firstName\": \"Homer{{cdoPostIndex}}\",\n    \"lastName\": \"Simpson{{cdoPostIndex}}\",\n    \"dateOfBirth\": \"1998-05-10\",\n    \"address\": {\n      \"addressLine1\": \"{{cdoPostIndex}} Anywhere St\",\n      \"addressLine2\": \"Anywhere Estate\",\n      \"town\": \"City of London\",\n      \"postcode\": \"S1 1AA\"\n    }\n  },\n  \"enforcementDetails\": {\n    \"court\": \"1\",\n    \"policeForce\": \"1\",\n    \"legislationOfficer\": \"Sidney Lewis\"\n  },\n  \"dogs\": [\n    {\n      \"breed\": \"XL Bully\",\n      \"name\": \"Rex{{cdoPostIndex}}\",\n      \"applicationType\": \"cdo\",\n      \"cdoIssued\": \"2023-10-10\",\n      \"cdoExpiry\": \"2023-12-10\",\n      \"interimExemption\": \"2023-12-10\",\n      \"status\": \"Status 1\"\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/cdo",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"cdo"
											]
										}
									},
									"response": []
								},
								{
									"name": "/cdo submits a valid CDO with different country",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let cdoPostIndex = pm.environment.get(\"cdoPostIndex\");",
													"",
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"response returns an owner\", function () {",
													"    const owner = pm.response.json().owner;",
													"    pm.expect(owner.address.country).to.equal('Wales')",
													"    pm.collectionVariables.set('welshCdo', owner.personReference)",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"owner\": {\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"dateOfBirth\": \"1998-05-10\",\n    \"address\": {\n      \"addressLine1\": \"{{$randomStreetAddress}}\",\n      \"addressLine2\": \"Anywhere Estate\",\n      \"town\": \"{{$randomCity}}\",\n      \"postcode\": \"S1 1AA\",\n      \"country\": \"Wales\"\n    }\n  },\n  \"enforcementDetails\": {\n    \"court\": \"1\",\n    \"policeForce\": \"1\",\n    \"legislationOfficer\": \"Sidney Lewis\"\n  },\n  \"dogs\": [\n    {\n      \"breed\": \"XL Bully\",\n      \"name\": \"Rex{{cdoPostIndex}}\",\n      \"applicationType\": \"cdo\",\n      \"cdoIssued\": \"2023-10-10\",\n      \"cdoExpiry\": \"2023-12-10\",\n      \"interimExemption\": \"2023-12-10\",\n      \"status\": \"Status 1\"\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/cdo",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"cdo"
											]
										}
									},
									"response": []
								},
								{
									"name": "/cdo/:index-number returns a 200 and valid cdo",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"response returns a person\", function () {",
													"    const owner = pm.response.json().cdo.person;",
													"    pm.expect(owner.id).to.be.a('number')",
													"    pm.expect(owner.firstName).to.be.a('string')",
													"});",
													"",
													"pm.test(\"response returns a dog\", function () {",
													"    const dog = pm.response.json().cdo.dog;",
													"    pm.expect(dog.id).to.be.a('number')",
													"    pm.expect(dog.indexNumber).to.eq(pm.collectionVariables.get('index-number'))",
													"});",
													"",
													"pm.test(\"response returns an exemption\", function () {",
													"    const exemption = pm.response.json().cdo.exemption;",
													"    pm.expect(exemption.exemptionOrder).to.be.a('string')",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/cdo/{{index-number}}",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"cdo",
												"{{index-number}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/cdo/:invalid-index returns a 404",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response returns a 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/cdo/ED000018",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"cdo",
												"ED000018"
											]
										}
									},
									"response": []
								},
								{
									"name": "/dog/:index-number returns 200 and a valid dog",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let cdoPostIndex = pm.environment.get(\"cdoPostIndex\");",
													"",
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"response returns a dog\", function () {",
													"    const dog = pm.response.json().dog;",
													"    pm.expect(dog.id).to.be.a('number')",
													"    pm.expect(dog.indexNumber).to.eq(pm.collectionVariables.get('index-number'))",
													"    pm.expect(dog.name).to.be.a('string')",
													"    pm.expect(dog.breed).to.be.oneOf(['XL Bully', 'Pit Bull Terrier','Japanese Tosa','Dogo Argentino','Fila Brasileiro'])",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/dog/{{index-number}}",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"dog",
												"{{index-number}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/dog/:invalid-index-number returns a 404",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response is not found\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/dog/ED000018",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"dog",
												"ED000018"
											]
										}
									},
									"response": []
								},
								{
									"name": "/dog-owner/:index-number",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"response returns the owner\", function () {",
													"    const owner = pm.response.json().owner;",
													"    pm.expect(owner.personReference).to.be.a('string')",
													"    pm.collectionVariables.set('reference', owner.personReference)",
													"    pm.collectionVariables.set('owner', JSON.stringify(owner))",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/dog-owner/{{index-number}}",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"dog-owner",
												"{{index-number}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/dog-owner/:index-number with include dogs should return dogs",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"response returns the owner\", function () {",
													"    const owner = pm.response.json().owner;",
													"    pm.expect(owner.personReference).to.be.a('string')",
													"    pm.expect(owner.dogs.length).to.be.at.least(1)",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/dog-owner/{{index-number}}?includeDogs=true",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"dog-owner",
												"{{index-number}}"
											],
											"query": [
												{
													"key": "includeDogs",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/dog-owner/:invalid-index-number returns a 404",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response is not found\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/dog-owner/ED000018",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"dog-owner",
												"ED000018"
											]
										}
									},
									"response": []
								},
								{
									"name": "/dog returns 200",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"response returns a dog\", function () {",
													"    const dog = pm.response.json();",
													"    pm.expect(dog.index_number).to.eq(pm.collectionVariables.get('index-number'))",
													"    pm.expect(dog.name).to.eq('Rex alive')",
													"    pm.expect(dog.status.status).to.equal('Interim exempt')",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"dogId\": {{dogId1}},\n    \"indexNumber\": \"{{index-number}}\",\n    \"breed\": \"XL Bully\",\n    \"name\": \"Rex alive\",\n    \"applicationType\": \"cdo\",\n    \"cdoIssued\": \"2023-10-10\",\n    \"cdoExpiry\": \"2023-12-10\",\n    \"interimExemption\": \"2023-12-10\",\n    \"status\": \"Interim exempt\",\n    \"microchipNumber\": \"123456789012346\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/dog",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"dog"
											]
										}
									},
									"response": []
								},
								{
									"name": "/person/:reference should get person data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"response returns the owner\", function () {",
													"    const owner = pm.response.json();",
													"    pm.expect(owner.personReference).to.eq(pm.collectionVariables.get('reference'))",
													"    pm.expect(owner.firstName).to.be.a('string')",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/person/{{reference}}",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"person",
												"{{reference}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/person/:reference includeDogs=true should get person data with dogs",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"response returns the owner\", function () {",
													"    const owner = pm.response.json();",
													"    pm.expect(owner.personReference).to.eq(pm.collectionVariables.get('reference'))",
													"    pm.expect(owner.firstName).to.be.a('string')",
													"    pm.expect(owner.dogs.length).to.be.above(0)",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/person/{{reference}}?includeDogs=true",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"person",
												"{{reference}}"
											],
											"query": [
												{
													"key": "includeDogs",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/person with invalid-reference should return a 400",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"personReference\": \"invalid\",\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"{{$randomLastName}}\",\n  \"dateOfBirth\": \"{{$isoTimestamp}}\",\n  \"address\": {\n    \"addressLine1\": \"{{$randomStreetAddress}}\",\n    \"town\": \"{{$randomCity}}\",\n    \"postcode\": \"SN1 1AA\",\n    \"country\": \"England\"\n  },\n  \"email\": \"{{$randomExampleEmail}}\",\n  \"primaryTelephone\": \"{{$randomPhoneNumber}}\",\n  \"secondaryTelephone\": \"{{$randomPhoneNumber}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/person",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"person"
											]
										}
									},
									"response": []
								},
								{
									"name": "/cdo submits a valid CDO with an existing owner",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let cdoPostIndex = pm.environment.get(\"cdoPostIndex\");",
													"",
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"response returns an owner\", function () {",
													"    const owner = pm.response.json().owner;",
													"    const request = JSON.parse(pm.request.body.raw)",
													"    pm.expect(owner.personReference).to.eq(request.owner.personReference)",
													"",
													"    ",
													"    pm.expect(owner.firstName).to.be.a('string')",
													"    pm.expect(owner.lastName).to.be.a('string')",
													"    pm.expect(owner.address.addressLine1).to.be.a('string')",
													"    pm.expect(owner.address.country).to.eq('Wales')",
													"    pm.expect(owner.personReference).to.eq(pm.collectionVariables.get('welshCdo'))",
													"});",
													"",
													"cdoPostIndex++",
													"pm.environment.set(\"cdoPostIndex\", cdoPostIndex);",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"owner\": {\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"dateOfBirth\": \"{{$isoTimestamp}}\",\n    \"address\": {\n      \"addressLine1\": \"{{$randomStreetAddress}}\",\n      \"addressLine2\": \"Anywhere Estate\",\n      \"town\": \"City of London\",\n      \"postcode\": \"S1 1AA\",\n      \"country\": \"England\"\n    },\n    \"personReference\": \"{{welshCdo}}\"\n  },\n  \"enforcementDetails\": {\n    \"court\": \"1\",\n    \"policeForce\": \"1\",\n    \"legislationOfficer\": \"Sidney Lewis\"\n  },\n  \"dogs\": [\n    {\n      \"breed\": \"XL Bully\",\n      \"name\": \"Rex{{cdoPostIndex}}\",\n      \"applicationType\": \"cdo\",\n      \"cdoIssued\": \"2023-10-10\",\n      \"cdoExpiry\": \"2023-12-10\",\n      \"interimExemption\": \"2023-12-10\",\n      \"status\": \"Status 1\"\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/cdo",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"cdo"
											]
										}
									},
									"response": []
								},
								{
									"name": "/cdo submits a valid CDO with an existing owner and existing dog",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let cdoPostIndex = pm.environment.get(\"cdoPostIndex\");",
													"",
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"response returns an owner\", function () {",
													"    const owner = pm.response.json().owner;",
													"    const request = JSON.parse(pm.request.body.raw)",
													"    pm.expect(owner.personReference).to.eq(request.owner.personReference)",
													"",
													"    ",
													"    pm.expect(owner.firstName).to.be.a('string')",
													"    pm.expect(owner.lastName).to.be.a('string')",
													"    pm.expect(owner.address.addressLine1).to.be.a('string')",
													"    pm.expect(owner.address.country).to.eq('Wales')",
													"    pm.expect(owner.personReference).to.eq(pm.collectionVariables.get('welshCdo'))",
													"});",
													"",
													"cdoPostIndex++",
													"pm.environment.set(\"cdoPostIndex\", cdoPostIndex);",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"owner\": {\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"dateOfBirth\": \"{{$isoTimestamp}}\",\n    \"address\": {\n      \"addressLine1\": \"{{$randomStreetAddress}}\",\n      \"addressLine2\": \"Anywhere Estate\",\n      \"town\": \"City of London\",\n      \"postcode\": \"S1 1AA\",\n      \"country\": \"England\"\n    },\n    \"personReference\": \"{{welshCdo}}\"\n  },\n  \"enforcementDetails\": {\n    \"court\": \"1\",\n    \"policeForce\": \"1\",\n    \"legislationOfficer\": \"Sidney Lewis\"\n  },\n  \"dogs\": [\n    {\n      \"breed\": \"XL Bully\",\n      \"name\": \"Rex{{cdoPostIndex}}\",\n      \"applicationType\": \"cdo\",\n      \"cdoIssued\": \"2023-10-10\",\n      \"cdoExpiry\": \"2023-12-10\",\n      \"interimExemption\": \"2023-12-10\",\n      \"status\": \"Status 1\"\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/cdo",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"cdo"
											]
										}
									},
									"response": []
								},
								{
									"name": "/person with valid reference should update person",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const isEdited = (str) => str.split(' ')[1] === 'EDITED'",
													"",
													"pm.test(\"response returns the owner\", function () {",
													"    const owner = pm.response.json();",
													"    pm.expect(owner.personReference).to.eq(pm.collectionVariables.get('reference'))",
													"    pm.expect(isEdited(owner.firstName)).to.be.true",
													"    pm.expect(isEdited(owner.lastName)).to.be.true",
													"    pm.expect(owner.address.addressLine1).to.contain('EDITED')",
													"    pm.expect(owner.address.country).to.eq('England')",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"personReference\": \"{{reference}}\",\n  \"firstName\": \"{{$randomFirstName}} EDITED\",\n  \"lastName\": \"{{$randomLastName}} EDITED\",\n  \"dateOfBirth\": \"1998-05-10T00:00:00.000Z\",\n  \"address\": {\n    \"addressLine1\": \"{{$randomStreetAddress}} EDITED\",\n    \"town\": \"City of London\",\n    \"postcode\": \"S1 1AA\",\n    \"country\": \"England\"\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/person",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"person"
											]
										}
									},
									"response": []
								},
								{
									"name": "/activity should submit an activity",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"response a list of dog activities\", function () {",
													"    const activity = pm.response.json()",
													"    pm.expect(activity.result).to.eq('ok')",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"activity\":\"1\",\n  \"activityType\":\"sent\",\n  \"pk\":\"{{reference}}\",\n  \"source\":\"owner\",\n  \"activityDate\":\"2024-02-29T09:30:13.587Z\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/activity",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"activity"
											]
										}
									},
									"response": []
								},
								{
									"name": "/exemption returns 200",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"response returns a dog\", function () {",
													"    const exemption = pm.response.json();",
													"    pm.expect(exemption.dog_id).to.eq(parseInt(pm.collectionVariables.get('index-number').replace('ED','')))",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"exemptionOrder\": 2023,\n  \"indexNumber\": \"{{index-number}}\",\n  \"cdoIssued\": \"2020-01-01\",\n  \"cdoExpiry\": \"2020-02-01\",\n  \"policeForce\": \"Avon and Somerset Constabulary\",\n  \"legislationOfficer\": \"Test Officer\",\n  \"certificateIssued\": \"2020-03-01\",\n  \"applicationFeePaid\": \"2020-03-01\",\n  \"neuteringConfirmation\": \"2020-04-01\",\n  \"microchipVerification\": \"2020-04-01\",\n  \"joinedExemptionScheme\": \"2020-05-01\",\n  \"insurance\": {\n    \"company\": \"Dogs Trust\",\n    \"renewalDate\": \"2020-06-01\"\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/exemption",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"exemption"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Summary Cdos",
							"item": [
								{
									"name": "1-Setup",
									"item": [
										{
											"name": "Add Pre-Exempt Scott Pilgrim",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"response is ok\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "ddi-username",
														"value": "internal-user"
													},
													{
														"key": "ddi-displayname",
														"value": "User, Internal"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"owner\": {\n        \"firstName\": \"Scott\",\n        \"lastName\": \"Pilgrim\",\n        \"personReference\": null,\n        \"address\": {\n            \"addressLine1\": \"SHEAF STREET\",\n            \"town\": \"SHEFFIELD\",\n            \"postcode\": \"S1 2BP\",\n            \"country\": \"England\"\n        }\n    },\n    \"enforcementDetails\": {\n        \"court\": null,\n        \"policeForce\": \"5\",\n        \"legislationOfficer\": \"\"\n    },\n    \"dogs\": [\n        {\n            \"breed\": \"Pit Bull Terrier\",\n            \"name\": \"\",\n            \"applicationType\": \"cdo\",\n            \"cdoIssued\": \"2024-01-01T00:00:00.000Z\",\n            \"cdoExpiry\": \"2024-04-19T00:00:00.000Z\",\n            \"interimExemption\": null\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{DDI_API_BASE_URL}}/cdo",
													"host": [
														"{{DDI_API_BASE_URL}}"
													],
													"path": [
														"cdo"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add  Pre-Exempt Ramona Flowers",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"response is ok\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "ddi-username",
														"value": "internal-user"
													},
													{
														"key": "ddi-displayname",
														"value": "User, Internal"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"owner\": {\n        \"firstName\": \"Ramona\",\n        \"lastName\": \"Flowers\",\n        \"personReference\": null,\n        \"address\": {\n            \"addressLine1\": \"FLAT 33, HOMEFERN HOUSE, COBBS PLACE\",\n            \"town\": \"MARGATE\",\n            \"postcode\": \"CT9 1JF\",\n            \"country\": \"England\"\n        }\n    },\n    \"enforcementDetails\": {\n        \"court\": null,\n        \"policeForce\": \"24\",\n        \"legislationOfficer\": \"\"\n    },\n    \"dogs\": [\n        {\n            \"breed\": \"Japanese Tosa\",\n            \"name\": \"\",\n            \"applicationType\": \"cdo\",\n            \"cdoIssued\": \"2024-01-01\",\n            \"cdoExpiry\": \"2024-04-21\",\n            \"interimExemption\": null\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{DDI_API_BASE_URL}}/cdo",
													"host": [
														"{{DDI_API_BASE_URL}}"
													],
													"path": [
														"cdo"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add Pre-Exempt Che Adams",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"response is ok\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "ddi-username",
														"value": "internal-user"
													},
													{
														"key": "ddi-displayname",
														"value": "User, Internal"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"owner\": {\n        \"firstName\": \"Che\",\n        \"lastName\": \"Adams\",\n        \"personReference\": null,\n        \"address\": {\n            \"addressLine1\": \" 12A, MORANT ROAD\",\n            \"town\": \"RINGWOOD\",\n            \"postcode\": \"BH24 1SX\",\n            \"country\": \"England\"\n        }\n    },\n    \"enforcementDetails\": {\n        \"court\": null,\n        \"policeForce\": \"21\",\n        \"legislationOfficer\": \"\"\n    },\n    \"dogs\": [\n        {\n            \"breed\": \"Japanese Tosa\",\n            \"name\": \"\",\n            \"applicationType\": \"cdo\",\n            \"cdoIssued\": \"2024-01-01\",\n            \"cdoExpiry\": \"2024-05-31\",\n            \"interimExemption\": null\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{DDI_API_BASE_URL}}/cdo",
													"host": [
														"{{DDI_API_BASE_URL}}"
													],
													"path": [
														"cdo"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add Interim exempt Ricardo Scimeca",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"response is ok\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "ddi-username",
														"value": "internal-user"
													},
													{
														"key": "ddi-displayname",
														"value": "User, Internal"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"owner\": {\n        \"firstName\": \"Ricardo\",\n        \"lastName\": \"Scimeca\",\n        \"personReference\": null,\n        \"address\": {\n            \"addressLine1\": \"FLAT 1, FERRYMANS QUAY\",\n            \"town\": \"WILLIAM MORRIS WAY\",\n            \"postcode\": \"SW6 2UT\",\n            \"country\": \"England\"\n        }\n    },\n    \"enforcementDetails\": {\n        \"court\": null,\n        \"policeForce\": \"30\",\n        \"legislationOfficer\": \"\"\n    },\n    \"dogs\": [\n        {\n            \"breed\": \"Japanese Tosa\",\n            \"name\": \"\",\n            \"applicationType\": \"interim-exemption\",\n            \"cdoIssued\": null,\n            \"cdoExpiry\": null,\n            \"interimExemption\": \"2024-04-22\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{DDI_API_BASE_URL}}/cdo",
													"host": [
														"{{DDI_API_BASE_URL}}"
													],
													"path": [
														"cdo"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "2-Tests",
									"item": [
										{
											"name": "Sorting",
											"item": [
												{
													"name": "/cdos - sort by Police Force ASC",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isInAscendingOrder = () => { ",
																	"    const currentPoliceForce = { value: '' }",
																	"",
																	"    return (cdo) => {",
																	"        const policeForce = cdo.exemption.policeForce",
																	"        let comparison = policeForce === null ? 1 : policeForce.localeCompare(currentPoliceForce.value)",
																	"        const isInOrder = comparison >= 0",
																	"        if (!isInOrder) {",
																	"            console.error(currentPoliceForce.value)",
																	"            console.error(policeForce, currentPoliceForce.value)",
																	"        }",
																	"        currentPoliceForce.value = policeForce",
																	"        return isInOrder",
																	"    }",
																	"}",
																	"",
																	"const cdos = pm.response.json().cdos;",
																	"",
																	"pm.test(\"response is ok\", function () {",
																	"    pm.response.to.have.status(200);",
																	"})",
																	"",
																	"pm.test(\"results are in descending order by joinedExemptionScheme\", function () {",
																	"    pm.expect(cdos.every(isInAscendingOrder())).to.be.true;",
																	"})"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{DDI_API_BASE_URL}}/cdos?status=PreExempt&sortKey=policeForce",
															"host": [
																"{{DDI_API_BASE_URL}}"
															],
															"path": [
																"cdos"
															],
															"query": [
																{
																	"key": "status",
																	"value": "PreExempt"
																},
																{
																	"key": "sortKey",
																	"value": "policeForce"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "/cdos - sort by Lastname ASC",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isInAscendingOrder = () => { ",
																	"    const currentOwner = { value: '' }",
																	"",
																	"    return (cdo) => {",
																	"        const owner = cdo.person.lastName + ' ' + cdo.person.firstName",
																	"        const isInOrder = owner.localeCompare(currentOwner.value) >= 0",
																	"        if (!isInOrder) {",
																	"            console.error(currentOwner.value)",
																	"            console.error(owner, currentOwner.value)",
																	"        }",
																	"        currentOwner.value = owner",
																	"        return isInOrder",
																	"    }",
																	"}",
																	"",
																	"const cdos = pm.response.json().cdos;",
																	"",
																	"pm.test(\"response is ok\", function () {",
																	"    pm.response.to.have.status(200);",
																	"})",
																	"",
																	"pm.test(\"results are in descending order by joinedExemptionScheme\", function () {",
																	"    pm.expect(cdos.every(isInAscendingOrder())).to.be.true;",
																	"})"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{DDI_API_BASE_URL}}/cdos?status=PreExempt&sortKey=owner",
															"host": [
																"{{DDI_API_BASE_URL}}"
															],
															"path": [
																"cdos"
															],
															"query": [
																{
																	"key": "status",
																	"value": "PreExempt"
																},
																{
																	"key": "sortKey",
																	"value": "owner"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "/cdos - sort by IndexNumber DESC",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isInAscendingOrder = () => { ",
																	"    const currentDogId = { value: 99999999 }",
																	"",
																	"    return (cdo) => {",
																	"        const dogId = cdo.dog.id",
																	"        const isInOrder = dogId <= currentDogId.value",
																	"        if (!isInOrder) {",
																	"            console.error(currentDogId.value)",
																	"            console.error(cdo.dog.id, currentDogId.value)",
																	"        }",
																	"        currentDogId.value = dogId",
																	"        return isInOrder",
																	"    }",
																	"}",
																	"",
																	"const cdos = pm.response.json().cdos;",
																	"",
																	"pm.test(\"response is ok\", function () {",
																	"    pm.response.to.have.status(200);",
																	"})",
																	"",
																	"pm.test(\"results are in descending order by joinedExemptionScheme\", function () {",
																	"    pm.expect(cdos.every(isInAscendingOrder())).to.be.true;",
																	"})"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{DDI_API_BASE_URL}}/cdos?status=PreExempt&sortKey=indexNumber&sortOrder=DESC",
															"host": [
																"{{DDI_API_BASE_URL}}"
															],
															"path": [
																"cdos"
															],
															"query": [
																{
																	"key": "status",
																	"value": "PreExempt"
																},
																{
																	"key": "sortKey",
																	"value": "indexNumber"
																},
																{
																	"key": "sortOrder",
																	"value": "DESC"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "/cdos - with Pre-Exempt status",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"/* ",
															"    Response has the following structure",
															"    {",
															"        \"cdos\": [",
															"            {",
															"                \"person\": {",
															"                    \"id\": 19,",
															"                    \"firstName\": \"Scott\",",
															"                    \"lastName\": \"Pilgrim\",",
															"                    \"personReference\": \"P-DCAC-AE23\"",
															"                },",
															"                \"dog\": {",
															"                    \"id\": 300024,",
															"                    \"status\": \"Pre-exempt\",",
															"                    \"dogReference\": \"ED300024\"",
															"                },",
															"                \"exemption\": {",
															"                    \"policeForce\": \"Cheshire Constabulary\",",
															"                    \"cdoExpiry\": \"2024-04-19\",",
															"                    \"joinedExemptionScheme\":  \"2024-04-19\"",
															"                }",
															"            }",
															"        ]",
															"    }",
															"*/",
															"const isPreExempt = cdo => {",
															"    return cdo.dog.status === 'Pre-exempt'",
															"}",
															"",
															"const cdos = pm.response.json().cdos;",
															"",
															"",
															"pm.test(\"response is ok\", function () {",
															"    pm.response.to.have.status(200);",
															"    const [cdo] = cdos",
															"    pm.expect(cdo.person.id).to.be.a('number')",
															"    pm.expect(cdo.person.firstName).to.be.a('string')",
															"    pm.expect(cdo.person.lastName).to.be.a('string')",
															"    pm.expect(cdo.person.personReference).to.be.a('string')",
															"    pm.expect(cdo.person.id).to.be.a('number')",
															"    pm.expect(cdo.dog.id).to.be.a('number')",
															"    pm.expect(cdo.dog.status).to.equal('Pre-exempt')",
															"    pm.expect(cdo.exemption.policeForce).to.be.a('string')",
															"    pm.expect(cdo.exemption.cdoExpiry).to.be.a('string')",
															"    pm.expect(cdo.exemption.joinedExemptionScheme).not.to.be.undefined",
															"})",
															"",
															"pm.test(\"only contains Pre-Exempt\", function () {",
															"    pm.expect(cdos.every(isPreExempt)).to.be.true;",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{DDI_API_BASE_URL}}/cdos?status=PreExempt",
													"host": [
														"{{DDI_API_BASE_URL}}"
													],
													"path": [
														"cdos"
													],
													"query": [
														{
															"key": "status",
															"value": "PreExempt"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "/cdos - with array of statuses",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const isPreExemptOrInterimExempt = cdo => {",
															"    return cdo.dog.status === 'Pre-exempt' || cdo.dog.status === 'Interim exempt'",
															"}",
															"const cdos = pm.response.json().cdos;",
															"",
															"pm.test(\"response is ok\", function () {",
															"    pm.response.to.have.status(200);",
															"})",
															"",
															"pm.test(\"only contains Pre-Exempt and Interim exempt\", function () {",
															"    pm.expect(cdos.every(isPreExemptOrInterimExempt)).to.be.true;",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{DDI_API_BASE_URL}}/cdos?status=PreExempt&status=InterimExempt",
													"host": [
														"{{DDI_API_BASE_URL}}"
													],
													"path": [
														"cdos"
													],
													"query": [
														{
															"key": "status",
															"value": "PreExempt"
														},
														{
															"key": "status",
															"value": "InterimExempt"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "/cdos - with sorted ASC InterimExempt",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const isInterimExempt = cdo => {",
															"    return cdo.dog.status === 'Interim exempt'",
															"}",
															"",
															"const isInAscendingOrder = () => { ",
															"    const currentCdo = { value: new Date(0) }",
															"",
															"    return (cdo) => {",
															"        const joinedExemptionScheme = new Date(cdo.exemption.joinedExemptionScheme)",
															"        const isInOrder = joinedExemptionScheme >= currentCdo.value",
															"        if (!isInOrder) {",
															"            console.error(currentCdo.value)",
															"            console.error(cdo.exemption.joinedExemptionScheme, currentCdo.value)",
															"        }",
															"        currentCdo.value = joinedExemptionScheme",
															"        return isInOrder",
															"    }",
															"}",
															"",
															"const cdos = pm.response.json().cdos;",
															"",
															"pm.test(\"response is ok\", function () {",
															"    pm.response.to.have.status(200);",
															"})",
															"",
															"pm.test(\"results are in descending order by joinedExemptionScheme\", function () {",
															"    pm.expect(cdos.every(isInAscendingOrder())).to.be.true;",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{DDI_API_BASE_URL}}/cdos?status=InterimExempt&sortKey=joinedExemptionScheme&sortOrder=ASC",
													"host": [
														"{{DDI_API_BASE_URL}}"
													],
													"path": [
														"cdos"
													],
													"query": [
														{
															"key": "status",
															"value": "InterimExempt"
														},
														{
															"key": "sortKey",
															"value": "joinedExemptionScheme"
														},
														{
															"key": "sortOrder",
															"value": "ASC"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "/cdos - with sorted DESC InterimExempt",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const isInterimExempt = cdo => {",
															"    return cdo.dog.status === 'Interim exempt'",
															"}",
															"",
															"const isInDescendingOrder = () => { ",
															"    const currentCdo = { value: new Date('9999-12-31') }",
															"",
															"    return (cdo) => {",
															"        const joinedExemptionScheme = new Date(cdo.exemption.joinedExemptionScheme)",
															"        const isInOrder = joinedExemptionScheme <= currentCdo.value",
															"        if (!isInOrder) {",
															"            console.error(currentCdo.value)",
															"            console.error(cdo.exemption.joinedExemptionScheme, currentCdo.value)",
															"        }",
															"        currentCdo.value = joinedExemptionScheme",
															"        return isInOrder",
															"    }",
															"}",
															"",
															"const cdos = pm.response.json().cdos;",
															"",
															"pm.test(\"response is ok\", function () {",
															"    pm.response.to.have.status(200);",
															"})",
															"",
															"pm.test(\"results are in descending order by joinedExemptionScheme\", function () {",
															"    pm.expect(cdos.every(isInDescendingOrder())).to.be.true;",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{DDI_API_BASE_URL}}/cdos?status=InterimExempt&sortKey=joinedExemptionScheme&sortOrder=DESC",
													"host": [
														"{{DDI_API_BASE_URL}}"
													],
													"path": [
														"cdos"
													],
													"query": [
														{
															"key": "status",
															"value": "InterimExempt"
														},
														{
															"key": "sortKey",
															"value": "joinedExemptionScheme"
														},
														{
															"key": "sortOrder",
															"value": "DESC"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "/cdos - due in 30 days",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const thirtyDays = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000)",
															"",
															"const isPreExemptAndInThirtyDays = cdo => {",
															"        return new Date(cdo.exemption.cdoExpiry) <= thirtyDays",
															"}",
															"",
															"const cdos = pm.response.json().cdos;",
															"",
															"pm.test(\"response is ok\", function () {",
															"    pm.response.to.have.status(200);",
															"})",
															"",
															"pm.test(\"only contains Pre-Exempt\", function () {",
															"    pm.expect(cdos.every(isPreExemptAndInThirtyDays)).to.be.true;",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{DDI_API_BASE_URL}}/cdos?status=PreExempt&withinDays=30",
													"host": [
														"{{DDI_API_BASE_URL}}"
													],
													"path": [
														"cdos"
													],
													"query": [
														{
															"key": "status",
															"value": "PreExempt"
														},
														{
															"key": "withinDays",
															"value": "30"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "/cdos - invalid",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"response is ok\", function () {",
															"    pm.response.to.have.status(400);",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{DDI_API_BASE_URL}}/cdos",
													"host": [
														"{{DDI_API_BASE_URL}}"
													],
													"path": [
														"cdos"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "3-Teardown",
									"item": []
								}
							]
						},
						{
							"name": "Manage CDO",
							"item": [
								{
									"name": "Setup",
									"item": [
										{
											"name": "Create dog 1 Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const manageCdo = {}",
															"",
															"pm.test(\"response is ok\", function () {",
															"    pm.response.to.have.status(200);",
															"    const cdo = pm.response.json();",
															"",
															"    manageCdo.pk = cdo.dogs[0].indexNumber",
															"    pm.collectionVariables.set('manageCdo', JSON.stringify(manageCdo))",
															"    pm.collectionVariables.set('manageCdoPk', manageCdo.pk)",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.collectionVariables.set('batchDeleteDogs', '[]')"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "ddi-username",
														"value": "internal-user"
													},
													{
														"key": "ddi-displayname",
														"value": "User, Internal"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"owner\": {\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"dateOfBirth\": \"1998-05-10\",\n    \"address\": {\n      \"addressLine1\": \"{{$randomStreetAddress}}\",\n      \"addressLine2\": null,\n      \"town\": \"{{$randomCity}}\",\n      \"postcode\": \"S1 1AA\"\n    }\n  },\n  \"enforcementDetails\": {\n    \"court\": \"1\",\n    \"policeForce\": \"1\",\n    \"legislationOfficer\": \"Sidney Lewis\"\n  },\n  \"dogs\": [\n    {\n      \"breed\": \"XL Bully\",\n      \"name\": \"{{$randomFirstName}}\",\n      \"applicationType\": \"interim-exemption\",\n      \"cdoIssued\": \"2023-10-10\",\n      \"cdoExpiry\": \"2023-12-10\",\n      \"interimExemption\": \"2023-12-10\",\n      \"status\": \"Status 1\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{DDI_API_BASE_URL}}/cdo",
													"host": [
														"{{DDI_API_BASE_URL}}"
													],
													"path": [
														"cdo"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Actions in wrong order",
									"item": [
										{
											"name": "409 Send Record Insurance Details too early",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('should return an insurance object', () => {",
															"  pm.response.to.have.status(409);",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const futureDate = new Date()",
															"futureDate.setDate(futureDate.getDate() + 60)",
															"pm.variables.set('futureDate', futureDate)"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "ddi-username",
														"value": "internal-user",
														"type": "text"
													},
													{
														"key": "ddi-displayname",
														"value": "User, Internal",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"insuranceCompany\": \"Dog's Trust\",\n    \"insuranceRenewal\": \"{{futureDate}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{DDI_API_BASE_URL}}/cdo/{{manageCdoPk}}/manage:recordInsuranceDetails",
													"host": [
														"{{DDI_API_BASE_URL}}"
													],
													"path": [
														"cdo",
														"{{manageCdoPk}}",
														"manage:recordInsuranceDetails"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Manage CDO init",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('should return a manageCdo object', () => {",
													"  pm.response.to.have.status(200);",
													"})",
													"",
													"const cdo = pm.response.json();",
													"",
													"pm.test('should have tasks', () => {",
													"  pm.expect(cdo).to.have.property('tasks');",
													"})",
													"pm.test('should have applicationPackSent', () => {",
													"  pm.expect(cdo.tasks).to.have.property('applicationPackSent');",
													"})",
													"pm.test('should have insuranceDetailsRecorded', () => {",
													"  pm.expect(cdo.tasks).to.have.property('insuranceDetailsRecorded');",
													"})",
													"pm.test('should have microchipNumberRecorded', () => {",
													"  pm.expect(cdo.tasks).to.have.property('microchipNumberRecorded');",
													"})",
													"pm.test('should have applicationFeePaid', () => {",
													"    pm.expect(cdo.tasks).to.have.property('applicationFeePaid');",
													"})",
													"pm.test('should have form2Sent', () => {",
													"    pm.expect(cdo.tasks).to.have.property('form2Sent');",
													"})",
													"pm.test('should have verificationDateRecorded', () => {",
													"    pm.expect(cdo.tasks).to.have.property('verificationDateRecorded');",
													"})",
													"pm.test('should have certificateIssued', () => {",
													"    pm.expect(cdo.tasks).to.have.property('certificateIssued');",
													"})",
													"",
													"pm.test('should initialise the Cdo Management tasks correctly', () => {",
													"    pm.expect(cdo.tasks).to.deep.equal({",
													"        applicationPackSent: {",
													"            key: 'applicationPackSent',",
													"            available: true,",
													"            completed: false,",
													"            readonly: false,",
													"        },",
													"        insuranceDetailsRecorded: {",
													"            key: 'insuranceDetailsRecorded',",
													"            available: false,",
													"            completed: false,",
													"            readonly: false,",
													"        },",
													"        microchipNumberRecorded: {",
													"            key: 'microchipNumberRecorded',",
													"            available: false,",
													"            completed: false,",
													"            readonly: false,",
													"        },",
													"        applicationFeePaid: {",
													"            key: 'applicationFeePaid',",
													"            available: false,",
													"            completed: false,",
													"            readonly: false,",
													"        },",
													"        form2Sent: {",
													"            key: 'form2Sent',",
													"            available: false,",
													"            completed: false,",
													"            readonly: false,",
													"        },",
													"        verificationDateRecorded: {",
													"            key: 'verificationDateRecorded',",
													"            available: false,",
													"            completed: false,",
													"            readonly: false,",
													"        },",
													"        certificateIssued: {",
													"            key: 'certificateIssued',",
													"            available: false,",
													"            completed: false,",
													"            readonly: false,",
													"        }",
													"    })",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/cdo/{{manageCdoPk}}/manage",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"cdo",
												"{{manageCdoPk}}",
												"manage"
											]
										}
									},
									"response": []
								},
								{
									"name": "204 Send Application Pack",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('should return a manageCdo object', () => {",
													"  pm.response.to.have.status(204);",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user",
												"type": "text"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/cdo/{{manageCdoPk}}/manage:sendApplicationPack",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"cdo",
												"{{manageCdoPk}}",
												"manage:sendApplicationPack"
											]
										}
									},
									"response": []
								},
								{
									"name": "409 Send Application a second time",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('should return a manageCdo object', () => {",
													"  pm.response.to.have.status(409);",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user",
												"type": "text"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/cdo/{{manageCdoPk}}/manage:sendApplicationPack",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"cdo",
												"{{manageCdoPk}}",
												"manage:sendApplicationPack"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 Send Record Insurance Details",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('should return an insurance object', () => {",
													"  pm.response.to.have.status(201);",
													"  const payload = pm.response.json()",
													"  pm.expect(payload.insuranceCompany).to.eq('Dogs Trust')",
													"  pm.expect(payload.insuranceRenewal).to.be.a('string')",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const futureDate = new Date()",
													"futureDate.setDate(futureDate.getDate() + 60)",
													"pm.variables.set('futureDate', futureDate)"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user",
												"type": "text"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"insuranceCompany\": \"Dogs Trust\",\n    \"insuranceRenewal\": \"{{futureDate}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/cdo/{{manageCdoPk}}/manage:recordInsuranceDetails",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"cdo",
												"{{manageCdoPk}}",
												"manage:recordInsuranceDetails"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 Record Microchip Number",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('should return microchip number', () => {",
													"  pm.response.to.have.status(201);",
													"  const payload = pm.response.json()",
													"  pm.expect(payload.microchipNumber).to.eq(pm.variables.get('manageCdoMicrochip'))",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const microchipBase = Math.floor(Math.random() * 999999999999999)",
													"pm.collectionVariables.set('manageCdoMicrochip',`${microchipBase}`.padEnd(15, '1'))"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user",
												"type": "text"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"microchipNumber\": \"{{manageCdoMicrochip}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/cdo/{{manageCdoPk}}/manage:recordMicrochipNumber",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"cdo",
												"{{manageCdoPk}}",
												"manage:recordMicrochipNumber"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 Record Microchip Number",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('should return bad request', () => {",
													"  pm.response.to.have.status(400);",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user",
												"type": "text"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"microchipNumber\": \"123456789a12345\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/cdo/{{manageCdoPk}}/manage:recordMicrochipNumber",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"cdo",
												"{{manageCdoPk}}",
												"manage:recordMicrochipNumber"
											]
										}
									},
									"response": []
								},
								{
									"name": "409 Record Microchip Number Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('should return bad request', () => {",
													"  pm.response.to.have.status(409);",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user",
												"type": "text"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"microchipNumber\": \"123456789012346\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/cdo/{{manageCdoPk}}/manage:recordMicrochipNumber",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"cdo",
												"{{manageCdoPk}}",
												"manage:recordMicrochipNumber"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 Record Application Fee Payment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('should return applicationFeePaid date', () => {",
													"  pm.response.to.have.status(201);",
													"  const payload = pm.response.json()",
													"  pm.expect(payload.applicationFeePaid).to.eq(\"2024-07-02T00:00:00.000Z\")",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user",
												"type": "text"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"applicationFeePaid\": \"2024-07-02\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/cdo/{{manageCdoPk}}/manage:recordApplicationFee",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"cdo",
												"{{manageCdoPk}}",
												"manage:recordApplicationFee"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 Record Application Fee Payment - Invalid Date",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('should return applicationFeePaid date', () => {",
													"  pm.response.to.have.status(400);",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user",
												"type": "text"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"applicationFeePaid\": \"9999-07-02\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/cdo/{{manageCdoPk}}/manage:recordApplicationFee",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"cdo",
												"{{manageCdoPk}}",
												"manage:recordApplicationFee"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 Manage CDO - Application Fee Paid Complete",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('should return a manageCdo object', () => {",
													"  pm.response.to.have.status(200);",
													"})",
													"",
													"const cdo = pm.response.json();",
													"",
													"pm.test('should return the cdo data for the task list', () => {",
													"    pm.expect(new Date(cdo.applicationPackSent)).to.be.a('Date')",
													"    pm.expect(cdo.insuranceCompany).to.equal('Dogs Trust')",
													"    pm.expect(new Date(cdo.insuranceRenewal)).to.be.a('Date')",
													"    pm.expect(cdo.microchipNumber).to.be.a('string')",
													"    pm.expect(new Date(cdo.applicationFeePaid)).to.be.a('Date')",
													"})",
													"",
													"pm.test('should show the Cdo Management tasks correctly', () => {",
													"    pm.expect(cdo.tasks.applicationPackSent).to.deep.contain({",
													"        \"key\": \"applicationPackSent\",",
													"        \"available\": true,",
													"        \"completed\": true,",
													"        \"readonly\": true,",
													"    })",
													"",
													"    pm.expect(cdo.tasks.insuranceDetailsRecorded).to.deep.contain({",
													"        key: 'insuranceDetailsRecorded',",
													"        available: true,",
													"        completed: true,",
													"        readonly: false,",
													"    })",
													"",
													"    pm.expect(cdo.tasks.microchipNumberRecorded).to.deep.contain({",
													"        key: 'microchipNumberRecorded',",
													"        available: true,",
													"        completed: true,",
													"        readonly: false,",
													"    })",
													"    ",
													"    pm.expect(cdo.tasks.applicationFeePaid).to.deep.contain({",
													"        key: 'applicationFeePaid',",
													"        available: true,",
													"        completed: true,",
													"        readonly: false,",
													"    })",
													"    pm.expect(cdo.tasks.form2Sent).to.deep.contain({",
													"        key: 'form2Sent',",
													"        available: true,",
													"        completed: false,",
													"        readonly: false,",
													"    })",
													"    pm.expect(cdo.tasks.verificationDateRecorded).to.deep.contain({",
													"        key: 'verificationDateRecorded',",
													"        available: false,",
													"        completed: false,",
													"        readonly: false,",
													"    })",
													"    pm.expect(cdo.tasks.certificateIssued).to.deep.contain({",
													"        key: 'certificateIssued',",
													"        available: false,",
													"        completed: false,",
													"        readonly: false,",
													"    })",
													"})",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/cdo/{{manageCdoPk}}/manage",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"cdo",
												"{{manageCdoPk}}",
												"manage"
											]
										}
									},
									"response": []
								},
								{
									"name": "204 Send Form 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('should send form 2', () => {",
													"  pm.response.to.have.status(204);",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user",
												"type": "text"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/cdo/{{manageCdoPk}}/manage:sendForm2",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"cdo",
												"{{manageCdoPk}}",
												"manage:sendForm2"
											]
										}
									},
									"response": []
								},
								{
									"name": "409 Send Form 2 Duplicate",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('should send form 2', () => {",
													"  pm.response.to.have.status(409);",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user",
												"type": "text"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/cdo/{{manageCdoPk}}/manage:sendForm2",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"cdo",
												"{{manageCdoPk}}",
												"manage:sendForm2"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 Manage CDO form2Sent",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('should return a manageCdo object', () => {",
													"  pm.response.to.have.status(200);",
													"})",
													"",
													"const cdo = pm.response.json();",
													"",
													"",
													"pm.test('should return the cdo data for the task list', () => {",
													"    // 'neuteringConfirmation', 'microchipVerification', 'certificateIssued'",
													"    pm.expect(cdo.applicationPackSent).to.be.a('string')",
													"    pm.expect(cdo.insuranceCompany).to.equal('Dogs Trust')",
													"    pm.expect(cdo.insuranceRenewal).to.be.a('string')",
													"    pm.expect(cdo.microchipNumber).to.be.a('string')",
													"    pm.expect(cdo.applicationFeePaid).to.be.a('string')",
													"    pm.expect(cdo.form2Sent).to.be.a('string')",
													"})",
													"",
													"pm.test('should show the Cdo Management tasks correctly', () => {",
													"    pm.expect(cdo.tasks.applicationPackSent).to.deep.contain({",
													"        \"key\": \"applicationPackSent\",",
													"        \"available\": true,",
													"        \"completed\": true,",
													"        \"readonly\": true,",
													"    })",
													"",
													"    pm.expect(cdo.tasks.insuranceDetailsRecorded).to.deep.contain({",
													"        key: 'insuranceDetailsRecorded',",
													"        available: true,",
													"        completed: true,",
													"        readonly: false,",
													"    })",
													"",
													"    pm.expect(cdo.tasks.microchipNumberRecorded).to.deep.contain({",
													"        key: 'microchipNumberRecorded',",
													"        available: true,",
													"        completed: true,",
													"        readonly: false,",
													"    })",
													"    ",
													"    pm.expect(cdo.tasks.applicationFeePaid).to.deep.contain({",
													"        key: 'applicationFeePaid',",
													"        available: true,",
													"        completed: true,",
													"        readonly: false,",
													"    })",
													"    pm.expect(cdo.tasks.form2Sent).to.deep.contain({",
													"        key: 'form2Sent',",
													"        available: true,",
													"        completed: true,",
													"        readonly: true,",
													"    })",
													"    pm.expect(cdo.tasks.verificationDateRecorded).to.deep.contain({",
													"        key: 'verificationDateRecorded',",
													"        available: true,",
													"        completed: false,",
													"        readonly: false,",
													"    })",
													"    pm.expect(cdo.tasks.certificateIssued).to.deep.contain({",
													"        key: 'certificateIssued',",
													"        available: false,",
													"        completed: false,",
													"        readonly: false,",
													"    })",
													"})",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/cdo/{{manageCdoPk}}/manage",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"cdo",
												"{{manageCdoPk}}",
												"manage"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 Verify Dates",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('should return applicationFeePaid date', () => {",
													"  pm.response.to.have.status(201);",
													"  const payload = pm.response.json()",
													"  pm.expect(payload.microchipVerification).to.eq(\"2024-07-03T00:00:00.000Z\")",
													"  pm.expect(payload.neuteringConfirmation).to.eq(\"2024-07-04T00:00:00.000Z\")",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user",
												"type": "text"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"microchipVerification\": \"2024-07-03\",\n    \"neuteringConfirmation\": \"2024-07-04\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/cdo/{{manageCdoPk}}/manage:verifyDates",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"cdo",
												"{{manageCdoPk}}",
												"manage:verifyDates"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 Manage CDO form2Sent Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('should return a manageCdo object', () => {",
													"  pm.response.to.have.status(200);",
													"})",
													"",
													"const cdo = pm.response.json();",
													"",
													"",
													"pm.test('should return the cdo data for the task list', () => {",
													"    // 'certificateIssued'",
													"    pm.expect(cdo.applicationPackSent).to.be.a('string')",
													"    pm.expect(cdo.insuranceCompany).to.equal('Dogs Trust')",
													"    pm.expect(cdo.insuranceRenewal).to.be.a('string')",
													"    pm.expect(cdo.microchipNumber).to.be.a('string')",
													"    pm.expect(cdo.applicationFeePaid).to.be.a('string')",
													"    pm.expect(cdo.form2Sent).to.be.a('string')",
													"    pm.expect(cdo.neuteringConfirmation).to.be.a('string')",
													"    pm.expect(cdo.microchipVerification).to.be.a('string')",
													"})",
													"",
													"pm.test('should show the Cdo Management tasks correctly', () => {",
													"    pm.expect(cdo.tasks.applicationPackSent).to.deep.contain({",
													"        \"key\": \"applicationPackSent\",",
													"        \"available\": true,",
													"        \"completed\": true,",
													"        \"readonly\": true,",
													"    })",
													"",
													"    pm.expect(cdo.tasks.insuranceDetailsRecorded).to.deep.contain({",
													"        key: 'insuranceDetailsRecorded',",
													"        available: true,",
													"        completed: true,",
													"        readonly: false,",
													"    })",
													"",
													"    pm.expect(cdo.tasks.microchipNumberRecorded).to.deep.contain({",
													"        key: 'microchipNumberRecorded',",
													"        available: true,",
													"        completed: true,",
													"        readonly: false,",
													"    })",
													"    ",
													"    pm.expect(cdo.tasks.applicationFeePaid).to.deep.contain({",
													"        key: 'applicationFeePaid',",
													"        available: true,",
													"        completed: true,",
													"        readonly: false,",
													"    })",
													"    pm.expect(cdo.tasks.form2Sent).to.deep.contain({",
													"        key: 'form2Sent',",
													"        available: true,",
													"        completed: true,",
													"        readonly: true,",
													"    })",
													"    pm.expect(cdo.tasks.verificationDateRecorded).to.deep.contain({",
													"        key: 'verificationDateRecorded',",
													"        available: true,",
													"        completed: true,",
													"        readonly: false,",
													"    })",
													"    pm.expect(cdo.tasks.certificateIssued).to.deep.contain({",
													"        key: 'certificateIssued',",
													"        available: true,",
													"        completed: false,",
													"        readonly: false,",
													"    })",
													"})",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/cdo/{{manageCdoPk}}/manage",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"cdo",
												"{{manageCdoPk}}",
												"manage"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 Issue Certificate",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('should return applicationFeePaid date', () => {",
													"  pm.response.to.have.status(201);",
													"  const payload = pm.response.json()",
													"  const thisYear = new Date()",
													"  pm.expect(payload.certificateIssued).to.contain(`${thisYear.getFullYear()}-`)",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user",
												"type": "text"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/cdo/{{manageCdoPk}}/manage:issueCertificate",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"cdo",
												"{{manageCdoPk}}",
												"manage:issueCertificate"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "System can import",
					"item": [
						{
							"name": "/dog imports a valid dog",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.have.body(\"ok\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "ddi-username",
										"value": "internal-user"
									},
									{
										"key": "ddi-displayname",
										"value": "User, Internal"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"dog\": {\n      \"dog_breed_id\":1,\n      \"dog_reference\": \"{{$guid}}\",\n      \"status_id\": 1,\n      \"name\": \"{{$randomFirstName}}\",\n      \"birth_date\": \"{{$isoTimestamp}}\",\n      \"death_date\": \"{{$isoTimestamp}}\",\n      \"tattoo\":\"tattoo\",\n      \"colour\": \"colour\",\n      \"sex\": \"Male\",\n      \"exported_date\": \"{{$isoTimestamp}}\",\n      \"stolen_date\": \"{{$isoTimestamp}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/dog",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"dog"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Activities",
					"item": [
						{
							"name": "/activities/sent/dog should return list of dog activities",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"response a list of dog activities\", function () {",
											"    const activities = pm.response.json().activities;",
											"    pm.expect(activities.length > 1).to.be.true;",
											"    pm.expect(activities[0].label).to.be.a('string')",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "ddi-username",
										"value": "internal-user"
									},
									{
										"key": "ddi-displayname",
										"value": "User, Internal"
									}
								],
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/activities/sent/dog",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"activities",
										"sent",
										"dog"
									]
								}
							},
							"response": []
						},
						{
							"name": "/activities/received/dog should return list of dog activities Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"response a list of dog activities\", function () {",
											"    const activities = pm.response.json().activities;",
											"    pm.expect(activities.length > 1).to.be.true;",
											"    pm.expect(activities[0].label).to.be.a('string')",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "ddi-username",
										"value": "internal-user"
									},
									{
										"key": "ddi-displayname",
										"value": "User, Internal"
									}
								],
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/activities/received/dog",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"activities",
										"received",
										"dog"
									]
								}
							},
							"response": []
						},
						{
							"name": "/activities/sent/owner should return list of owner activities",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"response a list of owner activities\", function () {",
											"    const activities = pm.response.json().activities;",
											"    pm.expect(activities.length > 0).to.be.true;",
											"    pm.expect(activities[0].label).to.be.a('string')",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "ddi-username",
										"value": "internal-user"
									},
									{
										"key": "ddi-displayname",
										"value": "User, Internal"
									}
								],
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/activities/sent/owner",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"activities",
										"sent",
										"owner"
									]
								}
							},
							"response": []
						},
						{
							"name": "/activities/received/owner should return an empty list of owner received activities",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"response a list of owner activities\", function () {",
											"    const activities = pm.response.json().activities;",
											"    pm.expect(activities).to.be.a('Array')",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "ddi-username",
										"value": "internal-user"
									},
									{
										"key": "ddi-displayname",
										"value": "User, Internal"
									}
								],
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/activities/received/owner",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"activities",
										"received",
										"owner"
									]
								}
							},
							"response": []
						},
						{
							"name": "/activity/:activity-id should return an activity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"response a list of dog activities\", function () {",
											"    const activity = pm.response.json().activity;",
											"    pm.expect(activity.label).to.be.a('string')",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "ddi-username",
										"value": "internal-user"
									},
									{
										"key": "ddi-displayname",
										"value": "User, Internal"
									}
								],
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/activity/1",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"activity",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "/activities should create activity dog sent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"response returns the created Activity\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.be.a('number')",
											"    pm.expect(jsonData.label).to.eq('Activity 1')",
											"    pm.collectionVariables.set('activityId', jsonData.id)",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "ddi-username",
										"value": "internal-user"
									},
									{
										"key": "ddi-displayname",
										"value": "User, Internal"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"label\": \"Activity 1\",\n    \"activitySource\": \"dog\",\n    \"activityType\": \"sent\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/activities",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"activities"
									]
								}
							},
							"response": []
						},
						{
							"name": "/activities should fail with duplicate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response should fail\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "ddi-username",
										"value": "internal-user"
									},
									{
										"key": "ddi-displayname",
										"value": "User, Internal"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"label\": \"Activity 1\",\n    \"activitySource\": \"dog\",\n    \"activityType\": \"sent\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/activities",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"activities"
									]
								}
							},
							"response": []
						},
						{
							"name": "/activities should delete activity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(204);",
											"    const body = pm.response.body",
											"    pm.expect(body).to.eq(undefined)",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "ddi-username",
										"value": "internal-user"
									},
									{
										"key": "ddi-displayname",
										"value": "User, Internal"
									}
								],
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/activities/{{activityId}}",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"activities",
										"{{activityId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/activities should create activity owner receive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"response returns the created Activity\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.be.a('number')",
											"    pm.expect(jsonData.label).to.eq('Activity 2')",
											"    pm.collectionVariables.set('activityId', jsonData.id)",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "ddi-username",
										"value": "internal-user"
									},
									{
										"key": "ddi-displayname",
										"value": "User, Internal"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"label\": \"Activity 2\",\n    \"activitySource\": \"owner\",\n    \"activityType\": \"received\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/activities",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"activities"
									]
								}
							},
							"response": []
						},
						{
							"name": "/activities should delete owner activity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(204);",
											"    const body = pm.response.body",
											"    pm.expect(body).to.eq(undefined)",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "ddi-username",
										"value": "internal-user"
									},
									{
										"key": "ddi-displayname",
										"value": "User, Internal"
									}
								],
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/activities/{{activityId}}",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"activities",
										"{{activityId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/activities should fail delete as not exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "ddi-username",
										"value": "internal-user"
									},
									{
										"key": "ddi-displayname",
										"value": "User, Internal"
									}
								],
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/activities/-1",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"activities",
										"-1"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Person",
					"item": [
						{
							"name": "persons DOB check includes empty fields",
							"item": [
								{
									"name": "Setup data for the DOB test - add person 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let cdoPostIndex = pm.environment.get(\"cdoPostIndex\");",
													"",
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"response returns an owner\", function () {",
													"    const owner = pm.response.json().owner;",
													"    pm.expect(owner.firstName).to.be.a('string')",
													"    pm.expect(owner.lastName).to.be.a('string')",
													"",
													"    pm.collectionVariables.set(\"duplicateFirstName\", owner.firstName);",
													"    pm.collectionVariables.set(\"duplicateLastName\", owner.lastName);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"owner\": {\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"dateOfBirth\": \"1990-01-01\",\n    \"address\": {\n      \"addressLine1\": \"{{$randomStreetAddress}}\",\n      \"addressLine2\": \"Anywhere Estate\",\n      \"town\": \"{{$randomCity}}\",\n      \"postcode\": \"S1 1AA\",\n      \"country\": \"Wales\"\n    }\n  },\n  \"enforcementDetails\": {\n    \"court\": \"1\",\n    \"policeForce\": \"1\",\n    \"legislationOfficer\": \"Sidney Lewis\"\n  },\n  \"dogs\": [\n    {\n      \"breed\": \"XL Bully\",\n      \"name\": \"{{$randomFirstName}}\",\n      \"applicationType\": \"cdo\",\n      \"cdoIssued\": \"2023-10-10\",\n      \"cdoExpiry\": \"2023-12-10\",\n      \"interimExemption\": \"2023-12-10\",\n      \"status\": \"Status 1\"\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/cdo",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"cdo"
											]
										}
									},
									"response": []
								},
								{
									"name": "Setup data for the DOB test - add person 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let cdoPostIndex = pm.environment.get(\"cdoPostIndex\");",
													"",
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"response returns an owner\", function () {",
													"    const owner = pm.response.json().owner;",
													"    pm.expect(owner.firstName).to.be.a('string')",
													"    pm.expect(owner.lastName).to.be.a('string')",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"owner\": {\n    \"firstName\": \"{{duplicateFirstName}}\",\n    \"lastName\": \"{{duplicateLastName}}\",\n    \"dateOfBirth\": \"2000-02-02\",\n    \"address\": {\n      \"addressLine1\": \"{{$randomStreetAddress}}\",\n      \"addressLine2\": \"Anywhere Estate\",\n      \"town\": \"{{$randomCity}}\",\n      \"postcode\": \"RG1 1AA\",\n      \"country\": \"England\"\n    }\n  },\n  \"enforcementDetails\": {\n    \"court\": \"1\",\n    \"policeForce\": \"1\",\n    \"legislationOfficer\": \"Sidney Lewis\"\n  },\n  \"dogs\": [\n    {\n      \"breed\": \"XL Bully\",\n      \"name\": \"{{$randomFirstName}}\",\n      \"applicationType\": \"cdo\",\n      \"cdoIssued\": \"2023-10-10\",\n      \"cdoExpiry\": \"2023-12-10\",\n      \"interimExemption\": \"2023-12-10\",\n      \"status\": \"Status 1\"\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/cdo",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"cdo"
											]
										}
									},
									"response": []
								},
								{
									"name": "Setup data for the DOB test - add person 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let cdoPostIndex = pm.environment.get(\"cdoPostIndex\");",
													"",
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"response returns an owner\", function () {",
													"    const owner = pm.response.json().owner;",
													"    pm.expect(owner.firstName).to.be.a('string')",
													"    pm.expect(owner.lastName).to.be.a('string')",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"owner\": {\n    \"firstName\": \"{{duplicateFirstName}}\",\n    \"lastName\": \"{{duplicateLastName}}\",\n    \"dateOfBirth\": null,\n    \"address\": {\n      \"addressLine1\": \"{{$randomStreetAddress}}\",\n      \"addressLine2\": \"Anywhere Estate\",\n      \"town\": \"{{$randomCity}}\",\n      \"postcode\": \"RG1 1AA\",\n      \"country\": \"England\"\n    }\n  },\n  \"enforcementDetails\": {\n    \"court\": \"1\",\n    \"policeForce\": \"1\",\n    \"legislationOfficer\": \"Sidney Lewis\"\n  },\n  \"dogs\": [\n    {\n      \"breed\": \"XL Bully\",\n      \"name\": \"{{$randomFirstName}}\",\n      \"applicationType\": \"cdo\",\n      \"cdoIssued\": \"2023-10-10\",\n      \"cdoExpiry\": \"2023-12-10\",\n      \"interimExemption\": \"2023-12-10\",\n      \"status\": \"Status 1\"\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/cdo",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"cdo"
											]
										}
									},
									"response": []
								},
								{
									"name": "/persons returns results with empty DOB",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test('GET /persons search on DOB should return results with empty DOB', () => {",
													"    const response = pm.response.json()",
													"    pm.expect(response.persons).to.be.a('array')",
													"    pm.expect(response.persons).to.have.length(2)",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/persons?firstName={{duplicateFirstName}}&lastName={{duplicateLastName}}&dateOfBirth=1990-01-01",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"persons"
											],
											"query": [
												{
													"key": "firstName",
													"value": "{{duplicateFirstName}}"
												},
												{
													"key": "lastName",
													"value": "{{duplicateLastName}}"
												},
												{
													"key": "dateOfBirth",
													"value": "1990-01-01"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Update Birth Date on empty Birth Date applies change",
							"item": [
								{
									"name": "Setup data for DOB update test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"response has no DOB\", function () {",
													"    const owner = pm.response.json().owner;",
													"    pm.expect(owner.birthDate).to.be.null;",
													"});",
													"",
													"pm.test(\"response has personReference\", function () {",
													"     pm.expect(pm.response.json()).to.be.an('object');",
													"     pm.expect(pm.response.json()).to.have.property('owner');",
													"     pm.expect(pm.response.json().owner).to.have.property('personReference');",
													"     pm.collectionVariables.set(\"ownerWithoutBirthDateRef\", pm.response.json().owner.personReference);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"owner\": {\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"address\": {\n      \"addressLine1\": \"{{$randomStreetAddress}}\",\n      \"addressLine2\": \"Anywhere Estate\",\n      \"town\": \"City of London\",\n      \"postcode\": \"S1 1AA\",\n      \"country\": \"Wales\"\n    }\n  },\n  \"enforcementDetails\": {\n    \"court\": \"1\",\n    \"policeForce\": \"1\",\n    \"legislationOfficer\": \"Sidney Lewis\"\n  },\n  \"dogs\": [\n    {\n      \"breed\": \"XL Bully\",\n      \"name\": \"Rex{{cdoPostIndex}}\",\n      \"applicationType\": \"cdo\",\n      \"cdoIssued\": \"2023-10-10\",\n      \"cdoExpiry\": \"2023-12-10\",\n      \"interimExemption\": \"2023-12-10\",\n      \"status\": \"Status 1\"\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/cdo",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"cdo"
											]
										}
									},
									"response": []
								},
								{
									"name": "Should update birth date if it is null",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"response has a DOB\", function () {",
													"    const owner = pm.response.json().owner;",
													"    pm.expect(owner.birthDate).to.eq(\"1998-10-20\");",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"owner\": {\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"dateOfBirth\": \"1998-10-20\",\n    \"personReference\": \"{{ownerWithoutBirthDateRef}}\",\n    \"address\": {\n      \"addressLine1\": \"{{$randomStreetAddress}}\",\n      \"addressLine2\": \"Anywhere Estate\",\n      \"town\": \"City of London\",\n      \"postcode\": \"S1 1AA\",\n      \"country\": \"Wales\"\n    }\n  },\n  \"enforcementDetails\": {\n    \"court\": \"1\",\n    \"policeForce\": \"1\",\n    \"legislationOfficer\": \"Sidney Lewis\"\n  },\n  \"dogs\": [\n    {\n      \"breed\": \"XL Bully\",\n      \"name\": \"Rex{{cdoPostIndex}}\",\n      \"applicationType\": \"cdo\",\n      \"cdoIssued\": \"2023-10-10\",\n      \"cdoExpiry\": \"2023-12-10\",\n      \"interimExemption\": \"2023-12-10\",\n      \"status\": \"Status 1\"\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/cdo",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"cdo"
											]
										}
									},
									"response": []
								},
								{
									"name": "/persons returns an array of persons",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"returns a person with DOB fixed\", function () {",
													"    const response = pm.response.json()",
													"    pm.expect(response.birthDate).to.equal(\"1998-10-20\")",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/person/{{ownerWithoutBirthDateRef}}",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"person",
												"{{ownerWithoutBirthDateRef}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "get and delete orphaned owners",
							"item": [
								{
									"name": "Setup",
									"item": [
										{
											"name": "Create orphaned owner 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const orphanedOwners = JSON.parse(pm.collectionVariables.get('orphanedOwners'))",
															"",
															"pm.test(\"response is ok\", function () {",
															"    pm.response.to.have.status(200);",
															"    const cdo = pm.response.json();",
															"",
															"    orphanedOwners.push({",
															"        ownerPk: cdo.owner.personReference,",
															"        dogPk: cdo.dogs[0].indexNumber",
															"    })",
															"    pm.collectionVariables.set('orphanedOwners', JSON.stringify(orphanedOwners))",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.collectionVariables.set('orphanedOwners', '[]')"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "ddi-username",
														"value": "internal-user"
													},
													{
														"key": "ddi-displayname",
														"value": "User, Internal"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"owner\": {\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"dateOfBirth\": \"1998-05-10\",\n    \"address\": {\n      \"addressLine1\": \"{{$randomStreetAddress}}\",\n      \"addressLine2\": null,\n      \"town\": \"{{$randomCity}}\",\n      \"postcode\": \"S1 1AA\"\n    }\n  },\n  \"enforcementDetails\": {\n    \"court\": \"1\",\n    \"policeForce\": \"1\",\n    \"legislationOfficer\": \"Sidney Lewis\"\n  },\n  \"dogs\": [\n    {\n      \"breed\": \"XL Bully\",\n      \"name\": \"{{$randomFirstName}}\",\n      \"applicationType\": \"cdo\",\n      \"cdoIssued\": \"2023-10-10\",\n      \"cdoExpiry\": \"2023-12-10\",\n      \"interimExemption\": \"2023-12-10\",\n      \"status\": \"Status 1\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{DDI_API_BASE_URL}}/cdo",
													"host": [
														"{{DDI_API_BASE_URL}}"
													],
													"path": [
														"cdo"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create orphaned owner 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const orphanedOwners = JSON.parse(pm.collectionVariables.get('orphanedOwners'));",
															"",
															"pm.test(\"response is ok\", function () {",
															"    pm.response.to.have.status(200);",
															"    const cdo = pm.response.json();",
															"",
															"    orphanedOwners.push({",
															"        ownerPk: cdo.owner.personReference,",
															"        dogPk: cdo.dogs[0].indexNumber",
															"    });",
															"    pm.collectionVariables.set('orphanedOwners', JSON.stringify(orphanedOwners));",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "ddi-username",
														"value": "internal-user"
													},
													{
														"key": "ddi-displayname",
														"value": "User, Internal"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"owner\": {\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"dateOfBirth\": \"1998-05-10\",\n    \"address\": {\n      \"addressLine1\": \"{{$randomStreetAddress}}\",\n      \"addressLine2\": null,\n      \"town\": \"{{$randomCity}}\",\n      \"postcode\": \"S1 1AA\"\n    }\n  },\n  \"enforcementDetails\": {\n    \"court\": \"1\",\n    \"policeForce\": \"1\",\n    \"legislationOfficer\": \"Sidney Lewis\"\n  },\n  \"dogs\": [\n    {\n      \"breed\": \"XL Bully\",\n      \"name\": \"{{$randomFirstName}}\",\n      \"applicationType\": \"cdo\",\n      \"cdoIssued\": \"2023-10-10\",\n      \"cdoExpiry\": \"2023-12-10\",\n      \"interimExemption\": \"2023-12-10\",\n      \"status\": \"Status 1\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{DDI_API_BASE_URL}}/cdo",
													"host": [
														"{{DDI_API_BASE_URL}}"
													],
													"path": [
														"cdo"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create owner 3",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const orphanedOwners = JSON.parse(pm.collectionVariables.get('orphanedOwners'))",
															"",
															"pm.test(\"response is ok\", function () {",
															"    pm.response.to.have.status(200);",
															"    const cdo = pm.response.json();",
															"",
															"    orphanedOwners.push({",
															"        ownerPk: cdo.owner.personReference,",
															"        dogPk: cdo.dogs[0].indexNumber",
															"    })",
															"    pm.collectionVariables.set('orphanedOwners', JSON.stringify(orphanedOwners))",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "ddi-username",
														"value": "internal-user"
													},
													{
														"key": "ddi-displayname",
														"value": "User, Internal"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"owner\": {\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"dateOfBirth\": \"1998-05-10\",\n    \"address\": {\n      \"addressLine1\": \"{{$randomStreetAddress}}\",\n      \"addressLine2\": null,\n      \"town\": \"{{$randomCity}}\",\n      \"postcode\": \"S1 1AA\"\n    }\n  },\n  \"enforcementDetails\": {\n    \"court\": \"1\",\n    \"policeForce\": \"1\",\n    \"legislationOfficer\": \"Sidney Lewis\"\n  },\n  \"dogs\": [\n    {\n      \"breed\": \"XL Bully\",\n      \"name\": \"{{$randomFirstName}}\",\n      \"applicationType\": \"cdo\",\n      \"cdoIssued\": \"2023-10-10\",\n      \"cdoExpiry\": \"2023-12-10\",\n      \"interimExemption\": \"2023-12-10\",\n      \"status\": \"Status 1\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{DDI_API_BASE_URL}}/cdo",
													"host": [
														"{{DDI_API_BASE_URL}}"
													],
													"path": [
														"cdo"
													]
												}
											},
											"response": []
										},
										{
											"name": "delete dog",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"response returns a 204 and empty body given\", function () {",
															"    pm.response.to.have.status(204);",
															"    const body = pm.response.body",
															"    pm.expect(body).to.eq(undefined)",
															"    const orphanedOwners = JSON.parse(pm.collectionVariables.get('orphanedOwners'))",
															"    orphanedOwners[0].orphaned = true",
															"    pm.collectionVariables.set('orphanedOwners', JSON.stringify(orphanedOwners))",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const orphanedOwners = JSON.parse(pm.collectionVariables.get('orphanedOwners'))",
															"pm.variables.set('dogIndexToDelete', orphanedOwners[0].dogPk)"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "ddi-username",
														"value": "internal-user"
													},
													{
														"key": "ddi-displayname",
														"value": "User, Internal"
													}
												],
												"url": {
													"raw": "{{DDI_API_BASE_URL}}/dog/{{dogIndexToDelete}}",
													"host": [
														"{{DDI_API_BASE_URL}}"
													],
													"path": [
														"dog",
														"{{dogIndexToDelete}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "delete dog 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"response returns a 204 and empty body given\", function () {",
															"    pm.response.to.have.status(204);",
															"    const body = pm.response.body",
															"    pm.expect(body).to.eq(undefined)",
															"    const orphanedOwners = JSON.parse(pm.collectionVariables.get('orphanedOwners'))",
															"    orphanedOwners[1].orphaned = true",
															"    pm.collectionVariables.set('orphanedOwners', JSON.stringify(orphanedOwners))",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const orphanedOwners = JSON.parse(pm.collectionVariables.get('orphanedOwners'))",
															"pm.variables.set('dogIndexToDelete', orphanedOwners[1].dogPk)"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "ddi-username",
														"value": "internal-user"
													},
													{
														"key": "ddi-displayname",
														"value": "User, Internal"
													}
												],
												"url": {
													"raw": "{{DDI_API_BASE_URL}}/dog/{{dogIndexToDelete}}",
													"host": [
														"{{DDI_API_BASE_URL}}"
													],
													"path": [
														"dog",
														"{{dogIndexToDelete}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"packages": {},
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"packages": {},
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "/persons?orphaned=true",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const isInAscendingOrder = () => { ",
													"    const currentOwner = { value: '' }",
													"",
													"    return (person) => {",
													"        const owner = person.lastName + ' ' + person.firstName",
													"        const isInOrder = owner.localeCompare(currentOwner.value) >= 0",
													"        if (!isInOrder) {",
													"            console.error(currentOwner.value)",
													"            console.error(owner, currentOwner.value)",
													"        }",
													"        currentOwner.value = owner",
													"        return isInOrder",
													"    }",
													"}",
													"",
													"pm.test(\"response returns a 200 and orphaned owners should be returned\", function () {",
													"    pm.response.to.have.status(200);",
													"    const response = pm.response.json()",
													"    pm.expect(response.persons.length >= 2).to.be.true",
													"    const orphanedOwners = JSON.parse(pm.collectionVariables.get('orphanedOwners'))",
													"    const orphanedOwnerPks = orphanedOwners.filter(owner => owner.orphaned === true).map(owner => owner.ownerPk)",
													"    const nonOrphanedOwnerPks = orphanedOwners.filter(owner => owner.orphaned !== true).map(owner => owner.ownerPk)",
													"    const resultPks = response.persons.map(person => person.personReference)",
													"    pm.expect(orphanedOwnerPks.every(ownerPk => resultPks.includes(ownerPk))).to.be.true",
													"    pm.expect(nonOrphanedOwnerPks.every(ownerPk => !resultPks.includes(ownerPk))).to.be.true",
													"    pm.expect(response.persons.every(isInAscendingOrder())).to.be.true",
													"    pm.collectionVariables.set('orphanedOwnersToDelete', JSON.stringify(orphanedOwnerPks))",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/persons?orphaned=true&limit=-1&sortKey=owner&sortOrder=ASC",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"persons"
											],
											"query": [
												{
													"key": "orphaned",
													"value": "true"
												},
												{
													"key": "limit",
													"value": "-1"
												},
												{
													"key": "sortKey",
													"value": "owner"
												},
												{
													"key": "sortOrder",
													"value": "ASC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/persons:batch-delete success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response returns a 200 and orphaned owners should be returned\", function () {",
													"    pm.response.to.have.status(200);",
													"    const response = pm.response.json()",
													"    const expectedDeletedOwners = JSON.parse(pm.collectionVariables.get('orphanedOwnersToDelete'))",
													"    pm.expect(response.count.failed).to.eq(0)",
													"    pm.expect(response.count.success).to.eq(expectedDeletedOwners.length)",
													"    pm.expect(response.deleted.failed).to.deep.eq([])",
													"    pm.expect(response.deleted.success).to.deep.eq(expectedDeletedOwners)",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"personReferences\": {{orphanedOwnersToDelete}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/persons:batch-delete",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"persons:batch-delete"
											]
										}
									},
									"response": []
								},
								{
									"name": "/persons:batch-delete failure",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response returns a 200 and orphaned owners should be returned\", function () {",
													"    pm.response.to.have.status(200);",
													"    const response = pm.response.json()",
													"    const expectedDeletedOwners = JSON.parse(pm.collectionVariables.get('orphanedOwnersToDelete'))",
													"    pm.expect(response.count.failed).to.eq(expectedDeletedOwners.length)",
													"    pm.expect(response.count.success).to.eq(0)",
													"    pm.expect(response.deleted.failed).to.deep.eq(expectedDeletedOwners)",
													"    pm.expect(response.deleted.success).to.deep.eq([])",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"personReferences\": {{orphanedOwnersToDelete}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/persons:batch-delete",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"persons:batch-delete"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Latest Address shown",
							"item": [
								{
									"name": "Create owner",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(200);",
													"    const cdo = pm.response.json();",
													"    pm.collectionVariables.set('latestAddressTestPerson1', cdo.owner.personReference)",
													"    pm.collectionVariables.set('latestAddressTestAddress1', cdo.owner.address.addressLine1)",
													"    pm.collectionVariables.set('latestAddressTestFirstName1', cdo.owner.firstName)",
													"    pm.collectionVariables.set('latestAddressTestLastName1', cdo.owner.lastName)",
													"    pm.collectionVariables.set('latestAddressTestDOB', cdo.owner.birthDate)",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set('orphanedOwners', '[]')"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"owner\": {\n    \"firstName\": \"{{$randomFirstName}} Test\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"dateOfBirth\": \"1995-04-11\",\n    \"address\": {\n      \"addressLine1\": \"{{$randomStreetAddress}}\",\n      \"addressLine2\": null,\n      \"town\": \"Sheffield\",\n      \"postcode\": \"S1 1AA\"\n    }\n  },\n  \"enforcementDetails\": {\n    \"court\": \"1\",\n    \"policeForce\": \"1\",\n    \"legislationOfficer\": \"Sidney Lewis\"\n  },\n  \"dogs\": [\n    {\n      \"breed\": \"XL Bully\",\n      \"name\": \"{{$randomFirstName}}\",\n      \"applicationType\": \"cdo\",\n      \"cdoIssued\": \"2023-10-10\",\n      \"cdoExpiry\": \"2023-12-10\",\n      \"interimExemption\": \"2023-12-10\",\n      \"status\": \"Status 1\"\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/cdo",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"cdo"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create owner 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(200);",
													"    const cdo = pm.response.json();",
													"    pm.collectionVariables.set('latestAddressTestPerson2', cdo.owner.personReference)",
													"    pm.collectionVariables.set('latestAddressTestAddress2', cdo.owner.address.addressLine1)",
													"    pm.collectionVariables.set('latestAddressTestLastName2', cdo.owner.lastName)",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set('orphanedOwners', '[]')"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"owner\": {\n    \"firstName\": \"{{latestAddressTestFirstName1}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"dateOfBirth\": \"1995-04-11\",\n    \"address\": {\n      \"addressLine1\": \"{{$randomStreetAddress}}\",\n      \"addressLine2\": null,\n      \"town\": \"Sheffield\",\n      \"postcode\": \"S1 1AA\"\n    }\n  },\n  \"enforcementDetails\": {\n    \"court\": \"1\",\n    \"policeForce\": \"1\",\n    \"legislationOfficer\": \"Sidney Lewis\"\n  },\n  \"dogs\": [\n    {\n      \"breed\": \"XL Bully\",\n      \"name\": \"{{$randomFirstName}}\",\n      \"applicationType\": \"cdo\",\n      \"cdoIssued\": \"2023-10-10\",\n      \"cdoExpiry\": \"2023-12-10\",\n      \"interimExemption\": \"2023-12-10\",\n      \"status\": \"Status 1\"\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/cdo",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"cdo"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create owner 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(200);",
													"    const cdo = pm.response.json();",
													"    pm.collectionVariables.set('latestAddressTestPerson3', cdo.owner.personReference)",
													"    pm.collectionVariables.set('latestAddressTestAddress3', cdo.owner.address.addressLine1)",
													"    pm.collectionVariables.set('latestAddressTestLastName3', cdo.owner.lastName)",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set('orphanedOwners', '[]')"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"owner\": {\n    \"firstName\": \"{{latestAddressTestFirstName1}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"dateOfBirth\": \"1995-04-11\",\n    \"address\": {\n      \"addressLine1\": \"{{$randomStreetAddress}}\",\n      \"addressLine2\": null,\n      \"town\": \"Sheffield\",\n      \"postcode\": \"S1 1AA\"\n    }\n  },\n  \"enforcementDetails\": {\n    \"court\": \"1\",\n    \"policeForce\": \"1\",\n    \"legislationOfficer\": \"Sidney Lewis\"\n  },\n  \"dogs\": [\n    {\n      \"breed\": \"XL Bully\",\n      \"name\": \"{{$randomFirstName}}\",\n      \"applicationType\": \"cdo\",\n      \"cdoIssued\": \"2023-10-10\",\n      \"cdoExpiry\": \"2023-12-10\",\n      \"interimExemption\": \"2023-12-10\",\n      \"status\": \"Status 1\"\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/cdo",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"cdo"
											]
										}
									},
									"response": []
								},
								{
									"name": "/persons returns created address",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"returns a persons array\", function () {",
													"    const { persons } = pm.response.json()",
													"    for (let i = 1; i < 4; i++) {",
													"        const owner = persons.find(person => person.personReference === pm.collectionVariables.get(`latestAddressTestPerson${i}`))",
													"        pm.expect(owner.address.addressLine1).to.eq(pm.collectionVariables.get(`latestAddressTestAddress${i}`))",
													"    }",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/persons?firstName={{latestAddressTestFirstName1}}",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"persons"
											],
											"query": [
												{
													"key": "",
													"value": null,
													"disabled": true
												},
												{
													"key": "firstName",
													"value": "{{latestAddressTestFirstName1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update person 1 address",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(200);",
													"    const owner = pm.response.json();",
													"",
													"    pm.collectionVariables.set('latestAddressTestAddressV21', owner.address.addressLine1)",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"personReference\": \"{{latestAddressTestPerson1}}\",\n  \"firstName\": \"{{latestAddressTestFirstName1}}\",\n  \"lastName\": \"{{latestAddressTestLastName1}}\",\n  \"dateOfBirth\": \"{{latestAddressTestDOB}}\",\n  \"address\": {\n    \"addressLine1\": \"{{$randomStreetAddress}}\",\n    \"town\": \"Sheffield\",\n    \"postcode\": \"S1 1AA\",\n    \"country\": \"England\"\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/person",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"person"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update person 2 address",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(200);",
													"    const owner = pm.response.json();",
													"",
													"    pm.collectionVariables.set('latestAddressTestAddressV22', owner.address.addressLine1)",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"personReference\": \"{{latestAddressTestPerson2}}\",\n  \"firstName\": \"{{latestAddressTestFirstName1}}\",\n  \"lastName\": \"{{latestAddressTestLastName2}}\",\n  \"dateOfBirth\": \"{{latestAddressTestDOB}}\",\n  \"address\": {\n    \"addressLine1\": \"{{$randomStreetAddress}}\",\n    \"town\": \"Sheffield\",\n    \"postcode\": \"S1 1AA\",\n    \"country\": \"England\"\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/person",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"person"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update person 3 address",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(200);",
													"    const owner = pm.response.json();",
													"",
													"    pm.collectionVariables.set('latestAddressTestAddressV23', owner.address.addressLine1)",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"personReference\": \"{{latestAddressTestPerson3}}\",\n  \"firstName\": \"{{latestAddressTestFirstName1}}\",\n  \"lastName\": \"{{latestAddressTestLastName3}}\",\n  \"dateOfBirth\": \"{{latestAddressTestDOB}}\",\n  \"address\": {\n    \"addressLine1\": \"{{$randomStreetAddress}}\",\n    \"town\": \"Sheffield\",\n    \"postcode\": \"S1 1AA\",\n    \"country\": \"England\"\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/person",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"person"
											]
										}
									},
									"response": []
								},
								{
									"name": "/persons returns update address",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"returns a persons array\", function () {",
													"    const { persons } = pm.response.json()",
													"    for (let i = 1; i < 4; i++) {",
													"        const owner = persons.find(person => person.personReference === pm.collectionVariables.get(`latestAddressTestPerson${i}`))",
													"        pm.expect(owner.address.addressLine1).to.eq(pm.collectionVariables.get(`latestAddressTestAddressV2${i}`))",
													"    }",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/persons?firstName={{latestAddressTestFirstName1}}",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"persons"
											],
											"query": [
												{
													"key": "",
													"value": null,
													"disabled": true
												},
												{
													"key": "firstName",
													"value": "{{latestAddressTestFirstName1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update person 1 address Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(200);",
													"    const owner = pm.response.json();",
													"",
													"    pm.collectionVariables.set('latestAddressTestAddressV31', owner.address.addressLine1)",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"personReference\": \"{{latestAddressTestPerson1}}\",\n  \"firstName\": \"{{latestAddressTestFirstName1}}\",\n  \"lastName\": \"{{latestAddressTestLastName1}}\",\n  \"dateOfBirth\": \"{{latestAddressTestDOB}}\",\n  \"address\": {\n    \"addressLine1\": \"{{$randomStreetAddress}}\",\n    \"town\": \"Sheffield\",\n    \"postcode\": \"S1 1AA\",\n    \"country\": \"England\"\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/person",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"person"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update person 2 address Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(200);",
													"    const owner = pm.response.json();",
													"",
													"    pm.collectionVariables.set('latestAddressTestAddressV32', owner.address.addressLine1)",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"personReference\": \"{{latestAddressTestPerson2}}\",\n  \"firstName\": \"{{latestAddressTestFirstName1}}\",\n  \"lastName\": \"{{latestAddressTestLastName2}}\",\n  \"dateOfBirth\": \"{{latestAddressTestDOB}}\",\n  \"address\": {\n    \"addressLine1\": \"{{$randomStreetAddress}}\",\n    \"town\": \"Sheffield\",\n    \"postcode\": \"S1 1AA\",\n    \"country\": \"England\"\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/person",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"person"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update person 3 address Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(200);",
													"    const owner = pm.response.json();",
													"",
													"    pm.collectionVariables.set('latestAddressTestAddressV33', owner.address.addressLine1)",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"personReference\": \"{{latestAddressTestPerson3}}\",\n  \"firstName\": \"{{latestAddressTestFirstName1}}\",\n  \"lastName\": \"{{latestAddressTestLastName3}}\",\n  \"dateOfBirth\": \"{{latestAddressTestDOB}}\",\n  \"address\": {\n    \"addressLine1\": \"{{$randomStreetAddress}}\",\n    \"town\": \"Sheffield\",\n    \"postcode\": \"S1 1AA\",\n    \"country\": \"England\"\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/person",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"person"
											]
										}
									},
									"response": []
								},
								{
									"name": "/persons returns update address 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"returns a persons array\", function () {",
													"    const { persons } = pm.response.json()",
													"    for (let i = 1; i < 4; i++) {",
													"        const owner = persons.find(person => person.personReference === pm.collectionVariables.get(`latestAddressTestPerson${i}`))",
													"        pm.expect(owner.address.addressLine1).to.eq(pm.collectionVariables.get(`latestAddressTestAddressV3${i}`))",
													"    }",
													"    pm.collectionVariables.unset('latestAddressTestPerson1')",
													"    pm.collectionVariables.unset('latestAddressTestAddress1')",
													"    pm.collectionVariables.unset('latestAddressTestFirstName1')",
													"    pm.collectionVariables.unset('latestAddressTestLastName1')",
													"    pm.collectionVariables.unset('latestAddressTestDOB')",
													"    pm.collectionVariables.unset('latestAddressTestPerson2')",
													"    pm.collectionVariables.unset('latestAddressTestAddress2')",
													"    pm.collectionVariables.unset('latestAddressTestFirstName2')",
													"    pm.collectionVariables.unset('latestAddressTestLastName2')",
													"    pm.collectionVariables.unset('latestAddressTestDOB2')",
													"    pm.collectionVariables.unset('latestAddressTestPerson3')",
													"    pm.collectionVariables.unset('latestAddressTestAddress3')",
													"    pm.collectionVariables.unset('latestAddressTestFirstName3')",
													"    pm.collectionVariables.unset('latestAddressTestLastName3')",
													"    pm.collectionVariables.unset('latestAddressTestDOB3')",
													"    pm.collectionVariables.unset('latestAddressTestAddressV21')",
													"    pm.collectionVariables.unset('latestAddressTestAddressV22')",
													"    pm.collectionVariables.unset('latestAddressTestAddressV23')",
													"    pm.collectionVariables.unset('latestAddressTestAddressV31')",
													"    pm.collectionVariables.unset('latestAddressTestAddressV32')",
													"    pm.collectionVariables.unset('latestAddressTestAddressV33')",
													"",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/persons?firstName={{latestAddressTestFirstName1}}",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"persons"
											],
											"query": [
												{
													"key": "",
													"value": null,
													"disabled": true
												},
												{
													"key": "firstName",
													"value": "{{latestAddressTestFirstName1}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "/persons returns an array of persons Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"returns a persons array\", function () {",
											"    const response = pm.response.json()",
											"    pm.expect(response.persons).to.be.a('array')",
											"    pm.expect(response.persons.length < 100).to.be.true",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/persons?firstName=Dan&lastName=Jones&dateOfBirth=2000-01-01",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"persons"
									],
									"query": [
										{
											"key": "firstName",
											"value": "Dan"
										},
										{
											"key": "lastName",
											"value": "Jones"
										},
										{
											"key": "dateOfBirth",
											"value": "2000-01-01"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/persons returns an array of persons given firstName only",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"returns a persons array\", function () {",
											"    const response = pm.response.json()",
											"    pm.expect(response.persons).to.be.a('array')",
											"    pm.expect(response.persons.length < 100).to.be.true",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/persons?firstName=dan",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"persons"
									],
									"query": [
										{
											"key": "firstName",
											"value": "dan"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/persons returns an array of persons given firstName and lastName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"returns a persons array\", function () {",
											"    const response = pm.response.json()",
											"    pm.expect(response.persons).to.be.a('array')",
											"    pm.expect(response.persons.length < 100).to.be.true",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/persons?firstName=dan&lastName=Jones",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"persons"
									],
									"query": [
										{
											"key": "firstName",
											"value": "dan"
										},
										{
											"key": "lastName",
											"value": "Jones"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/persons returns an array of persons given lowercase search",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"returns a persons array\", function () {",
											"    const response = pm.response.json()",
											"    pm.expect(response.persons).to.be.a('array')",
											"    pm.expect(response.persons.length < 100).to.be.true",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/persons?firstName=dan&lastName=jones&dateOfBirth=2000-01-01",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"persons"
									],
									"query": [
										{
											"key": "firstName",
											"value": "dan"
										},
										{
											"key": "lastName",
											"value": "jones"
										},
										{
											"key": "dateOfBirth",
											"value": "2000-01-01"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Dog",
					"item": [
						{
							"name": "Delete",
							"item": [
								{
									"name": "Setup",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"dog details\", function () {",
													"    const dogs = pm.response.json().dogs;",
													"    const dog = dogs[0]",
													"    pm.collectionVariables.set(\"dogDeleteIndexToDelete\",  dog.indexNumber);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"owner\": {\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"dateOfBirth\": \"{{$isoTimestamp}}\",\n    \"address\": {\n      \"addressLine1\": \"{{$randomStreetAddress}}\",\n      \"addressLine2\": \"Anywhere Estate\",\n      \"town\": \"City of London\",\n      \"postcode\": \"S1 1AA\",\n      \"country\": \"Wales\"\n    }\n  },\n  \"enforcementDetails\": {\n    \"court\": \"1\",\n    \"policeForce\": \"1\",\n    \"legislationOfficer\": \"Sidney Lewis\"\n  },\n  \"dogs\": [\n    {\n      \"breed\": \"XL Bully\",\n      \"name\": \"{{$randomFirstName}}\",\n      \"applicationType\": \"cdo\",\n      \"cdoIssued\": \"2023-10-10\",\n      \"cdoExpiry\": \"2023-12-10\",\n      \"interimExemption\": \"2023-12-10\",\n      \"status\": \"Status 1\"\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/cdo",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"cdo"
											]
										}
									},
									"response": []
								},
								{
									"name": "/dog",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response returns a 204 and empty body given\", function () {",
													"    pm.response.to.have.status(204);",
													"    const body = pm.response.body",
													"    pm.expect(body).to.eq(undefined)",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/dog/{{dogDeleteIndexToDelete}}",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"dog",
												"{{dogDeleteIndexToDelete}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/dog invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response returns 404 given invalid dog index number requested\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/dog/ED9999999999",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"dog",
												"ED9999999999"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Duplicate Microchip",
							"item": [
								{
									"name": "Setup",
									"item": [
										{
											"name": "Create Dog 1 with microchip",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const min = 100000000000000",
															"const max = 999999999999999",
															"const multiplier = max - min + 1",
															"",
															"const generateRandomNumberBetween = (min, max) => {",
															"    const random = Math.random()",
															"    const calc = Math.floor(random * multiplier)",
															"",
															"    return calc + min",
															"}",
															"",
															"const generateMicrochipNumber = () => generateRandomNumberBetween(min, max)",
															"",
															"pm.collectionVariables.set('duplicateMicrochip', JSON.stringify({",
															"    microchipNumber1: generateMicrochipNumber().toString(),",
															"    microchipNumber2: generateMicrochipNumber().toString(),",
															"    dogs: []",
															"}))",
															"",
															"const microchips = JSON.parse(pm.collectionVariables.get('duplicateMicrochip'))",
															"pm.variables.set('microchipNumber1', microchips.microchipNumber1)",
															"pm.variables.set('microchipNumber2', microchips.microchipNumber2)"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const duplicateMicrochip = JSON.parse(pm.collectionVariables.get('duplicateMicrochip'))",
															"",
															"pm.test(\"response is ok\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"",
															"pm.test(\"dog details\", function () {",
															"    const [dog] = pm.response.json().dogs;",
															"    duplicateMicrochip.dogs.push(dog)",
															"});",
															"",
															"pm.collectionVariables.set('duplicateMicrochip', JSON.stringify(duplicateMicrochip))",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "ddi-username",
														"value": "internal-user"
													},
													{
														"key": "ddi-displayname",
														"value": "User, Internal"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"owner\": {\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"dateOfBirth\": \"1998-05-10\",\n    \"address\": {\n      \"addressLine1\": \"{{$randomStreetAddress}}\",\n      \"addressLine2\": \"Anywhere Estate\",\n      \"town\": \"{{$randomCity}}\",\n      \"postcode\": \"S1 1AA\"\n    }\n  },\n  \"enforcementDetails\": {\n    \"court\": \"1\",\n    \"policeForce\": \"1\",\n    \"legislationOfficer\": \"Sidney Lewis\"\n  },\n  \"dogs\": [\n    {\n      \"breed\": \"XL Bully\",\n      \"name\": \"{{$randomFirstName}}\",\n      \"applicationType\": \"cdo\",\n      \"cdoIssued\": \"2023-10-10\",\n      \"cdoExpiry\": \"2023-12-10\",\n      \"interimExemption\": \"2023-12-10\",\n      \"status\": \"Status 1\",\n      \"microchipNumber\": \"{{microchipNumber1}}\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{DDI_API_BASE_URL}}/cdo",
													"host": [
														"{{DDI_API_BASE_URL}}"
													],
													"path": [
														"cdo"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Dog 2 with no microchip",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const duplicateMicrochip = JSON.parse(pm.collectionVariables.get('duplicateMicrochip'))",
															"",
															"pm.test(\"response is ok\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"",
															"pm.test(\"dog details\", function () {",
															"    const [dog] = pm.response.json().dogs;",
															"    duplicateMicrochip.dogs.push(dog)",
															"});",
															"",
															"pm.collectionVariables.set('duplicateMicrochip', JSON.stringify(duplicateMicrochip))",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "ddi-username",
														"value": "internal-user"
													},
													{
														"key": "ddi-displayname",
														"value": "User, Internal"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"owner\": {\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"dateOfBirth\": \"1998-05-10\",\n    \"address\": {\n      \"addressLine1\": \"{{$randomStreetAddress}}\",\n      \"addressLine2\": \"Anywhere Estate\",\n      \"town\": \"{{$randomCity}}\",\n      \"postcode\": \"S1 1AA\"\n    }\n  },\n  \"enforcementDetails\": {\n    \"court\": \"1\",\n    \"policeForce\": \"1\",\n    \"legislationOfficer\": \"Sidney Lewis\"\n  },\n  \"dogs\": [\n    {\n      \"breed\": \"XL Bully\",\n      \"name\": \"{{$randomFirstName}}\",\n      \"applicationType\": \"cdo\",\n      \"cdoIssued\": \"2023-10-10\",\n      \"cdoExpiry\": \"2023-12-10\",\n      \"interimExemption\": \"2023-12-10\",\n      \"status\": \"Status 1\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{DDI_API_BASE_URL}}/cdo",
													"host": [
														"{{DDI_API_BASE_URL}}"
													],
													"path": [
														"cdo"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"packages": {},
												"exec": [
													"const min = 100000000000000",
													"const max = 999999999999999",
													"const multiplier = max - min + 1",
													"",
													"const generateRandomNumberBetween = (min, max) => {",
													"    const random = Math.random()",
													"    const calc = Math.floor(random * multiplier)",
													"",
													"    return calc + min",
													"}",
													"",
													"const generateMicrochipNumber = () => generateRandomNumberBetween(min, max)",
													"",
													"if (!pm.collectionVariables.has('duplicateMicrochip')){",
													"    pm.collectionVariables.set('duplicateMicrochip', JSON.stringify({",
													"        microchipNumber1: generateMicrochipNumber().toString(),",
													"        microchipNumber2: generateMicrochipNumber().toString(),",
													"        dogs: []",
													"    }))",
													"}"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"packages": {},
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Test",
									"item": [
										{
											"name": "/dog with new microchip",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"response is ok\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const duplicateMicrochip = JSON.parse(pm.collectionVariables.get('duplicateMicrochip'))",
															"pm.variables.set('microchipNumber2', duplicateMicrochip.microchipNumber2)",
															"pm.variables.set('dogUpdateIndexNumber', duplicateMicrochip.dogs[1].indexNumber)",
															"pm.variables.set('dogId', duplicateMicrochip.dogs[1].indexNumber.replace('ED',''))"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "ddi-username",
														"value": "internal-user"
													},
													{
														"key": "ddi-displayname",
														"value": "User, Internal"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"dogId\": \"{{dogId}}\",\n    \"indexNumber\": \"{{dogUpdateIndexNumber}}\",\n    \"breed\": \"XL Bully\",\n    \"name\": \"Rex alive\",\n    \"applicationType\": \"cdo\",\n    \"cdoIssued\": \"2023-10-10\",\n    \"cdoExpiry\": \"2023-12-10\",\n    \"interimExemption\": \"2023-12-10\",\n    \"status\": \"Interim exempt\",\n    \"microchipNumber\": \"{{microchipNumber2}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{DDI_API_BASE_URL}}/dog",
													"host": [
														"{{DDI_API_BASE_URL}}"
													],
													"path": [
														"dog"
													]
												}
											},
											"response": []
										},
										{
											"name": "/dog with same microchip should not fail",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"response is ok\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const duplicateMicrochip = JSON.parse(pm.collectionVariables.get('duplicateMicrochip'))",
															"pm.variables.set('microchipNumber2', duplicateMicrochip.microchipNumber2)",
															"pm.variables.set('dogUpdateIndexNumber', duplicateMicrochip.dogs[1].indexNumber)",
															"pm.variables.set('dogId', duplicateMicrochip.dogs[1].indexNumber.replace('ED',''))",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "ddi-username",
														"value": "internal-user"
													},
													{
														"key": "ddi-displayname",
														"value": "User, Internal"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"dogId\": \"{{dogId}}\",\n    \"indexNumber\": \"{{dogUpdateIndexNumber}}\",\n    \"breed\": \"XL Bully\",\n    \"name\": \"Rex alive\",\n    \"applicationType\": \"cdo\",\n    \"cdoIssued\": \"2023-10-10\",\n    \"cdoExpiry\": \"2023-12-10\",\n    \"interimExemption\": \"2023-12-10\",\n    \"status\": \"Interim exempt\",\n    \"microchipNumber\": \"{{microchipNumber2}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{DDI_API_BASE_URL}}/dog",
													"host": [
														"{{DDI_API_BASE_URL}}"
													],
													"path": [
														"dog"
													]
												}
											},
											"response": []
										},
										{
											"name": "/dog with duplicate microchip should fail",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"response is ok\", function () {",
															"    pm.response.to.have.status(409);",
															"    const jsonData = pm.response.json();",
															"    pm.expect(jsonData.microchipNumbers).to.deep.eq([pm.variables.get('microchipNumber1')])",
															"    pm.collectionVariables.unset('duplicateMicrochip')",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const duplicateMicrochip = JSON.parse(pm.collectionVariables.get('duplicateMicrochip'))",
															"",
															"pm.variables.set('dogUpdateIndexNumber', duplicateMicrochip.dogs[1].indexNumber)",
															"pm.variables.set('microchipNumber1', duplicateMicrochip.microchipNumber1)",
															"pm.variables.set('dogId', duplicateMicrochip.dogs[1].indexNumber.replace('ED',''))",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "ddi-username",
														"value": "internal-user"
													},
													{
														"key": "ddi-displayname",
														"value": "User, Internal"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"dogId\": \"{{dogId}}\",\n    \"indexNumber\": \"{{dogUpdateIndexNumber}}\",\n    \"breed\": \"XL Bully\",\n    \"name\": \"Rex alive\",\n    \"applicationType\": \"cdo\",\n    \"cdoIssued\": \"2023-10-10\",\n    \"cdoExpiry\": \"2023-12-10\",\n    \"interimExemption\": \"2023-12-10\",\n    \"status\": \"Interim exempt\",\n    \"microchipNumber\": \"{{microchipNumber1}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{DDI_API_BASE_URL}}/dog",
													"host": [
														"{{DDI_API_BASE_URL}}"
													],
													"path": [
														"dog"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Purge Old Dogs",
							"item": [
								{
									"name": "Setup",
									"item": [
										{
											"name": "Create Dog 1 with old cdo issued",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"response is ok\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"",
															"pm.test(\"dog details\", function () {",
															"    const [dog] = pm.response.json().dogs;",
															"    pm.collectionVariables.set('oldDog1', dog.indexNumber)",
															"});",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "ddi-username",
														"value": "internal-user"
													},
													{
														"key": "ddi-displayname",
														"value": "User, Internal"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"owner\": {\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"dateOfBirth\": \"1998-05-10\",\n    \"address\": {\n      \"addressLine1\": \"{{$randomStreetAddress}}\",\n      \"addressLine2\": \"Anywhere Estate\",\n      \"town\": \"{{$randomCity}}\",\n      \"postcode\": \"S1 1AA\"\n    }\n  },\n  \"enforcementDetails\": {\n    \"court\": \"1\",\n    \"policeForce\": \"1\",\n    \"legislationOfficer\": \"Sidney Lewis\"\n  },\n  \"dogs\": [\n    {\n      \"breed\": \"XL Bully\",\n      \"name\": \"{{$randomFirstName}}\",\n      \"applicationType\": \"cdo\",\n      \"cdoIssued\": \"2000-10-10\",\n      \"cdoExpiry\": \"2000-12-10\",\n      \"status\": \"Exempt\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{DDI_API_BASE_URL}}/cdo",
													"host": [
														"{{DDI_API_BASE_URL}}"
													],
													"path": [
														"cdo"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Dog 2 with current cdo issued for update later",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"response is ok\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"",
															"pm.test(\"dog details\", function () {",
															"    const [dog] = pm.response.json().dogs;",
															"    pm.collectionVariables.set('oldDog2', dog.indexNumber)",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "ddi-username",
														"value": "internal-user"
													},
													{
														"key": "ddi-displayname",
														"value": "User, Internal"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"owner\": {\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"dateOfBirth\": \"1998-05-10\",\n    \"address\": {\n      \"addressLine1\": \"{{$randomStreetAddress}}\",\n      \"addressLine2\": \"Anywhere Estate\",\n      \"town\": \"{{$randomCity}}\",\n      \"postcode\": \"S1 1AA\"\n    }\n  },\n  \"enforcementDetails\": {\n    \"court\": \"1\",\n    \"policeForce\": \"1\",\n    \"legislationOfficer\": \"Sidney Lewis\"\n  },\n  \"dogs\": [\n    {\n      \"breed\": \"XL Bully\",\n      \"name\": \"{{$randomFirstName}}\",\n      \"applicationType\": \"cdo\",\n      \"cdoIssued\": \"2023-10-10\",\n      \"cdoExpiry\": \"2023-12-10\",\n      \"status\": \"Exempt\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{DDI_API_BASE_URL}}/cdo",
													"host": [
														"{{DDI_API_BASE_URL}}"
													],
													"path": [
														"cdo"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update Dog 1 with status Exempt",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"response is ok\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "ddi-username",
														"value": "internal-user"
													},
													{
														"key": "ddi-displayname",
														"value": "User, Internal"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"indexNumber\": \"{{oldDog1}}\",\n  \"breed\": \"XL Bully\",\n  \"name\": \"{{$randomFirstName}}\",\n  \"status\": \"Exempt\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{DDI_API_BASE_URL}}/dog",
													"host": [
														"{{DDI_API_BASE_URL}}"
													],
													"path": [
														"dog"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update Dog 2 with old DOB and status Exempt",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"response is ok\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "ddi-username",
														"value": "internal-user"
													},
													{
														"key": "ddi-displayname",
														"value": "User, Internal"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"indexNumber\": \"{{oldDog2}}\",\n  \"dateOfBirth\": \"2000-10-10\",\n  \"breed\": \"XL Bully\",\n  \"name\": \"{{$randomFirstName}}\",\n  \"status\": \"Exempt\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{DDI_API_BASE_URL}}/dog",
													"host": [
														"{{DDI_API_BASE_URL}}"
													],
													"path": [
														"dog"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Test",
									"item": [
										{
											"name": "/dogs for purging with default sort",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const oldDog1 = pm.collectionVariables.get('oldDog1')",
															"const oldDog2 = pm.collectionVariables.get('oldDog2')",
															"",
															"pm.test(\"response is ok\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"response returns list of old dogs in sort order\", function () {",
															"    const dogs = pm.response.json();",
															"    pm.expect(dogs.length).to.equal(2)",
															"    pm.expect(dogs[0].indexNumber).to.equal(oldDog1)",
															"    pm.expect(dogs[1].indexNumber).to.equal(oldDog2)",
															"});",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{DDI_API_BASE_URL}}/dogs?forPurging=true&statuses=Exempt,Inactive,Withdrawn,Failed",
													"host": [
														"{{DDI_API_BASE_URL}}"
													],
													"path": [
														"dogs"
													],
													"query": [
														{
															"key": "forPurging",
															"value": "true"
														},
														{
															"key": "statuses",
															"value": "Exempt,Inactive,Withdrawn,Failed"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "/dogs for purging with reverse sort",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const oldDog1 = pm.collectionVariables.get('oldDog1')",
															"const oldDog2 = pm.collectionVariables.get('oldDog2')",
															"",
															"pm.test(\"response is ok\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"response returns list of old dogs in sort order\", function () {",
															"    const dogs = pm.response.json();",
															"    pm.expect(dogs.length).to.equal(2)",
															"    pm.expect(dogs[0].indexNumber).to.equal(oldDog2)",
															"    pm.expect(dogs[1].indexNumber).to.equal(oldDog1)",
															"});",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{DDI_API_BASE_URL}}/dogs?forPurging=true&sortKey=indexNumber&sortOrder=DESC&statuses=Exempt,Inactive,Withdrawn,Failed",
													"host": [
														"{{DDI_API_BASE_URL}}"
													],
													"path": [
														"dogs"
													],
													"query": [
														{
															"key": "forPurging",
															"value": "true"
														},
														{
															"key": "sortKey",
															"value": "indexNumber"
														},
														{
															"key": "sortOrder",
															"value": "DESC"
														},
														{
															"key": "statuses",
															"value": "Exempt,Inactive,Withdrawn,Failed"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Cleanup",
									"item": [
										{
											"name": "/dog delete old dog 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"response returns a 204 and empty body given\", function () {",
															"    pm.response.to.have.status(204);",
															"    const body = pm.response.body",
															"    pm.expect(body).to.eq(undefined)",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "ddi-username",
														"value": "internal-user"
													},
													{
														"key": "ddi-displayname",
														"value": "User, Internal"
													}
												],
												"url": {
													"raw": "{{DDI_API_BASE_URL}}/dog/{{oldDog1}}",
													"host": [
														"{{DDI_API_BASE_URL}}"
													],
													"path": [
														"dog",
														"{{oldDog1}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/dog delete old dog 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"response returns a 204 and empty body given\", function () {",
															"    pm.response.to.have.status(204);",
															"    const body = pm.response.body",
															"    pm.expect(body).to.eq(undefined)",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "ddi-username",
														"value": "internal-user"
													},
													{
														"key": "ddi-displayname",
														"value": "User, Internal"
													}
												],
												"url": {
													"raw": "{{DDI_API_BASE_URL}}/dog/{{oldDog2}}",
													"host": [
														"{{DDI_API_BASE_URL}}"
													],
													"path": [
														"dog",
														"{{oldDog2}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "batch delete dogs",
							"item": [
								{
									"name": "Setup",
									"item": [
										{
											"name": "Create dog 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const batchDeleteDogs = JSON.parse(pm.collectionVariables.get('batchDeleteDogs'))",
															"",
															"pm.test(\"response is ok\", function () {",
															"    pm.response.to.have.status(200);",
															"    const cdo = pm.response.json();",
															"",
															"    batchDeleteDogs.push(cdo.dogs[0].indexNumber)",
															"    pm.collectionVariables.set('batchDeleteDogs', JSON.stringify(batchDeleteDogs))",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.collectionVariables.set('batchDeleteDogs', '[]')"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "ddi-username",
														"value": "internal-user"
													},
													{
														"key": "ddi-displayname",
														"value": "User, Internal"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"owner\": {\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"dateOfBirth\": \"1998-05-10\",\n    \"address\": {\n      \"addressLine1\": \"{{$randomStreetAddress}}\",\n      \"addressLine2\": null,\n      \"town\": \"{{$randomCity}}\",\n      \"postcode\": \"S1 1AA\"\n    }\n  },\n  \"enforcementDetails\": {\n    \"court\": \"1\",\n    \"policeForce\": \"1\",\n    \"legislationOfficer\": \"Sidney Lewis\"\n  },\n  \"dogs\": [\n    {\n      \"breed\": \"XL Bully\",\n      \"name\": \"{{$randomFirstName}}\",\n      \"applicationType\": \"cdo\",\n      \"cdoIssued\": \"2023-10-10\",\n      \"cdoExpiry\": \"2023-12-10\",\n      \"interimExemption\": \"2023-12-10\",\n      \"status\": \"Status 1\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{DDI_API_BASE_URL}}/cdo",
													"host": [
														"{{DDI_API_BASE_URL}}"
													],
													"path": [
														"cdo"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create dog 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const batchDeleteDogs = JSON.parse(pm.collectionVariables.get('batchDeleteDogs'))",
															"",
															"pm.test(\"response is ok\", function () {",
															"    pm.response.to.have.status(200);",
															"    const cdo = pm.response.json();",
															"",
															"    batchDeleteDogs.push(cdo.dogs[0].indexNumber)",
															"    pm.collectionVariables.set('batchDeleteDogs', JSON.stringify(batchDeleteDogs))",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "ddi-username",
														"value": "internal-user"
													},
													{
														"key": "ddi-displayname",
														"value": "User, Internal"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"owner\": {\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"dateOfBirth\": \"1998-05-10\",\n    \"address\": {\n      \"addressLine1\": \"{{$randomStreetAddress}}\",\n      \"addressLine2\": null,\n      \"town\": \"{{$randomCity}}\",\n      \"postcode\": \"S1 1AA\"\n    }\n  },\n  \"enforcementDetails\": {\n    \"court\": \"1\",\n    \"policeForce\": \"1\",\n    \"legislationOfficer\": \"Sidney Lewis\"\n  },\n  \"dogs\": [\n    {\n      \"breed\": \"XL Bully\",\n      \"name\": \"{{$randomFirstName}}\",\n      \"applicationType\": \"cdo\",\n      \"cdoIssued\": \"2023-10-10\",\n      \"cdoExpiry\": \"2023-12-10\",\n      \"interimExemption\": \"2023-12-10\",\n      \"status\": \"Status 1\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{DDI_API_BASE_URL}}/cdo",
													"host": [
														"{{DDI_API_BASE_URL}}"
													],
													"path": [
														"cdo"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create dog 3",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const batchDeleteDogs = JSON.parse(pm.collectionVariables.get('batchDeleteDogs'))",
															"",
															"pm.test(\"response is ok\", function () {",
															"    pm.response.to.have.status(200);",
															"    const cdo = pm.response.json();",
															"",
															"    batchDeleteDogs.push(cdo.dogs[0].indexNumber)",
															"    pm.collectionVariables.set('batchDeleteDogs', JSON.stringify(batchDeleteDogs))",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "ddi-username",
														"value": "internal-user"
													},
													{
														"key": "ddi-displayname",
														"value": "User, Internal"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"owner\": {\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"dateOfBirth\": \"1998-05-10\",\n    \"address\": {\n      \"addressLine1\": \"{{$randomStreetAddress}}\",\n      \"addressLine2\": null,\n      \"town\": \"{{$randomCity}}\",\n      \"postcode\": \"S1 1AA\"\n    }\n  },\n  \"enforcementDetails\": {\n    \"court\": \"1\",\n    \"policeForce\": \"1\",\n    \"legislationOfficer\": \"Sidney Lewis\"\n  },\n  \"dogs\": [\n    {\n      \"breed\": \"XL Bully\",\n      \"name\": \"{{$randomFirstName}}\",\n      \"applicationType\": \"cdo\",\n      \"cdoIssued\": \"2023-10-10\",\n      \"cdoExpiry\": \"2023-12-10\",\n      \"interimExemption\": \"2023-12-10\",\n      \"status\": \"Status 1\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{DDI_API_BASE_URL}}/cdo",
													"host": [
														"{{DDI_API_BASE_URL}}"
													],
													"path": [
														"cdo"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"packages": {},
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"packages": {},
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "/dogs:batch-delete success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response returns a 200 and dogs should be returned\", function () {",
													"    pm.response.to.have.status(200);",
													"    const response = pm.response.json()",
													"    const expectedDeletedDogs = JSON.parse(pm.collectionVariables.get('batchDeleteDogs'))",
													"    pm.expect(response.count.failed).to.eq(0)",
													"    pm.expect(response.count.success).to.eq(expectedDeletedDogs.length)",
													"    pm.expect(response.deleted.failed).to.deep.eq([])",
													"    pm.expect(response.deleted.success).to.deep.eq(expectedDeletedDogs)",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"dogPks\": {{batchDeleteDogs}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/dogs:batch-delete",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"dogs:batch-delete"
											]
										}
									},
									"response": []
								},
								{
									"name": "/dogs:batch-delete failure",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response returns a 200 and dogs should be returned\", function () {",
													"    pm.response.to.have.status(200);",
													"    const response = pm.response.json()",
													"    const expectedDeletedDogs = JSON.parse(pm.collectionVariables.get('batchDeleteDogs'))",
													"    pm.expect(response.count.success).to.eq(0)",
													"    pm.expect(response.count.failed).to.eq(expectedDeletedDogs.length)",
													"    pm.expect(response.deleted.success).to.deep.eq([])",
													"    pm.expect(response.deleted.failed).to.deep.eq(expectedDeletedDogs)",
													"    pm.collectionVariables.unset('batchDeleteDogs')",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"dogPks\": {{batchDeleteDogs}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/dogs:batch-delete",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"dogs:batch-delete"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Courts",
					"item": [
						{
							"name": "should GET courts in alpha order",
							"item": [
								{
									"name": "Setup Court - Z",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const pushTearDown = (key, value) => {",
													"  const teardownValues = JSON.parse(pm.collectionVariables.get(key))",
													"  teardownValues.push(value)",
													"  pm.collectionVariables.set(key, JSON.stringify(teardownValues))",
													"}",
													"",
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(201);",
													"    const jsonData = pm.response.json()",
													"    pushTearDown('courtsTeardown', jsonData.id) ",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Zulu Magistrates Court\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/courts",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"courts"
											]
										}
									},
									"response": []
								},
								{
									"name": "Setup Courts - A",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const pushTearDown = (key, value) => {",
													"  const teardownValues = JSON.parse(pm.collectionVariables.get(key))",
													"  teardownValues.push(value)",
													"  pm.collectionVariables.set(key, JSON.stringify(teardownValues))",
													"}",
													"",
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(201);",
													"    const jsonData = pm.response.json()",
													"    pushTearDown('courtsTeardown', jsonData.id)",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"A Magistrate Court\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/courts",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"courts"
											]
										}
									},
									"response": []
								},
								{
									"name": "/courts",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"response returns list of courts in alpha sort order\", function () {",
													"    const jsonData = pm.response.json();",
													"    const policeForces = jsonData.courts",
													"    pm.expect(policeForces.length > 50).to.be.true",
													"    pm.expect(policeForces[0].id).to.be.a('number')",
													"    pm.expect(policeForces[0].name).to.equal('A Magistrate Court')",
													"    pm.expect(policeForces[policeForces.length - 1].name).to.equal('Zulu Magistrates Court')",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/courts",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"courts"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											"pm.collectionVariables.set('courtsTeardown', '[]')"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Should be collision safe Copy",
							"item": [
								{
									"name": "/courts",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const teardownValues = JSON.parse(pm.collectionVariables.get('courtsTeardown'))",
													"",
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(201);",
													"    const jsonData = pm.response.json();",
													"    pm.collectionVariables.set('courtsCollisionId', jsonData.id)",
													"    pm.collectionVariables.set('courtsCollisionId1', jsonData.id)",
													"",
													"    teardownValues.push(jsonData.id)",
													"    pm.collectionVariables.set('courtsTeardown', JSON.stringify(teardownValues))",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"house of lords\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/courts",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"courts"
											]
										}
									},
									"response": []
								},
								{
									"name": "/courts",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/courts/{{courtsCollisionId}}",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"courts",
												"{{courtsCollisionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/courts",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const teardownValues = JSON.parse(pm.collectionVariables.get('courtsTeardown'))",
													"",
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(201);",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData.id).not.to.eq(pm.collectionVariables.get('courtsCollisionId'))",
													"    pm.collectionVariables.set('courtsCollisionId', jsonData.id)",
													"    teardownValues.push(jsonData.id)",
													"    pm.collectionVariables.set('courtsTeardown', JSON.stringify(teardownValues))",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"house of\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/courts",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"courts"
											]
										}
									},
									"response": []
								},
								{
									"name": "/courts",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/courts/{{courtsCollisionId}}",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"courts",
												"{{courtsCollisionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/courts",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const pushTearDown = (key, value) => {",
													"  const teardownValues = JSON.parse(pm.collectionVariables.get(key))",
													"  teardownValues.push(value)",
													"  pm.collectionVariables.set(key, JSON.stringify(teardownValues))",
													"}",
													"",
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(201);",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData.name).to.eq('House of Lords')",
													"    pm.expect(jsonData.id).to.eq(parseInt(pm.collectionVariables.get('courtsCollisionId1')))",
													"    pushTearDown('courtsTeardown', jsonData.id)",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"House of Lords\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/courts",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"courts"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "courts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"response returns list of courts\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.courts.length > 100).to.be.true",
											"    pm.expect(jsonData.courts[0].id).to.be.a('number')",
											"    pm.expect(jsonData.courts[0].name).to.be.a('string')",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/courts",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"courts"
									]
								}
							},
							"response": []
						},
						{
							"name": "/courts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"response returns the created court\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.be.a('number')",
											"    pm.expect(jsonData.name).to.eq('Reading County Court and Family Court')",
											"    pm.collectionVariables.set('courtId', jsonData.id)",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "ddi-username",
										"value": "internal-user"
									},
									{
										"key": "ddi-displayname",
										"value": "User, Internal"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Reading County Court and Family Court\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/courts",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"courts"
									]
								}
							},
							"response": []
						},
						{
							"name": "/courts/:invalid-court-id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/courts/-1",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"courts",
										"-1"
									]
								}
							},
							"response": []
						},
						{
							"name": "/courts duplicates should fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response should fail\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Reading County Court and Family Court\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/courts",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"courts"
									]
								}
							},
							"response": []
						},
						{
							"name": "/courts duplicates should fail case insensitive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response should fail\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Reading County Court and family court\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/courts",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"courts"
									]
								}
							},
							"response": []
						},
						{
							"name": "/courts/:court-id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(204);",
											"    const body = pm.response.body",
											"    pm.expect(body).to.eq(undefined)",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "ddi-username",
										"value": "internal-user"
									},
									{
										"key": "ddi-displayname",
										"value": "User, Internal"
									}
								],
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/courts/{{courtId}}",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"courts",
										"{{courtId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/courts Deleted courts should be recreated",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"response returns the created court\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.be.a('number')",
											"    pm.expect(jsonData.name).to.eq('Reading County Court and Family Court')",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "ddi-username",
										"value": "internal-user"
									},
									{
										"key": "ddi-displayname",
										"value": "User, Internal"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Reading County Court and Family Court\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/courts",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"courts"
									]
								}
							},
							"response": []
						},
						{
							"name": "/courts/:court-id Teardown",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(204);",
											"    const body = pm.response.body",
											"    pm.expect(body).to.eq(undefined)",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "ddi-username",
										"value": "internal-user"
									},
									{
										"key": "ddi-displayname",
										"value": "User, Internal"
									}
								],
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/courts/{{courtId}}",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"courts",
										"{{courtId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Police",
					"item": [
						{
							"name": "should GET police forces in alpha order",
							"item": [
								{
									"name": "Setup Police Forces - Z",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const pushTearDown = (key, value) => {",
													"  const teardownValues = JSON.parse(pm.collectionVariables.get(key))",
													"  teardownValues.push(value)",
													"  pm.collectionVariables.set(key, JSON.stringify(teardownValues))",
													"}",
													"",
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(201);",
													"    const jsonData = pm.response.json()",
													"    pushTearDown('policeTeardown', jsonData.id)",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Zulu Police Force\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/police-forces",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"police-forces"
											]
										}
									},
									"response": []
								},
								{
									"name": "Setup Police Forces - A",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const pushTearDown = (key, value) => {",
													"  const teardownValues = JSON.parse(pm.collectionVariables.get(key))",
													"  teardownValues.push(value)",
													"  pm.collectionVariables.set(key, JSON.stringify(teardownValues))",
													"}",
													"",
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(201);",
													"    const jsonData = pm.response.json()",
													"    pushTearDown('policeTeardown', jsonData.id)",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Alpha Police Force\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/police-forces",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"police-forces"
											]
										}
									},
									"response": []
								},
								{
									"name": "/police-forces",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"response returns list of police forces in alpha sort order\", function () {",
													"    const jsonData = pm.response.json();",
													"    const policeForces = jsonData.policeForces",
													"    pm.expect(policeForces.length > 50).to.be.true",
													"    pm.expect(policeForces[0].id).to.be.a('number')",
													"    pm.expect(policeForces[0].name).to.equal('Alpha Police Force')",
													"    pm.expect(policeForces[policeForces.length - 1].name).to.equal('Zulu Police Force')",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/police-forces",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"police-forces"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Should be collision safe",
							"item": [
								{
									"name": "/police-forces",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const teardownValues = JSON.parse(pm.collectionVariables.get('policeTeardown'))",
													"",
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(201);",
													"    const jsonData = pm.response.json();",
													"    pm.collectionVariables.set('policeCollisionId', jsonData.id)",
													"    pm.collectionVariables.set('policeCollisionId1', jsonData.id)",
													"",
													"    teardownValues.push(jsonData.id)",
													"    pm.collectionVariables.set('policeTeardown', JSON.stringify(teardownValues))",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"belfast town police\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/police-forces",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"police-forces"
											]
										}
									},
									"response": []
								},
								{
									"name": "/police-forces",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/police-forces/{{policeCollisionId}}",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"police-forces",
												"{{policeCollisionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/police-forces",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const teardownValues = JSON.parse(pm.collectionVariables.get('policeTeardown'))",
													"",
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(201);",
													"    const jsonData = pm.response.json();",
													"    pm.collectionVariables.set('policeCollisionId', jsonData.id)",
													"    teardownValues.push(jsonData.id)",
													"    pm.collectionVariables.set('policeTeardown', JSON.stringify(teardownValues))",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"belfast town\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/police-forces",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"police-forces"
											]
										}
									},
									"response": []
								},
								{
									"name": "/police-forces",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/police-forces/{{policeCollisionId}}",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"police-forces",
												"{{policeCollisionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/police-forces",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const teardownValues = JSON.parse(pm.collectionVariables.get('policeTeardown'))",
													"",
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(201);",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData.name).to.eq('Belfast Town Police')",
													"    pm.expect(jsonData.id).to.eq(parseInt(pm.collectionVariables.get('policeCollisionId1')))",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Belfast Town Police\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/police-forces",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"police-forces"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "/police-forces",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"response returns the created Police Force\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.be.a('number')",
											"    pm.expect(jsonData.name).to.eq('The Shire Shirriffs Constabulary')",
											"    pm.collectionVariables.set('policeId', jsonData.id)",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "ddi-username",
										"value": "internal-user"
									},
									{
										"key": "ddi-displayname",
										"value": "User, Internal"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"The Shire Shirriffs Constabulary\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/police-forces",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"police-forces"
									]
								}
							},
							"response": []
						},
						{
							"name": "/police-forces/:invalid-court-id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/police-forces/-1",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"police-forces",
										"-1"
									]
								}
							},
							"response": []
						},
						{
							"name": "/police-forces duplicates should fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response should fail\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"The Shire Shirriffs Constabulary\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/police-forces",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"police-forces"
									]
								}
							},
							"response": []
						},
						{
							"name": "/police-forces duplicates should fail case insensitive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response should fail\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"The Shire shirriffs Constabulary\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/police-forces",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"police-forces"
									]
								}
							},
							"response": []
						},
						{
							"name": "/police-forces/:police-id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(204);",
											"    const body = pm.response.body",
											"    pm.expect(body).to.eq(undefined)",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "ddi-username",
										"value": "internal-user"
									},
									{
										"key": "ddi-displayname",
										"value": "User, Internal"
									}
								],
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/police-forces/{{policeId}}",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"police-forces",
										"{{policeId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/police-forces Deleted police forces should be recreated",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"response returns the created police force\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.be.a('number')",
											"    pm.expect(jsonData.name).to.eq('The Shire Shirriffs Constabulary')",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "ddi-username",
										"value": "internal-user"
									},
									{
										"key": "ddi-displayname",
										"value": "User, Internal"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"The Shire Shirriffs Constabulary\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/police-forces",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"police-forces"
									]
								}
							},
							"response": []
						},
						{
							"name": "/police-forces/:police-id Teardown",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(204);",
											"    const body = pm.response.body",
											"    pm.expect(body).to.eq(undefined)",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "ddi-username",
										"value": "internal-user"
									},
									{
										"key": "ddi-displayname",
										"value": "User, Internal"
									}
								],
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/police-forces/{{policeId}}",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"police-forces",
										"{{policeId}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"pm.collectionVariables.set('policeTeardown', '[]')"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Insurance",
					"item": [
						{
							"name": "should GET insurance companies in alpha order Copy",
							"item": [
								{
									"name": "Setup Insurance Companies - Z",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const pushTearDown = (key, value) => {",
													"  const teardownValues = JSON.parse(pm.collectionVariables.get(key))",
													"  teardownValues.push(value)",
													"  pm.collectionVariables.set(key, JSON.stringify(teardownValues))",
													"}",
													"",
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(201);",
													"    const jsonData = pm.response.json()",
													"    pushTearDown('insuranceTeardown', jsonData.id)",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Zurich\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/insurance/companies",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"insurance",
												"companies"
											]
										}
									},
									"response": []
								},
								{
									"name": "Setup Insurance Companies - A",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const pushTearDown = (key, value) => {",
													"  const teardownValues = JSON.parse(pm.collectionVariables.get(key))",
													"  teardownValues.push(value)",
													"  pm.collectionVariables.set(key, JSON.stringify(teardownValues))",
													"}",
													"",
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(201);",
													"    const jsonData = pm.response.json()",
													"    pushTearDown('insuranceTeardown', jsonData.id)",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Allianz\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/insurance/companies",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"insurance",
												"companies"
											]
										}
									},
									"response": []
								},
								{
									"name": "Setup Insurance Companies - N",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const pushTearDown = (key, value) => {",
													"  const teardownValues = JSON.parse(pm.collectionVariables.get(key))",
													"  teardownValues.push(value)",
													"  pm.collectionVariables.set(key, JSON.stringify(teardownValues))",
													"}",
													"",
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(201);",
													"    const jsonData = pm.response.json()",
													"    pushTearDown('insuranceTeardown', jsonData.id)",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Norfolk Mutual\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/insurance/companies",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"insurance",
												"companies"
											]
										}
									},
									"response": []
								},
								{
									"name": "/insurance",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"response returns list of insurance companies in alpha sort order\", function () {",
													"    const jsonData = pm.response.json();",
													"    const insuranceCompany = jsonData.companies",
													"    pm.expect(insuranceCompany[0].id).to.be.a('number')",
													"    pm.expect(insuranceCompany[0].name).to.equal('Allianz')",
													"    pm.expect(insuranceCompany[insuranceCompany.length - 1].name).to.equal('Zurich')",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/insurance/companies",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"insurance",
												"companies"
											]
										}
									},
									"response": []
								},
								{
									"name": "/insurance sort by updatedAt",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"response returns list of insurance companies in alpha sort order\", function () {",
													"    const jsonData = pm.response.json();",
													"    const insuranceCompany = jsonData.companies",
													"    pm.expect(insuranceCompany[0].name).to.equal('Norfolk Mutual')",
													"    pm.expect(insuranceCompany[insuranceCompany.length - 1].name).to.equal('Dogs Trust')",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/insurance/companies?sortKey=updatedAt&sortOrder=DESC",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"insurance",
												"companies"
											],
											"query": [
												{
													"key": "sortKey",
													"value": "updatedAt"
												},
												{
													"key": "sortOrder",
													"value": "DESC"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Should be collision safe",
							"item": [
								{
									"name": "/insurance/companies",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const teardownValues = JSON.parse(pm.collectionVariables.get('insuranceTeardown'))",
													"",
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(201);",
													"    const jsonData = pm.response.json();",
													"    pm.collectionVariables.set('insuranceCollisionId', jsonData.id)",
													"    pm.collectionVariables.set('insuranceCollisionId1', jsonData.id)",
													"    teardownValues.push(jsonData.id)",
													"    pm.collectionVariables.set('insuranceTeardown', JSON.stringify(teardownValues))",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"axa insurance\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/insurance/companies",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"insurance",
												"companies"
											]
										}
									},
									"response": []
								},
								{
									"name": "/insurance/companies Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/insurance/companies/{{insuranceCollisionId}}",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"insurance",
												"companies",
												"{{insuranceCollisionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/insurance/companies Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const teardownValues = JSON.parse(pm.collectionVariables.get('insuranceTeardown'))",
													"",
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(201);",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData.id).not.to.eq(pm.collectionVariables.get('insuranceCollisionId'))",
													"    pm.collectionVariables.set('insuranceCollisionId', jsonData.id)",
													"    teardownValues.push(jsonData.id)",
													"    pm.collectionVariables.set('insuranceTeardown', JSON.stringify(teardownValues))",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"axa\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/insurance/companies",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"insurance",
												"companies"
											]
										}
									},
									"response": []
								},
								{
									"name": "/insurance/companies axa",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/insurance/companies/{{insuranceCollisionId}}",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"insurance",
												"companies",
												"{{insuranceCollisionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/insurance/companies Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const teardownValues = JSON.parse(pm.collectionVariables.get('insuranceTeardown'))",
													"",
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(201);",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData.name).to.eq('Axa Insurance')",
													"    pm.expect(jsonData.id).to.eq(parseInt(pm.collectionVariables.get('insuranceCollisionId1')))",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Axa Insurance\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/insurance/companies",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"insurance",
												"companies"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "/insurance/companies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"response returns the created Insurance Company\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.be.a('number')",
											"    pm.expect(jsonData.name).to.eq('Lloyds of London')",
											"    pm.collectionVariables.set('insuranceId', jsonData.id)",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "ddi-username",
										"value": "internal-user"
									},
									{
										"key": "ddi-displayname",
										"value": "User, Internal"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Lloyds of London\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/insurance/companies",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"insurance",
										"companies"
									]
								}
							},
							"response": []
						},
						{
							"name": "/insurance/companies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "ddi-username",
										"value": "internal-user"
									},
									{
										"key": "ddi-displayname",
										"value": "User, Internal"
									}
								],
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/insurance/companies/-1",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"insurance",
										"companies",
										"-1"
									]
								}
							},
							"response": []
						},
						{
							"name": "/insurance/companies duplicates should fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response should fail\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Lloyds of London\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/insurance/companies",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"insurance",
										"companies"
									]
								}
							},
							"response": []
						},
						{
							"name": "/insurance/companies duplicates should fail case insensitive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response should fail\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"lloyds of London\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/insurance/companies",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"insurance",
										"companies"
									]
								}
							},
							"response": []
						},
						{
							"name": "/insurance/companies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(204);",
											"    const body = pm.response.body",
											"    pm.expect(body).to.eq(undefined)",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "ddi-username",
										"value": "internal-user"
									},
									{
										"key": "ddi-displayname",
										"value": "User, Internal"
									}
								],
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/insurance/companies/{{insuranceId}}",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"insurance",
										"companies",
										"{{insuranceId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/insurance/companies Deleted insurance companies should be recreated",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"response returns the created insurance company\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.be.a('number')",
											"    pm.expect(jsonData.name).to.eq('Lloyds of London')",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "ddi-username",
										"value": "internal-user"
									},
									{
										"key": "ddi-displayname",
										"value": "User, Internal"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Lloyds of London\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/insurance/companies",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"insurance",
										"companies"
									]
								}
							},
							"response": []
						},
						{
							"name": "/insurance/companies Teardown",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(204);",
											"    const body = pm.response.body",
											"    pm.expect(body).to.eq(undefined)",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "ddi-username",
										"value": "internal-user"
									},
									{
										"key": "ddi-displayname",
										"value": "User, Internal"
									}
								],
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/insurance/companies/{{insuranceId}}",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"insurance",
										"companies",
										"{{insuranceId}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"pm.collectionVariables.set('insuranceTeardown', '[]')"
								]
							}
						}
					]
				},
				{
					"name": "Statistics",
					"item": [
						{
							"name": "counts-per-status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response returns a list of counts of each status\", function () {",
											"    pm.response.to.have.status(200);",
											"    const counts = pm.response.json();",
											"    pm.expect(counts.length > 1).to.be.true;",
											"    pm.expect(counts.some(row => row.status.name === 'Pre-exempt')).to.be.true;",
											"    pm.expect(counts[0].total > 15).to.be.true;",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/statistics?queryName=countsPerStatus",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"statistics"
									],
									"query": [
										{
											"key": "queryName",
											"value": "countsPerStatus"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Jobs",
					"item": [
						{
							"name": "Purge Soft Deleted Records",
							"item": [
								{
									"name": "Setup Copy",
									"item": [
										{
											"name": "Create dog 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.collectionVariables.set('purgeOwners', [])",
															"pm.collectionVariables.set('purgeDogs', [])",
															"const purgeDogs = []",
															"const purgeOwners = []",
															"",
															"pm.test(\"response is ok\", function () {",
															"    pm.response.to.have.status(200);",
															"    const cdo = pm.response.json();",
															"",
															"    purgeDogs.push(cdo.dogs[0].indexNumber)",
															"    purgeOwners.push(cdo.owner.personReference)",
															"    pm.collectionVariables.set('purgeDogs', JSON.stringify(purgeDogs))",
															"    pm.collectionVariables.set('purgeOwners', JSON.stringify(purgeOwners))",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "ddi-username",
														"value": "internal-user"
													},
													{
														"key": "ddi-displayname",
														"value": "User, Internal"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"owner\": {\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"dateOfBirth\": \"1998-05-10\",\n    \"address\": {\n      \"addressLine1\": \"{{$randomStreetAddress}}\",\n      \"addressLine2\": null,\n      \"town\": \"{{$randomCity}}\",\n      \"postcode\": \"S1 1AA\"\n    }\n  },\n  \"enforcementDetails\": {\n    \"court\": \"1\",\n    \"policeForce\": \"1\",\n    \"legislationOfficer\": \"Sidney Lewis\"\n  },\n  \"dogs\": [\n    {\n      \"breed\": \"XL Bully\",\n      \"name\": \"{{$randomFirstName}}\",\n      \"applicationType\": \"cdo\",\n      \"cdoIssued\": \"2023-10-10\",\n      \"cdoExpiry\": \"2023-12-10\",\n      \"interimExemption\": \"2023-12-10\",\n      \"status\": \"Status 1\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{DDI_API_BASE_URL}}/cdo",
													"host": [
														"{{DDI_API_BASE_URL}}"
													],
													"path": [
														"cdo"
													]
												}
											},
											"response": []
										},
										{
											"name": "/exemption returns 200 Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"response is ok\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const [dogIdx] = JSON.parse(pm.collectionVariables.get('purgeDogs'))",
															"pm.variables.set('dog-idx', dogIdx)"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "ddi-username",
														"value": "internal-user"
													},
													{
														"key": "ddi-displayname",
														"value": "User, Internal"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"exemptionOrder\": 2023,\n  \"indexNumber\": \"{{dog-idx}}\",\n  \"cdoIssued\": \"2020-01-01\",\n  \"cdoExpiry\": \"2020-02-01\",\n  \"policeForce\": \"Avon and Somerset Constabulary\",\n  \"legislationOfficer\": \"Test Officer\",\n  \"certificateIssued\": \"2020-03-01\",\n  \"applicationFeePaid\": \"2020-03-01\",\n  \"neuteringConfirmation\": \"2020-04-01\",\n  \"microchipVerification\": \"2020-04-01\",\n  \"joinedExemptionScheme\": \"2020-05-01\",\n  \"insurance\": {\n    \"company\": \"Dogs Trust\",\n    \"renewalDate\": \"2020-06-01\"\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{DDI_API_BASE_URL}}/exemption",
													"host": [
														"{{DDI_API_BASE_URL}}"
													],
													"path": [
														"exemption"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update address once",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"response is ok\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const [reference] = JSON.parse(pm.collectionVariables.get('purgeOwners'))",
															"pm.variables.set('reference', reference)"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "ddi-username",
														"value": "internal-user"
													},
													{
														"key": "ddi-displayname",
														"value": "User, Internal"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"personReference\": \"{{reference}}\",\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"{{$randomLastName}}\",\n  \"dateOfBirth\": \"1998-05-10\",\n  \"address\": {\n    \"addressLine1\": \"{{$randomStreetAddress}}\",\n    \"town\": \"City of London\",\n    \"postcode\": \"S1 1AA\",\n    \"country\": \"England\"\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{DDI_API_BASE_URL}}/person",
													"host": [
														"{{DDI_API_BASE_URL}}"
													],
													"path": [
														"person"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update address second time",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"response is ok\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const [reference] = JSON.parse(pm.collectionVariables.get('purgeOwners'))",
															"pm.variables.set('reference', reference)"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "ddi-username",
														"value": "internal-user"
													},
													{
														"key": "ddi-displayname",
														"value": "User, Internal"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"personReference\": \"{{reference}}\",\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"{{$randomLastName}}\",\n  \"dateOfBirth\": \"1998-05-10\",\n  \"address\": {\n    \"addressLine1\": \"{{$randomStreetAddress}}\",\n    \"town\": \"City of London\",\n    \"postcode\": \"S1 1AA\",\n    \"country\": \"England\"\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{DDI_API_BASE_URL}}/person",
													"host": [
														"{{DDI_API_BASE_URL}}"
													],
													"path": [
														"person"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create dog 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const purgeDogs = JSON.parse(pm.collectionVariables.get('purgeDogs'))",
															"const purgeOwners = JSON.parse(pm.collectionVariables.get('purgeOwners'))",
															"",
															"pm.test(\"response is ok\", function () {",
															"    pm.response.to.have.status(200);",
															"    const cdo = pm.response.json();",
															"",
															"    purgeDogs.push(cdo.dogs[0].indexNumber)",
															"    purgeOwners.push(cdo.owner.personReference)",
															"    pm.collectionVariables.set('purgeDogs', JSON.stringify(purgeDogs))",
															"    pm.collectionVariables.set('purgeOwners', JSON.stringify(purgeOwners))",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "ddi-username",
														"value": "internal-user"
													},
													{
														"key": "ddi-displayname",
														"value": "User, Internal"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"owner\": {\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"dateOfBirth\": \"1998-05-10\",\n    \"address\": {\n      \"addressLine1\": \"{{$randomStreetAddress}}\",\n      \"addressLine2\": null,\n      \"town\": \"{{$randomCity}}\",\n      \"postcode\": \"S1 1AA\"\n    }\n  },\n  \"enforcementDetails\": {\n    \"court\": \"1\",\n    \"policeForce\": \"1\",\n    \"legislationOfficer\": \"Sidney Lewis\"\n  },\n  \"dogs\": [\n    {\n      \"breed\": \"XL Bully\",\n      \"name\": \"{{$randomFirstName}}\",\n      \"applicationType\": \"cdo\",\n      \"cdoIssued\": \"2023-10-10\",\n      \"cdoExpiry\": \"2023-12-10\",\n      \"interimExemption\": \"2023-12-10\",\n      \"status\": \"Status 1\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{DDI_API_BASE_URL}}/cdo",
													"host": [
														"{{DDI_API_BASE_URL}}"
													],
													"path": [
														"cdo"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create dog 3",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const purgeDogs = JSON.parse(pm.collectionVariables.get('purgeDogs'))",
															"const purgeOwners = JSON.parse(pm.collectionVariables.get('purgeOwners'))",
															"",
															"pm.test(\"response is ok\", function () {",
															"    pm.response.to.have.status(200);",
															"    const cdo = pm.response.json();",
															"",
															"    purgeDogs.push(cdo.dogs[0].indexNumber)",
															"    purgeOwners.push(cdo.owner.personReference)",
															"    pm.collectionVariables.set('purgeDogs', JSON.stringify(purgeDogs))",
															"    pm.collectionVariables.set('purgeOwners', JSON.stringify(purgeOwners))",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "ddi-username",
														"value": "internal-user"
													},
													{
														"key": "ddi-displayname",
														"value": "User, Internal"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"owner\": {\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"dateOfBirth\": \"1998-05-10\",\n    \"address\": {\n      \"addressLine1\": \"{{$randomStreetAddress}}\",\n      \"addressLine2\": null,\n      \"town\": \"{{$randomCity}}\",\n      \"postcode\": \"S1 1AA\"\n    }\n  },\n  \"enforcementDetails\": {\n    \"court\": \"1\",\n    \"policeForce\": \"1\",\n    \"legislationOfficer\": \"Sidney Lewis\"\n  },\n  \"dogs\": [\n    {\n      \"breed\": \"XL Bully\",\n      \"name\": \"{{$randomFirstName}}\",\n      \"applicationType\": \"cdo\",\n      \"cdoIssued\": \"2023-10-10\",\n      \"cdoExpiry\": \"2023-12-10\",\n      \"interimExemption\": \"2023-12-10\",\n      \"status\": \"Status 1\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{DDI_API_BASE_URL}}/cdo",
													"host": [
														"{{DDI_API_BASE_URL}}"
													],
													"path": [
														"cdo"
													]
												}
											},
											"response": []
										},
										{
											"name": "/dogs:batch-delete success Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"response returns a 200 and dogs should be returned\", function () {",
															"    pm.response.to.have.status(200);",
															"    const result =  pm.response.json();",
															"    pm.expect(result.count.success > 2).to.be.true;",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "ddi-username",
														"value": "internal-user"
													},
													{
														"key": "ddi-displayname",
														"value": "User, Internal"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"dogPks\": {{purgeDogs}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{DDI_API_BASE_URL}}/dogs:batch-delete",
													"host": [
														"{{DDI_API_BASE_URL}}"
													],
													"path": [
														"dogs:batch-delete"
													]
												}
											},
											"response": []
										},
										{
											"name": "/persons:batch-delete success Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"response returns a 200 and dogs should be returned\", function () {",
															"    pm.response.to.have.status(200);",
															"    const result =  pm.response.json();",
															"    pm.expect(result.count.success > 2).to.be.true;",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "ddi-username",
														"value": "internal-user"
													},
													{
														"key": "ddi-displayname",
														"value": "User, Internal"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"personReferences\": {{purgeOwners}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{DDI_API_BASE_URL}}/persons:batch-delete",
													"host": [
														"{{DDI_API_BASE_URL}}"
													],
													"path": [
														"persons:batch-delete"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"packages": {},
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"packages": {},
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "purge soft deleted records",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response returns a list of counts of each status\", function () {",
													"    pm.response.to.have.status(200);",
													"    const counts = pm.response.json();",
													"    pm.expect(counts.count.success.total > 5).to.be.true;",
													"    pm.expect(counts.count.success.dogs > 2).to.be.true;",
													"    pm.expect(counts.count.success.owners > 2).to.be.true;",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const dateToday = new Date()",
													"dateToday.setMonth(dateToday.getMonth() + 3)",
													"const in90Days = dateToday.toISOString().split('T')[0]",
													"",
													"pm.variables.set('in90Days', in90Days)"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/jobs/purge-soft-delete?today={{in90Days}}",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"jobs",
												"purge-soft-delete"
											],
											"query": [
												{
													"key": "today",
													"value": "{{in90Days}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Insurance Expired",
							"item": [
								{
									"name": "Setup",
									"item": [
										{
											"name": "Clear insurance expired examples",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"response returns a list of counts of each status\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const dateToday = new Date()",
															"dateToday.setMonth(dateToday.getMonth() + 3)",
															"const in90Days = dateToday.toISOString().split('T')[0]",
															"",
															"pm.variables.set('in90Days', in90Days)"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "ddi-username",
														"value": "internal-user",
														"type": "text"
													},
													{
														"key": "ddi-displayname",
														"value": "User, Internal",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{DDI_API_BASE_URL}}/jobs/expired-insurance",
													"host": [
														"{{DDI_API_BASE_URL}}"
													],
													"path": [
														"jobs",
														"expired-insurance"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create dog 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"response is ok\", function () {",
															"    pm.response.to.have.status(200);",
															"    const cdo = pm.response.json();",
															"    const indexNumber = cdo.dogs[0].indexNumber",
															"    const dogId = parseInt(indexNumber.replace('ED',''))",
															"",
															"    pm.collectionVariables.set('insuranceExpiredDog', indexNumber)",
															"    pm.collectionVariables.set('insuranceExpiredDogId', dogId)",
															"",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "ddi-username",
														"value": "internal-user"
													},
													{
														"key": "ddi-displayname",
														"value": "User, Internal"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"owner\": {\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"dateOfBirth\": \"1998-05-10\",\n    \"address\": {\n      \"addressLine1\": \"{{$randomStreetAddress}}\",\n      \"addressLine2\": null,\n      \"town\": \"{{$randomCity}}\",\n      \"postcode\": \"S1 1AA\"\n    }\n  },\n  \"enforcementDetails\": {\n    \"court\": \"1\",\n    \"policeForce\": \"1\",\n    \"legislationOfficer\": \"Sidney Lewis\"\n  },\n  \"dogs\": [\n    {\n      \"breed\": \"XL Bully\",\n      \"name\": \"Insurance expired Dog\",\n      \"applicationType\": \"cdo\",\n      \"cdoIssued\": \"2023-10-10\",\n      \"cdoExpiry\": \"2023-12-10\",\n      \"interimExemption\": \"2023-12-10\",\n      \"status\": \"Status 1\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{DDI_API_BASE_URL}}/cdo",
													"host": [
														"{{DDI_API_BASE_URL}}"
													],
													"path": [
														"cdo"
													]
												}
											},
											"response": []
										},
										{
											"name": "Set dog with expired insurance and cert issued",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"response is ok\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const [dogIdx] = JSON.parse(pm.collectionVariables.get('purgeDogs'))",
															"pm.variables.set('dog-idx', dogIdx)"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "ddi-username",
														"value": "internal-user"
													},
													{
														"key": "ddi-displayname",
														"value": "User, Internal"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"exemptionOrder\": 2015,\n  \"indexNumber\": \"{{insuranceExpiredDog}}\",\n  \"cdoIssued\": \"2023-10-10\",\n  \"cdoExpiry\": \"2023-12-10\",\n  \"policeForce\": \"Avon and Somerset Constabulary\",\n  \"legislationOfficer\": \"Test Officer\",\n  \"certificateIssued\": \"2020-03-01\",\n  \"applicationFeePaid\": \"2020-03-01\",\n  \"neuteringConfirmation\": \"2020-04-01\",\n  \"microchipVerification\": \"2020-04-01\",\n  \"joinedExemptionScheme\": \"2020-05-01\",\n  \"insurance\": {\n    \"company\": \"Dogs Trust\",\n    \"renewalDate\": \"2024-07-19\"\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{DDI_API_BASE_URL}}/exemption",
													"host": [
														"{{DDI_API_BASE_URL}}"
													],
													"path": [
														"exemption"
													]
												}
											},
											"response": []
										},
										{
											"name": "Set Dog status to Exempt",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"response is ok\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "ddi-username",
														"value": "internal-user"
													},
													{
														"key": "ddi-displayname",
														"value": "User, Internal"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"dogId\": \"{{insuranceExpiredDogId}}\",\n    \"indexNumber\": \"{{insuranceExpiredDog}}\",\n    \"breed\": \"XL Bully\",\n    \"name\": \"Insurance expired Dog\",\n    \"applicationType\": \"cdo\",\n    \"cdoIssued\": \"2023-10-10\",\n    \"cdoExpiry\": \"2023-12-10\",\n    \"interimExemption\": \"2023-12-10\",\n    \"status\": \"Exempt\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{DDI_API_BASE_URL}}/dog",
													"host": [
														"{{DDI_API_BASE_URL}}"
													],
													"path": [
														"dog"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"packages": {},
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"packages": {},
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Set insurance expired",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response returns a list of counts of each status\", function () {",
													"    pm.response.to.have.status(200);",
													"    const { response } = pm.response.json()",
													"    const [,,,,,count] = response.split(' ')",
													"    pm.expect(parseInt(count)).to.equal(1)",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const dateToday = new Date()",
													"dateToday.setMonth(dateToday.getMonth() + 3)",
													"const in90Days = dateToday.toISOString().split('T')[0]",
													"",
													"pm.variables.set('in90Days', in90Days)"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user",
												"type": "text"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/jobs/expired-insurance",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"jobs",
												"expired-insurance"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Neutering Deadline",
							"item": [
								{
									"name": "Set Neutering Deadline expired",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response returns a list of counts of each status\", function () {",
													"    pm.response.to.have.status(200);",
													"    const { response } = pm.response.json()",
													"    const [,,,,,count] = response.split(' ')",
													"    pm.expect(parseInt(count)).to.not.eq(NaN)",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const dateToday = new Date()",
													"dateToday.setMonth(dateToday.getMonth() + 3)",
													"const in90Days = dateToday.toISOString().split('T')[0]",
													"",
													"pm.variables.set('in90Days', in90Days)"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user",
												"type": "text"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/jobs/neutering-deadline",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"jobs",
												"neutering-deadline"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Breaches",
					"item": [
						{
							"name": "Setup",
							"item": [
								{
									"name": "Add CDO",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(200);",
													"    const cdo = pm.response.json()",
													"    const indexNumber = cdo.dogs[0].indexNumber",
													"    const dogId = parseInt(indexNumber.replace('ED',''))",
													"    pm.collectionVariables.set('breachCdo', indexNumber)",
													"    pm.collectionVariables.set('breachCdoId', dogId)",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"owner\": {\n        \"firstName\": \"{{$randomFirstName}}\",\n        \"lastName\": \"{{$randomLastName}}\",\n        \"personReference\": null,\n        \"address\": {\n            \"addressLine1\": \"{{$randomStreetAddress}}\",\n            \"town\": \"{{$randomCity}}\",\n            \"postcode\": \"EC3N 2NU\",\n            \"country\": \"England\"\n        }\n    },\n    \"enforcementDetails\": {\n        \"court\": null,\n        \"policeForce\": \"5\",\n        \"legislationOfficer\": \"\"\n    },\n    \"dogs\": [\n        {\n            \"breed\": \"Pit Bull Terrier\",\n            \"name\": \"\",\n            \"applicationType\": \"cdo\",\n            \"cdoIssued\": \"2024-01-01T00:00:00.000Z\",\n            \"cdoExpiry\": \"2024-04-19T00:00:00.000Z\",\n            \"interimExemption\": null\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/cdo",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"cdo"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Breaches",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('should return 200 and list of breach types', () => {",
											"    const { breachCategories } = pm.response.json()",
											"    const breach = breachCategories[0]",
											"    pm.expect(breach.id).to.be.a('number')",
											"    pm.expect(breach.label).to.be.a('string')",
											"    pm.expect(breach.short_name).to.be.a('string')",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/breaches/categories",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"breaches",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set Dog breaches",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"response returns an owner\", function () {",
											"    const indexNumber = pm.collectionVariables.get('breachCdo')",
											"    const dog = pm.response.json();",
											"    pm.expect(dog.id).to.be.a('number')",
											"    pm.expect(dog.indexNumber).to.eq(indexNumber)",
											"    pm.expect(dog.breaches.includes(\"dog not covered by third party insurance\")).to.be.true",
											"",
											"    pm.expect(dog.breaches.includes(\"dog not kept on lead or muzzled\")).to.be.true",
											"    pm.expect(dog.breaches.includes(\"dog kept in insecure place\")).to.be.true",
											"    pm.expect(dog.breaches.length).to.eq(3)",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "ddi-username",
										"value": "internal-user"
									},
									{
										"key": "ddi-displayname",
										"value": "User, Internal"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"indexNumber\": \"{{breachCdo}}\",\n    \"dogBreaches\": [\n        \"NOT_COVERED_BY_INSURANCE\",\n        \"NOT_ON_LEAD_OR_MUZZLED\",\n        \"INSECURE_PLACE\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/breaches/dog:setBreaches",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"breaches",
										"dog:setBreaches"
									]
								}
							},
							"response": []
						},
						{
							"name": "/cdo/:index-number returns a 200 and valid cdo Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"response returns dog breaches\", function () {",
											"    const dog = pm.response.json().cdo.dog;",
											"    pm.expect(dog.breaches).to.be.an('array')",
											"    pm.expect(dog.breaches).to.have.length(3)",
											"    pm.expect(dog.breaches[0]).to.eq('dog not covered by third party insurance')",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "ddi-username",
										"value": "internal-user"
									},
									{
										"key": "ddi-displayname",
										"value": "User, Internal"
									}
								],
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/cdo/{{breachCdo}}",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"cdo",
										"{{breachCdo}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Change from In breach to Failed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "ddi-username",
										"value": "internal-user"
									},
									{
										"key": "ddi-displayname",
										"value": "User, Internal"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"dogId\": \"{{breachCdoId}}\",\n    \"indexNumber\": \"{{breachCdo}}\",\n    \"breed\": \"Pit Bull Terrier\",\n    \"name\": \"\",\n    \"applicationType\": \"cdo\",\n    \"cdoIssued\": \"2024-01-01T00:00:00.000Z\",\n    \"cdoExpiry\": \"2024-04-19T00:00:00.000Z\",\n    \"interimExemption\": null,\n    \"status\": \"Failed\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/dog",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"dog"
									]
								}
							},
							"response": []
						},
						{
							"name": "Failed CDO should not retain breaches",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"response returns 0 dog breaches\", function () {",
											"    const dog = pm.response.json().cdo.dog;",
											"    pm.expect(dog.breaches).to.have.length(0)",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "ddi-username",
										"value": "internal-user"
									},
									{
										"key": "ddi-displayname",
										"value": "User, Internal"
									}
								],
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/cdo/{{breachCdo}}",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"cdo",
										"{{breachCdo}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "User",
					"item": [
						{
							"name": "POST /user",
							"item": [
								{
									"name": "204 - add new user without police force",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"creates a user\", function () {",
													"    pm.response.to.have.status(201);",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData.username).to.eq('user@example.com')",
													"    pm.expect(jsonData.active).to.be.true;",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"user@example.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/user",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "204 - add new user with police force",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"creates a user\", function () {",
													"    pm.response.to.have.status(201);",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData.username).to.eq('alpha@police.org')",
													"    pm.expect(jsonData.active).to.be.true;",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"alpha@police.org\",\n    \"police_force\": \"Alpha Police Force\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/user",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "204 - add new user with police force id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"creates a user\", function () {",
													"    pm.response.to.have.status(201);",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData.username).to.eq('police-user@example.com')",
													"    pm.expect(jsonData.active).to.be.true;",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"police-user@example.com\",\n    \"police_force_id\": \"1\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/user",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "409 - add duplicate user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"creates a user\", function () {",
													"    pm.response.to.have.status(409);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"user@example.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/user",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 - add user to police force that does not exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"creates a user\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"police-force-2@example.com\",\n    \"police_force\": \"unknown\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/user",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "/users",
							"item": [
								{
									"name": "200 - bulk add police users - success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"creates a user\", function () {",
													"    pm.response.to.have.status(200);",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData.users[0].username).to.eq('joe.bloggs@hampshire.police.uk')",
													"    pm.expect(jsonData.users[0].police_force_id).to.be.above(1)",
													"    pm.expect(jsonData.users[1].username).to.eq('jane.doe@hampshire.pnn.police.uk')",
													"    pm.expect(jsonData.users[1].police_force_id).to.equal(jsonData.users[0].police_force_id)",
													"    pm.expect(jsonData.users[2].username).to.eq('john.smith@example.com')",
													"    pm.expect(jsonData.users[2].police_force_id).to.be.undefined",
													"    pm.expect(jsonData.errors).to.be.undefined",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"users\": [\n        {\n            \"username\": \"joe.bloggs@hampshire.police.uk\"\n        },\n        {\n            \"username\": \"jane.doe@hampshire.pnn.police.uk\"\n        },\n        {\n            \"username\": \"john.smith@example.com\"\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/users",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - bulk add police users - partial success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"creates a user\", function () {",
													"    pm.response.to.have.status(400);",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData.users[0].username).to.eq('joe.bloggs@btp.police.uk')",
													"    pm.expect(jsonData.users.length).to.eq(2)",
													"    pm.expect(jsonData.errors.length).to.eq(1)",
													"    pm.expect(jsonData.errors[0].username).to.eq('joe.bloggs@hampshire.police.uk')",
													"    pm.expect(jsonData.errors[0].statusCode).to.eq(409)",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"users\": [\n        {\n            \"username\": \"joe.bloggs@hampshire.police.uk\"\n        },\n        {\n            \"username\": \"joe.bloggs@btp.police.uk\"\n        },\n        {\n            \"username\": \"jane.bloggs@example.com\"\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/users",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "409 - bulk add police users - full failure duplicate",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"creates a user\", function () {",
													"    pm.response.to.have.status(409);",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData.errors[0].username).to.eq('joe.bloggs@hampshire.police.uk')",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"users\": [\n        {\n            \"username\": \"joe.BLOGGS@hampshire.police.uk\"\n        },\n        {\n            \"username\": \"jane.bloggs@example.com\"\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/users",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - returns list of users",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"gets a list of users\", function () {",
													"    pm.response.to.have.status(200);",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData.users[0].username).to.contain('@')",
													"    pm.expect(jsonData.users[0].id).to.be.a('number')",
													"    pm.expect(jsonData.users[0].id).to.be.above(0)",
													"    pm.expect(jsonData.users.some(user => user.username === 'joe.bloggs@hampshire.police.uk')).to.be.true",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/users",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "me/validate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/user/me/validate",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"user",
										"me",
										"validate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Setup user to delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"creates a user\", function () {",
											"    pm.response.to.have.status(201);",
											"    const jsonData = pm.response.json();",
											"    pm.collectionVariables.set('accountToDelete', jsonData.id)",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"deleteme@example.com\",\n    \"police_force_id\": \"1\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/user",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Setup user to delete Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"creates a user\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"deleteme@example.com\",\n    \"police_force_id\": \"1\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/user/{{accountToDelete}}",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"user",
										"{{accountToDelete}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "me/validate - should fail without scopes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "jwt",
									"jwt": [
										{
											"key": "header",
											"value": "{\n    \"kid\": \"aphw-ddi-portal\",\n    \"typ\": \"JWT\"\n}",
											"type": "string"
										},
										{
											"key": "payload",
											"value": "{\n    \"scopes\": [],\n    \"aud\": \"aphw-ddi-api\",\n    \"username\": \"internal - user\" ,\n    \"displayname\": \"User, Internal\",\n    \"iss\": \"aphw-ddi-portal\"\n}",
											"type": "string"
										},
										{
											"key": "privateKey",
											"value": "-----BEGIN PRIVATE KEY-----\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDhWj5SRk7Y76mT\nTR+XDY3uo0LF0eTuplodWymhc1p2krU7s9bisngVkyBcdYQ2mJbITDQzgv0mYQrg\n1j7wEM+y+r8bm7u6jiyIIPGZleyDE4/Z+fACnDX7iaulurYuLaIF+NL0oedhVK3Q\njTAQCmwo+9aGRWaFy8voWHH6q1d/3auCMNBpvDMx6N7dHBEsuY7V0yNNH6xzi5WE\n4IcB5Yrcuv08DIcUdgmW2wjycCYwsHIbN5xwV4QxnjSlKGY36/s+j8cP8WdxY2ys\njLHgfLNvC9v0Gjc30Ld1EUTOV6hB3OjIm5vxx6yyYws9ggaHSTSZgRzohEx0rlI4\nKGpm8qyZAgMBAAECggEAHlYuNpg1bBnTW7uRqZ2PAlWjGwtXBNOLJRGNKKllP7of\nQLLElk8NQGZGgHvneQwQnFU538dd+ektdDgTT/ELbN45lOdhncse7pJ0w8a9iKW9\nA0yUxV0vHTYaz9wzQ0MsYR5uk7Up913ValJfaoFkrx278uZr104onJYvfd3MES/P\nAv/YYkqNppXytPcHVArGZG8cY9QMdqDMwHfr80xXpIXMIBQuNrVIJks3AyB+Tbdy\n87ETDw24tujOTB+39eJv4xDD67JMe1CgaPxXvMESCutdLPgZYUauXCHJnNdDJAaz\nPvQknklm6QBGOH8AqAbTq7+33n83vkoyM39h6xDeSQKBgQD2TXwB1FiqZlqi+YS2\nOYddCETp3IMFsdvsRHk1wOOluAI4PlEQBBqEjuw++8G8WtLakM0+QiMo/xN+h3ao\ndNoQ53ByIWKy/4z6HE1LOsGuFFfVNTInC/DtufcpdwSzQeiUsgTEqrGup7Oqn7pp\nZvIs+4DQKPzrY5Cx34PhSeu5DQKBgQDqOZmI3e6zQc90fRjrwYB/gO/TxF7WWndQ\nbHIoUcj7Au77ohpmORFt+Zo5rrvzpOvr2/OjgyDZZt92lf9Ff8w1mFj5UAwYbtiH\nulf1B5Sb0h/OYrZgXNpFWPaRmFM7tIeyTRJC7oa7KThFmArevy2PIzhbTu1LHZDO\n+HMqhTfGvQKBgEjBZLMppbNYHsfriu9FGR47Fhg6wh1Jh5xIMcHWI6jNLSKuDcX8\nYFTt3w1P0s+vyH81rNsKMFao2npSy5NBSTUbGJUuFXiokl1DRPXG+nVQnw1k9Fai\naV3fxAnklWfaPTjHSS9K+MeN1D2/hxIhjcIJ3OggY22o8JIKY2uGKXJ1AoGBAIxw\nEuXko93pZLkk1M9uy1wn9CSWRoLh5U5cZ6pTN12B6ccI8ClAqHm3Qki5w0oYJbja\nvd/ZnNWdf/k7gL6sHMY53YdG/qmbtMrU6S4q6GjxeU6nE1D9+4W/DMBJhAZ1fTNk\nUMG/ARuxYGMiAcqC+I8tf/oHffIe/ReMEol5LPNFAoGBAJL8Bkm4CdSfWviwDnSk\nQyCM2RN1K1fIA0WxMIk7zh9hpsrpojJvL6k/7WBQr58fGegd0vSauzZ6wu0/eBBT\nYAmRPJkXj6pEtKaaq+HvPbw2WF332D2VJ3MSdNpLODebxd/VajefyDW6Tp3nv5GZ\nqbi6nTXSSeQg4IsVbs9BDIpU\n-----END PRIVATE KEY-----",
											"type": "string"
										},
										{
											"key": "algorithm",
											"value": "RS256",
											"type": "string"
										},
										{
											"key": "isSecretBase64Encoded",
											"value": false,
											"type": "boolean"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "Bearer",
											"type": "string"
										},
										{
											"key": "queryParamKey",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/user/me/validate",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"user",
										"me",
										"validate"
									]
								}
							},
							"response": []
						},
						{
							"name": "me/cache - Delete user cache",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/user/me/cache",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"user",
										"me",
										"cache"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "countries",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"response returns list of countries\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.countries).to.have.lengthOf(3)",
									"    pm.expect(jsonData.countries).to.deep.eq(['England', 'Scotland', 'Wales'])",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{DDI_API_BASE_URL}}/countries",
							"host": [
								"{{DDI_API_BASE_URL}}"
							],
							"path": [
								"countries"
							]
						}
					},
					"response": []
				},
				{
					"name": "healthy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.have.body(\"ok\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{DDI_API_BASE_URL}}/healthy",
							"host": [
								"{{DDI_API_BASE_URL}}"
							],
							"path": [
								"healthy"
							]
						}
					},
					"response": []
				},
				{
					"name": "healthz",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.have.body(\"ok\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{DDI_API_BASE_URL}}/healthz",
							"host": [
								"{{DDI_API_BASE_URL}}"
							],
							"path": [
								"healthz"
							]
						}
					},
					"response": []
				},
				{
					"name": "counties",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response returns a list of counties including City of London\", function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.counties.length > 50).to.be.true;",
									"    pm.expect(jsonData.counties.some(county => county === 'City of London')).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{DDI_API_BASE_URL}}/counties",
							"host": [
								"{{DDI_API_BASE_URL}}"
							],
							"path": [
								"counties"
							]
						}
					},
					"response": []
				},
				{
					"name": "counties Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response returns a list of counties including City of London\", function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.counties.length > 50).to.be.true;",
									"    pm.expect(jsonData.counties.some(county => county === 'City of London')).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{DDI_API_BASE_URL}}/counties",
							"host": [
								"{{DDI_API_BASE_URL}}"
							],
							"path": [
								"counties"
							]
						}
					},
					"response": []
				},
				{
					"name": "dog-breeds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response returns a list of Dog breeds in XL Bully\", function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    const breeds = jsonData.breeds",
									"    pm.expect(breeds.length > 4).to.be.true;",
									"    pm.expect(breeds.some(breed => breed.breed === 'XL Bully')).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{DDI_API_BASE_URL}}/dog-breeds",
							"host": [
								"{{DDI_API_BASE_URL}}"
							],
							"path": [
								"dog-breeds"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "jwt",
		"jwt": [
			{
				"key": "payload",
				"value": "{\n    \"scope\": [\"Dog.Index.Admin\"],\n    \"aud\": \"aphw-ddi-api\",\n    \"username\": \"internal - user\" ,\n    \"displayname\": \"User, Internal\",\n    \"iss\": \"aphw-ddi-portal\"\n}",
				"type": "string"
			},
			{
				"key": "privateKey",
				"value": "-----BEGIN PRIVATE KEY-----\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDhWj5SRk7Y76mT\nTR+XDY3uo0LF0eTuplodWymhc1p2krU7s9bisngVkyBcdYQ2mJbITDQzgv0mYQrg\n1j7wEM+y+r8bm7u6jiyIIPGZleyDE4/Z+fACnDX7iaulurYuLaIF+NL0oedhVK3Q\njTAQCmwo+9aGRWaFy8voWHH6q1d/3auCMNBpvDMx6N7dHBEsuY7V0yNNH6xzi5WE\n4IcB5Yrcuv08DIcUdgmW2wjycCYwsHIbN5xwV4QxnjSlKGY36/s+j8cP8WdxY2ys\njLHgfLNvC9v0Gjc30Ld1EUTOV6hB3OjIm5vxx6yyYws9ggaHSTSZgRzohEx0rlI4\nKGpm8qyZAgMBAAECggEAHlYuNpg1bBnTW7uRqZ2PAlWjGwtXBNOLJRGNKKllP7of\nQLLElk8NQGZGgHvneQwQnFU538dd+ektdDgTT/ELbN45lOdhncse7pJ0w8a9iKW9\nA0yUxV0vHTYaz9wzQ0MsYR5uk7Up913ValJfaoFkrx278uZr104onJYvfd3MES/P\nAv/YYkqNppXytPcHVArGZG8cY9QMdqDMwHfr80xXpIXMIBQuNrVIJks3AyB+Tbdy\n87ETDw24tujOTB+39eJv4xDD67JMe1CgaPxXvMESCutdLPgZYUauXCHJnNdDJAaz\nPvQknklm6QBGOH8AqAbTq7+33n83vkoyM39h6xDeSQKBgQD2TXwB1FiqZlqi+YS2\nOYddCETp3IMFsdvsRHk1wOOluAI4PlEQBBqEjuw++8G8WtLakM0+QiMo/xN+h3ao\ndNoQ53ByIWKy/4z6HE1LOsGuFFfVNTInC/DtufcpdwSzQeiUsgTEqrGup7Oqn7pp\nZvIs+4DQKPzrY5Cx34PhSeu5DQKBgQDqOZmI3e6zQc90fRjrwYB/gO/TxF7WWndQ\nbHIoUcj7Au77ohpmORFt+Zo5rrvzpOvr2/OjgyDZZt92lf9Ff8w1mFj5UAwYbtiH\nulf1B5Sb0h/OYrZgXNpFWPaRmFM7tIeyTRJC7oa7KThFmArevy2PIzhbTu1LHZDO\n+HMqhTfGvQKBgEjBZLMppbNYHsfriu9FGR47Fhg6wh1Jh5xIMcHWI6jNLSKuDcX8\nYFTt3w1P0s+vyH81rNsKMFao2npSy5NBSTUbGJUuFXiokl1DRPXG+nVQnw1k9Fai\naV3fxAnklWfaPTjHSS9K+MeN1D2/hxIhjcIJ3OggY22o8JIKY2uGKXJ1AoGBAIxw\nEuXko93pZLkk1M9uy1wn9CSWRoLh5U5cZ6pTN12B6ccI8ClAqHm3Qki5w0oYJbja\nvd/ZnNWdf/k7gL6sHMY53YdG/qmbtMrU6S4q6GjxeU6nE1D9+4W/DMBJhAZ1fTNk\nUMG/ARuxYGMiAcqC+I8tf/oHffIe/ReMEol5LPNFAoGBAJL8Bkm4CdSfWviwDnSk\nQyCM2RN1K1fIA0WxMIk7zh9hpsrpojJvL6k/7WBQr58fGegd0vSauzZ6wu0/eBBT\nYAmRPJkXj6pEtKaaq+HvPbw2WF332D2VJ3MSdNpLODebxd/VajefyDW6Tp3nv5GZ\nqbi6nTXSSeQg4IsVbs9BDIpU\n-----END PRIVATE KEY-----",
				"type": "string"
			},
			{
				"key": "header",
				"value": "{\n    \"kid\": \"aphw-ddi-portal\",\n    \"typ\": \"JWT\"\n}",
				"type": "string"
			},
			{
				"key": "algorithm",
				"value": "RS256",
				"type": "string"
			},
			{
				"key": "isSecretBase64Encoded",
				"value": false,
				"type": "boolean"
			},
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			},
			{
				"key": "headerPrefix",
				"value": "Bearer",
				"type": "string"
			},
			{
				"key": "queryParamKey",
				"value": "token",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// const getDeleteRequest = (url) => {",
					"//     return {",
					"//         url,",
					"//         method: 'DELETE',",
					"//         header: {",
					"//             'ddi-username': 'internal-user',",
					"//             'ddi-displayname':'User, Internal'",
					"//         }",
					"//     };",
					"// }",
					"",
					"// (async () => {",
					"//     const insuranceTeardown = JSON.parse(pm.collectionVariables.get('insuranceTeardown'))",
					"//     const policeTeardown = JSON.parse(pm.collectionVariables.get('policeTeardown'))",
					"//     const baseURL = pm.environment.get('DDI_API_BASE_URL')",
					"",
					"//     for (const insuranceId of insuranceTeardown) {",
					"//         pm.sendRequest(getDeleteRequest(`${baseURL}/insurance/companies/${insuranceId}`), function (err, response) {",
					"//                 if (err) {",
					"//                     console.log(`Insurance Id DELETE failed - ${insuranceId}`, err)",
					"//                 }",
					"//         });",
					"//     }",
					"",
					"//     for (const policeId of policeTeardown) {",
					"//         pm.sendRequest(getDeleteRequest(`${baseURL}/police-forces/${policeId}`), function (err, response) {",
					"//                 if (err) {",
					"//                     console.log(`Police Id DELETE failed - ${policeId}`, err)",
					"//                 }",
					"//         });",
					"//     }",
					"    ",
					"//     for (const courtId of courtTeardown) {",
					"//         pm.sendRequest(getDeleteRequest(`${baseURL}/courts/${courtId}`), function (err, response) {",
					"//                 if (err) {",
					"//                     console.log(`Court Id DELETE failed - ${courtId}`, err)",
					"//                 }",
					"//         });",
					"//     }",
					"// })()"
				]
			}
		}
	],
	"variable": [
		{
			"key": "dogId1",
			"value": ""
		},
		{
			"key": "index-number",
			"value": "",
			"type": "string"
		},
		{
			"key": "reference",
			"value": "",
			"type": "string"
		},
		{
			"key": "owner",
			"value": ""
		},
		{
			"key": "duplicateFirstName",
			"value": ""
		},
		{
			"key": "duplicateLastName",
			"value": ""
		},
		{
			"key": "ownerWithoutBirthDateRef",
			"value": "",
			"type": "string"
		},
		{
			"key": "dogIndexToDelete",
			"value": "",
			"type": "string"
		},
		{
			"key": "courtId",
			"value": "",
			"type": "string"
		},
		{
			"key": "cdosToDelete",
			"value": "",
			"type": "string"
		},
		{
			"key": "welshCdo",
			"value": "P-F2AC-29E3",
			"type": "string"
		},
		{
			"key": "policeId",
			"value": "",
			"type": "string"
		},
		{
			"key": "dogIndexNumberChange",
			"value": ""
		},
		{
			"key": "courtToDeleteId",
			"value": "",
			"type": "string"
		},
		{
			"key": "dogIndexNumberWithDeletedCourt",
			"value": "",
			"type": "string"
		},
		{
			"key": "policeToBeDeleted",
			"value": ""
		},
		{
			"key": "insuranceId",
			"value": "",
			"type": "string"
		},
		{
			"key": "insuranceIdToDelete",
			"value": "",
			"type": "string"
		},
		{
			"key": "activityId",
			"value": ""
		},
		{
			"key": "insuranceTeardown",
			"value": "",
			"type": "string"
		},
		{
			"key": "insuranceCollisionId",
			"value": ""
		},
		{
			"key": "policeTeardown",
			"value": "",
			"type": "string"
		},
		{
			"key": "policeCollisionId",
			"value": "",
			"type": "string"
		},
		{
			"key": "courtsTeardown",
			"value": "",
			"type": "string"
		},
		{
			"key": "courtsCollisionId",
			"value": "",
			"type": "string"
		},
		{
			"key": "courtsCollisionId1",
			"value": "",
			"type": "string"
		},
		{
			"key": "insuranceCollisionId1",
			"value": "",
			"type": "string"
		},
		{
			"key": "policeCollisionId1",
			"value": "",
			"type": "string"
		},
		{
			"key": "orphanedOwners",
			"value": "[]"
		},
		{
			"key": "orphanedOwnersToDelete",
			"value": ""
		},
		{
			"key": "dogDeleteIndexToDelete",
			"value": ""
		},
		{
			"key": "oldDog1",
			"value": ""
		},
		{
			"key": "oldDog2",
			"value": ""
		},
		{
			"key": "batchDeleteDogs",
			"value": ""
		},
		{
			"key": "purgeDogs",
			"value": "[]",
			"type": "string"
		},
		{
			"key": "purgeOwners",
			"value": "[]",
			"type": "string"
		},
		{
			"key": "manageCdo",
			"value": "{}",
			"type": "string"
		},
		{
			"key": "manageCdoPk",
			"value": "",
			"type": "string"
		},
		{
			"key": "breachCdo",
			"value": "",
			"type": "string"
		},
		{
			"key": "insuranceExpiredDog",
			"value": ""
		},
		{
			"key": "insuranceExpiredDogId",
			"value": ""
		},
		{
			"key": "breachCdoId",
			"value": ""
		},
		{
			"key": "manageCdoMicrochip",
			"value": ""
		},
		{
			"key": "accountToDelete",
			"value": ""
		}
	]
}