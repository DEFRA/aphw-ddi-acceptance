{
	"info": {
		"_postman_id": "5e45eb9e-2dde-4e95-bded-f2b78abb4073",
		"name": "aphw-ddi-api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12107479"
	},
	"item": [
		{
			"name": "CDO",
			"item": [
				{
					"name": "User can add a Cdo and view Cdo, Dog and Owner",
					"item": [
						{
							"name": "A change from interim exempt without cdo expiry should have default expiry",
							"item": [
								{
									"name": "/cdo create interim exempt",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"setup id details\", function () {",
													"    const dogs = pm.response.json().dogs;",
													"    const dog = dogs[0]",
													"    pm.collectionVariables.set(\"dogIndexNumberChange\",  dog.indexNumber);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"owner\": {\n    \"firstName\": \"Super\",\n    \"lastName\": \"Mario\",\n    \"personReference\": null,\n    \"address\": {\n      \"addressLine1\": \"802 SLOANE AVENUE\",\n      \"town\": \"LONDON\",\n      \"postcode\": \"SW3 3ER\",\n      \"country\": \"England\"\n    }\n  },\n  \"enforcementDetails\": {\n    \"court\": null,\n    \"policeForce\": \"30\",\n    \"legislationOfficer\": \"\"\n  },\n  \"dogs\": [\n    {\n      \"breed\": \"XL Bully\",\n      \"name\": \"Francis\",\n      \"applicationType\": \"interim-exemption\",\n      \"cdoIssued\": null,\n      \"cdoExpiry\": null,\n      \"interimExemption\": \"2024-05-08T00:00:00.000Z\"\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/cdo",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"cdo"
											]
										}
									},
									"response": []
								},
								{
									"name": "/exemption should add default expiry date",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"response returns a dog\", function () {",
													"    const exemption = pm.response.json();",
													"    pm.expect(exemption.cdo_expiry).not.to.be.null",
													"    pm.expect(exemption.cdo_expiry).contains('2024-07-01')",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"indexNumber\": \"{{dogIndexNumberChange}}\",\n    \"cdoIssued\": \"2024-05-01T00:00:00.000Z\",\n    \"cdoExpiry\": null,\n    \"court\": \"\",\n    \"policeForce\": \"Metropolitan Police Service\",\n    \"legislationOfficer\": \"\",\n    \"joinedExemptionScheme\": \"2024-05-08T00:00:00.000Z\",\n    \"exemptionOrder\": 2015\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/exemption",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"exemption"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Deleted Court still shows on CDO",
							"item": [
								{
									"name": "Setup - add court for test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"response returns the created court\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.collectionVariables.set('courtToDeleteId', jsonData.id)",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"City of Gotham State District Courthouse\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/courts",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"courts"
											]
										}
									},
									"response": []
								},
								{
									"name": "Setup - add police force",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"response returns the created Police Force\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.collectionVariables.set('policeToBeDeleted', jsonData.id)",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Gotham City Police Department\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/police-forces",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"police-forces"
											]
										}
									},
									"response": []
								},
								{
									"name": "Setup - add insurance company",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"save Insurance Company id\", function () {",
													"    const jsonData = pm.response.json();",
													"       pm.collectionVariables.set('insuranceIdToDelete', jsonData.id)",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Gotham City Pets R Us\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/insurance/companies",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"insurance",
												"companies"
											]
										}
									},
									"response": []
								},
								{
									"name": "/cdo create interim exempt",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"setup id details\", function () {",
													"    const dogs = pm.response.json().dogs;",
													"    const dog = dogs[0]",
													"    pm.collectionVariables.set(\"dogIndexNumberWithDeletedCourt\",  dog.indexNumber);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"owner\": {\n    \"firstName\": \"Bruce\",\n    \"lastName\": \"Wayne\",\n    \"personReference\": null,\n    \"address\": {\n      \"addressLine1\": \"802 SLOANE AVENUE\",\n      \"town\": \"Metropolis\",\n      \"postcode\": \"SW3 3ER\",\n      \"country\": \"England\"\n    }\n  },\n  \"enforcementDetails\": {\n    \"court\": \"{{courtToDeleteId}}\",\n    \"policeForce\": \"{{policeToBeDeleted}}\",\n    \"legislationOfficer\": \"\"\n  },\n  \"dogs\": [\n    {\n      \"breed\": \"XL Bully\",\n      \"name\": \"Ace the Bat-Hound\",\n      \"applicationType\": \"interim-exemption\",\n      \"cdoIssued\": null,\n      \"cdoExpiry\": null,\n      \"interimExemption\": \"2024-05-08T00:00:00.000Z\"\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/cdo",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"cdo"
											]
										}
									},
									"response": []
								},
								{
									"name": "/exemption returns 200 Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"response returns a dog\", function () {",
													"    const exemption = pm.response.json();",
													"    pm.expect(exemption.dog_id).to.eq(parseInt(pm.collectionVariables.get('index-number').replace('ED','')))",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"exemptionOrder\": 2023,\n  \"indexNumber\": \"{{dogIndexNumberWithDeletedCourt}}\",\n  \"cdoIssued\": null,\n  \"cdoExpiry\": null,\n  \"policeForce\": \"Gotham City Police Department\",\n  \"legislationOfficer\": \"Commissioner James Gordon\",\n  \"certificateIssued\": \"2020-03-01\",\n  \"applicationFeePaid\": \"2020-03-01\",\n  \"neuteringConfirmation\": \"2020-04-01\",\n  \"microchipVerification\": \"2020-04-01\",\n  \"joinedExemptionScheme\": \"2020-05-01\",\n  \"insurance\": {\n    \"company\": \"Gotham City Pets R Us\",\n    \"renewalDate\": \"2020-06-01\"\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/exemption",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"exemption"
											]
										}
									},
									"response": []
								},
								{
									"name": "/courts/:court-id Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/courts/{{courtToDeleteId}}",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"courts",
												"{{courtToDeleteId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/police-forces/:police-id Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(204);",
													"    const body = pm.response.body",
													"    pm.expect(body).to.eq(undefined)",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/police-forces/{{policeToBeDeleted}}",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"police-forces",
												"{{policeToBeDeleted}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/insurance/companies Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(204);",
													"    const body = pm.response.body",
													"    pm.expect(body).to.eq(undefined)",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/insurance/companies/{{insuranceIdToDelete}}",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"insurance",
												"companies",
												"{{insuranceIdToDelete}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/cdo/:index-number returns a 200 and valid cdo Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"response returns an exemption\", function () {",
													"    const exemption = pm.response.json().cdo.exemption;",
													"    pm.expect(exemption.court).to.eq(\"City of Gotham State District Courthouse\")",
													"    pm.expect(exemption.policeForce).to.eq(\"Gotham City Police Department\")",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/cdo/{{dogIndexNumberWithDeletedCourt}}",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"cdo",
												"{{dogIndexNumberWithDeletedCourt}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/cdos - with Pre-Exempt status Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const hasSoftDeletePoliceForce = cdo => {",
													"    return cdo.exemption.policeForce === 'Gotham City Police Department'",
													"}",
													"",
													"const cdos = pm.response.json().cdos;",
													"",
													"",
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(200);",
													"})",
													"",
													"pm.test(\"has soft delete policeForce\", function () {",
													"    pm.expect(cdos.some(hasSoftDeletePoliceForce)).to.be.true;",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/cdos?status=InterimExempt",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"cdos"
											],
											"query": [
												{
													"key": "status",
													"value": "InterimExempt"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											"console.log(pm.collectionVariables.get('courtToDeleteId'))"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "/cdo submits a valid CDO",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let cdoPostIndex = pm.environment.get(\"cdoPostIndex\");",
											"",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"response returns an owner\", function () {",
											"    const owner = pm.response.json().owner;",
											"    pm.expect(owner).to.deep.include({",
											"        \"firstName\": `Homer${cdoPostIndex}`,",
											"        \"lastName\": `Simpson${cdoPostIndex}`,",
											"        \"birthDate\": \"1998-05-10\",",
											"        \"address\": {",
											"            \"addressLine1\": `${cdoPostIndex} Anywhere St`,",
											"            \"addressLine2\": \"Anywhere Estate\",",
											"            \"town\": \"City of London\",",
											"            \"postcode\": \"S1 1AA\",",
											"            \"country\": \"England\"",
											"        }",
											"    })",
											"    pm.expect(owner.personReference).to.be.a('string')",
											"});",
											"",
											"pm.test(\"response returns enforcement details\", function () {",
											"    const enforcementDetails = pm.response.json().enforcementDetails;",
											"    pm.expect(enforcementDetails.policeForce).to.be.a('string')",
											"    pm.expect(enforcementDetails.court).to.be.a('string')",
											"    pm.expect(enforcementDetails.legislationOfficer).to.equal('Sidney Lewis')",
											"});",
											"",
											"pm.test(\"dog details\", function () {",
											"    const dogs = pm.response.json().dogs;",
											"    const dog = dogs[0]",
											"    pm.expect(dogs).to.have.length(1)",
											"    pm.expect(dog.indexNumber.startsWith('ED3')).to.be.true",
											"    pm.expect(dog.name).to.eq(`Rex${cdoPostIndex}`)",
											"    pm.expect(dog.status).to.eq('Interim exempt')",
											"    pm.expect(dog.breed).to.eq('XL Bully')",
											"    pm.expect(dog.cdoIssued).to.eq('2023-10-10')",
											"    pm.expect(dog.cdoExpiry).to.eq('2023-12-10')",
											"    pm.expect(dog.interimExemption).to.eq('2023-12-10')",
											"    pm.collectionVariables.set(\"index-number\",  dog.indexNumber);",
											"});",
											"",
											"cdoPostIndex++",
											"pm.environment.set(\"cdoPostIndex\", cdoPostIndex);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "ddi-username",
										"value": "internal-user"
									},
									{
										"key": "ddi-displayname",
										"value": "User, Internal"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"owner\": {\n    \"firstName\": \"Homer{{cdoPostIndex}}\",\n    \"lastName\": \"Simpson{{cdoPostIndex}}\",\n    \"dateOfBirth\": \"1998-05-10\",\n    \"address\": {\n      \"addressLine1\": \"{{cdoPostIndex}} Anywhere St\",\n      \"addressLine2\": \"Anywhere Estate\",\n      \"town\": \"City of London\",\n      \"postcode\": \"S1 1AA\"\n    }\n  },\n  \"enforcementDetails\": {\n    \"court\": \"1\",\n    \"policeForce\": \"1\",\n    \"legislationOfficer\": \"Sidney Lewis\"\n  },\n  \"dogs\": [\n    {\n      \"breed\": \"XL Bully\",\n      \"name\": \"Rex{{cdoPostIndex}}\",\n      \"applicationType\": \"cdo\",\n      \"cdoIssued\": \"2023-10-10\",\n      \"cdoExpiry\": \"2023-12-10\",\n      \"interimExemption\": \"2023-12-10\",\n      \"status\": \"Status 1\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/cdo",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"cdo"
									]
								}
							},
							"response": []
						},
						{
							"name": "/cdo submits a valid CDO with different country",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let cdoPostIndex = pm.environment.get(\"cdoPostIndex\");",
											"",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"response returns an owner\", function () {",
											"    const owner = pm.response.json().owner;",
											"    pm.expect(owner.address.country).to.equal('Wales')",
											"    pm.collectionVariables.set('welshCdo', owner.personReference)",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "ddi-username",
										"value": "internal-user"
									},
									{
										"key": "ddi-displayname",
										"value": "User, Internal"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"owner\": {\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"dateOfBirth\": \"1998-05-10\",\n    \"address\": {\n      \"addressLine1\": \"{{$randomStreetAddress}}\",\n      \"addressLine2\": \"Anywhere Estate\",\n      \"town\": \"{{$randomCity}}\",\n      \"postcode\": \"S1 1AA\",\n      \"country\": \"Wales\"\n    }\n  },\n  \"enforcementDetails\": {\n    \"court\": \"1\",\n    \"policeForce\": \"1\",\n    \"legislationOfficer\": \"Sidney Lewis\"\n  },\n  \"dogs\": [\n    {\n      \"breed\": \"XL Bully\",\n      \"name\": \"Rex{{cdoPostIndex}}\",\n      \"applicationType\": \"cdo\",\n      \"cdoIssued\": \"2023-10-10\",\n      \"cdoExpiry\": \"2023-12-10\",\n      \"interimExemption\": \"2023-12-10\",\n      \"status\": \"Status 1\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/cdo",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"cdo"
									]
								}
							},
							"response": []
						},
						{
							"name": "/cdo/:index-number returns a 200 and valid cdo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"response returns a person\", function () {",
											"    const owner = pm.response.json().cdo.person;",
											"    pm.expect(owner.id).to.be.a('number')",
											"    pm.expect(owner.firstName).to.be.a('string')",
											"});",
											"",
											"pm.test(\"response returns a dog\", function () {",
											"    const dog = pm.response.json().cdo.dog;",
											"    pm.expect(dog.id).to.be.a('number')",
											"    pm.expect(dog.indexNumber).to.eq(pm.collectionVariables.get('index-number'))",
											"});",
											"",
											"pm.test(\"response returns an exemption\", function () {",
											"    const exemption = pm.response.json().cdo.exemption;",
											"    pm.expect(exemption.exemptionOrder).to.be.a('string')",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "ddi-username",
										"value": "internal-user"
									},
									{
										"key": "ddi-displayname",
										"value": "User, Internal"
									}
								],
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/cdo/{{index-number}}",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"cdo",
										"{{index-number}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/cdo/:invalid-index returns a 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response returns a 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "ddi-username",
										"value": "internal-user"
									},
									{
										"key": "ddi-displayname",
										"value": "User, Internal"
									}
								],
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/cdo/ED000018",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"cdo",
										"ED000018"
									]
								}
							},
							"response": []
						},
						{
							"name": "/dog/:index-number returns 200 and a valid dog",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let cdoPostIndex = pm.environment.get(\"cdoPostIndex\");",
											"",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"response returns a dog\", function () {",
											"    const dog = pm.response.json().dog;",
											"    pm.expect(dog.id).to.be.a('number')",
											"    pm.expect(dog.indexNumber).to.eq(pm.collectionVariables.get('index-number'))",
											"    pm.expect(dog.name).to.be.a('string')",
											"    pm.expect(dog.breed).to.be.oneOf(['XL Bully', 'Pit Bull Terrier','Japanese Tosa','Dogo Argentino','Fila Brasileiro'])",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "ddi-username",
										"value": "internal-user"
									},
									{
										"key": "ddi-displayname",
										"value": "User, Internal"
									}
								],
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/dog/{{index-number}}",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"dog",
										"{{index-number}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/dog/:invalid-index-number returns a 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response is not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "ddi-username",
										"value": "internal-user"
									},
									{
										"key": "ddi-displayname",
										"value": "User, Internal"
									}
								],
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/dog/ED000018",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"dog",
										"ED000018"
									]
								}
							},
							"response": []
						},
						{
							"name": "/dog-owner/:index-number",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"response returns the owner\", function () {",
											"    const owner = pm.response.json().owner;",
											"    pm.expect(owner.personReference).to.be.a('string')",
											"    pm.collectionVariables.set('reference', owner.personReference)",
											"    pm.collectionVariables.set('owner', JSON.stringify(owner))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "ddi-username",
										"value": "internal-user"
									},
									{
										"key": "ddi-displayname",
										"value": "User, Internal"
									}
								],
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/dog-owner/{{index-number}}",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"dog-owner",
										"{{index-number}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/dog-owner/:invalid-index-number returns a 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response is not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "ddi-username",
										"value": "internal-user"
									},
									{
										"key": "ddi-displayname",
										"value": "User, Internal"
									}
								],
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/dog-owner/ED000018",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"dog-owner",
										"ED000018"
									]
								}
							},
							"response": []
						},
						{
							"name": "/dog returns 200",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"response returns a dog\", function () {",
											"    const dog = pm.response.json();",
											"    pm.expect(dog.index_number).to.eq(pm.collectionVariables.get('index-number'))",
											"    pm.expect(dog.name).to.eq('Rex alive')",
											"    pm.expect(dog.status.status).to.equal('Interim exempt')",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "ddi-username",
										"value": "internal-user"
									},
									{
										"key": "ddi-displayname",
										"value": "User, Internal"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"dogId\": \"{{index-number}}\",\n    \"indexNumber\": \"{{index-number}}\",\n    \"breed\": \"XL Bully\",\n    \"name\": \"Rex alive\",\n    \"applicationType\": \"cdo\",\n    \"cdoIssued\": \"2023-10-10\",\n    \"cdoExpiry\": \"2023-12-10\",\n    \"interimExemption\": \"2023-12-10\",\n    \"status\": \"Interim exempt\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/dog",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"dog"
									]
								}
							},
							"response": []
						},
						{
							"name": "/person/:reference should get person data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"response returns the owner\", function () {",
											"    const owner = pm.response.json();",
											"    pm.expect(owner.personReference).to.eq(pm.collectionVariables.get('reference'))",
											"    pm.expect(owner.firstName).to.be.a('string')",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "ddi-username",
										"value": "internal-user"
									},
									{
										"key": "ddi-displayname",
										"value": "User, Internal"
									}
								],
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/person/{{reference}}",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"person",
										"{{reference}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/person/:invalid-reference should return a 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "ddi-username",
										"value": "internal-user"
									},
									{
										"key": "ddi-displayname",
										"value": "User, Internal"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"personReference\": \"invalid\",\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"{{$randomLastName}}\",\n  \"dateOfBirth\": \"{{$isoTimestamp}}\",\n  \"address\": {\n    \"addressLine1\": \"{{$randomStreetAddress}}\",\n    \"town\": \"{{$randomCity}}\",\n    \"postcode\": \"SN1 1AA\",\n    \"country\": \"England\"\n  },\n  \"email\": \"{{$randomExampleEmail}}\",\n  \"primaryTelephone\": \"{{$randomPhoneNumber}}\",\n  \"secondaryTelephone\": \"{{$randomPhoneNumber}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/person",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"person"
									]
								}
							},
							"response": []
						},
						{
							"name": "/cdo submits a valid CDO with an existing owner",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let cdoPostIndex = pm.environment.get(\"cdoPostIndex\");",
											"",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"response returns an owner\", function () {",
											"    const owner = pm.response.json().owner;",
											"    const request = JSON.parse(pm.request.body.raw)",
											"    pm.expect(owner.personReference).to.eq(request.owner.personReference)",
											"",
											"    ",
											"    pm.expect(owner.firstName).to.be.a('string')",
											"    pm.expect(owner.lastName).to.be.a('string')",
											"    pm.expect(owner.address.addressLine1).to.be.a('string')",
											"    pm.expect(owner.address.country).to.eq('Wales')",
											"    pm.expect(owner.personReference).to.eq(pm.collectionVariables.get('welshCdo'))",
											"});",
											"",
											"cdoPostIndex++",
											"pm.environment.set(\"cdoPostIndex\", cdoPostIndex);",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "ddi-username",
										"value": "internal-user"
									},
									{
										"key": "ddi-displayname",
										"value": "User, Internal"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"owner\": {\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"dateOfBirth\": \"{{$isoTimestamp}}\",\n    \"address\": {\n      \"addressLine1\": \"{{$randomStreetAddress}}\",\n      \"addressLine2\": \"Anywhere Estate\",\n      \"town\": \"City of London\",\n      \"postcode\": \"S1 1AA\",\n      \"country\": \"England\"\n    },\n    \"personReference\": \"{{welshCdo}}\"\n  },\n  \"enforcementDetails\": {\n    \"court\": \"1\",\n    \"policeForce\": \"1\",\n    \"legislationOfficer\": \"Sidney Lewis\"\n  },\n  \"dogs\": [\n    {\n      \"breed\": \"XL Bully\",\n      \"name\": \"Rex{{cdoPostIndex}}\",\n      \"applicationType\": \"cdo\",\n      \"cdoIssued\": \"2023-10-10\",\n      \"cdoExpiry\": \"2023-12-10\",\n      \"interimExemption\": \"2023-12-10\",\n      \"status\": \"Status 1\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/cdo",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"cdo"
									]
								}
							},
							"response": []
						},
						{
							"name": "/cdo submits a valid CDO with an existing owner and existing dog",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let cdoPostIndex = pm.environment.get(\"cdoPostIndex\");",
											"",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"response returns an owner\", function () {",
											"    const owner = pm.response.json().owner;",
											"    const request = JSON.parse(pm.request.body.raw)",
											"    pm.expect(owner.personReference).to.eq(request.owner.personReference)",
											"",
											"    ",
											"    pm.expect(owner.firstName).to.be.a('string')",
											"    pm.expect(owner.lastName).to.be.a('string')",
											"    pm.expect(owner.address.addressLine1).to.be.a('string')",
											"    pm.expect(owner.address.country).to.eq('Wales')",
											"    pm.expect(owner.personReference).to.eq(pm.collectionVariables.get('welshCdo'))",
											"});",
											"",
											"cdoPostIndex++",
											"pm.environment.set(\"cdoPostIndex\", cdoPostIndex);",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "ddi-username",
										"value": "internal-user"
									},
									{
										"key": "ddi-displayname",
										"value": "User, Internal"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"owner\": {\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"dateOfBirth\": \"{{$isoTimestamp}}\",\n    \"address\": {\n      \"addressLine1\": \"{{$randomStreetAddress}}\",\n      \"addressLine2\": \"Anywhere Estate\",\n      \"town\": \"City of London\",\n      \"postcode\": \"S1 1AA\",\n      \"country\": \"England\"\n    },\n    \"personReference\": \"{{welshCdo}}\"\n  },\n  \"enforcementDetails\": {\n    \"court\": \"1\",\n    \"policeForce\": \"1\",\n    \"legislationOfficer\": \"Sidney Lewis\"\n  },\n  \"dogs\": [\n    {\n      \"breed\": \"XL Bully\",\n      \"name\": \"Rex{{cdoPostIndex}}\",\n      \"applicationType\": \"cdo\",\n      \"cdoIssued\": \"2023-10-10\",\n      \"cdoExpiry\": \"2023-12-10\",\n      \"interimExemption\": \"2023-12-10\",\n      \"status\": \"Status 1\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/cdo",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"cdo"
									]
								}
							},
							"response": []
						},
						{
							"name": "/person/:reference should update person",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const isEdited = (str) => str.split(' ')[1] === 'EDITED'",
											"",
											"pm.test(\"response returns the owner\", function () {",
											"    const owner = pm.response.json();",
											"    pm.expect(owner.personReference).to.eq(pm.collectionVariables.get('reference'))",
											"    pm.expect(isEdited(owner.firstName)).to.be.true",
											"    pm.expect(isEdited(owner.lastName)).to.be.true",
											"    pm.expect(owner.address.addressLine1).to.contain('EDITED')",
											"    pm.expect(owner.address.country).to.eq('England')",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "ddi-username",
										"value": "internal-user"
									},
									{
										"key": "ddi-displayname",
										"value": "User, Internal"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"personReference\": \"{{reference}}\",\n  \"firstName\": \"{{$randomFirstName}} EDITED\",\n  \"lastName\": \"{{$randomLastName}} EDITED\",\n  \"dateOfBirth\": \"1998-05-10T00:00:00.000Z\",\n  \"address\": {\n    \"addressLine1\": \"{{$randomStreetAddress}} EDITED\",\n    \"town\": \"City of London\",\n    \"postcode\": \"S1 1AA\",\n    \"country\": \"England\"\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/person",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"person"
									]
								}
							},
							"response": []
						},
						{
							"name": "/activity should submit an activity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"response a list of dog activities\", function () {",
											"    const activity = pm.response.json()",
											"    pm.expect(activity.result).to.eq('ok')",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "ddi-username",
										"value": "internal-user"
									},
									{
										"key": "ddi-displayname",
										"value": "User, Internal"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"activity\":\"1\",\n  \"activityType\":\"sent\",\n  \"pk\":\"{{reference}}\",\n  \"source\":\"owner\",\n  \"activityDate\":\"2024-02-29T09:30:13.587Z\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/activity",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"activity"
									]
								}
							},
							"response": []
						},
						{
							"name": "/exemption returns 200",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"response returns a dog\", function () {",
											"    const exemption = pm.response.json();",
											"    pm.expect(exemption.dog_id).to.eq(parseInt(pm.collectionVariables.get('index-number').replace('ED','')))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "ddi-username",
										"value": "internal-user"
									},
									{
										"key": "ddi-displayname",
										"value": "User, Internal"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"exemptionOrder\": 2023,\n  \"indexNumber\": \"{{index-number}}\",\n  \"cdoIssued\": \"2020-01-01\",\n  \"cdoExpiry\": \"2020-02-01\",\n  \"policeForce\": \"Avon and Somerset Constabulary\",\n  \"legislationOfficer\": \"Test Officer\",\n  \"certificateIssued\": \"2020-03-01\",\n  \"applicationFeePaid\": \"2020-03-01\",\n  \"neuteringConfirmation\": \"2020-04-01\",\n  \"microchipVerification\": \"2020-04-01\",\n  \"joinedExemptionScheme\": \"2020-05-01\",\n  \"insurance\": {\n    \"company\": \"Dogs Trust\",\n    \"renewalDate\": \"2020-06-01\"\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/exemption",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"exemption"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Summary Cdos",
					"item": [
						{
							"name": "1-Setup",
							"item": [
								{
									"name": "Add Pre-Exempt Scott Pilgrim",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"owner\": {\n        \"firstName\": \"Scott\",\n        \"lastName\": \"Pilgrim\",\n        \"personReference\": null,\n        \"address\": {\n            \"addressLine1\": \"SHEAF STREET\",\n            \"town\": \"SHEFFIELD\",\n            \"postcode\": \"S1 2BP\",\n            \"country\": \"England\"\n        }\n    },\n    \"enforcementDetails\": {\n        \"court\": null,\n        \"policeForce\": \"5\",\n        \"legislationOfficer\": \"\"\n    },\n    \"dogs\": [\n        {\n            \"breed\": \"Pit Bull Terrier\",\n            \"name\": \"\",\n            \"applicationType\": \"cdo\",\n            \"cdoIssued\": \"2024-01-01T00:00:00.000Z\",\n            \"cdoExpiry\": \"2024-04-19T00:00:00.000Z\",\n            \"interimExemption\": null\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/cdo",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"cdo"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add  Pre-Exempt Ramona Flowers",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"owner\": {\n        \"firstName\": \"Ramona\",\n        \"lastName\": \"Flowers\",\n        \"personReference\": null,\n        \"address\": {\n            \"addressLine1\": \"FLAT 33, HOMEFERN HOUSE, COBBS PLACE\",\n            \"town\": \"MARGATE\",\n            \"postcode\": \"CT9 1JF\",\n            \"country\": \"England\"\n        }\n    },\n    \"enforcementDetails\": {\n        \"court\": null,\n        \"policeForce\": \"24\",\n        \"legislationOfficer\": \"\"\n    },\n    \"dogs\": [\n        {\n            \"breed\": \"Japanese Tosa\",\n            \"name\": \"\",\n            \"applicationType\": \"cdo\",\n            \"cdoIssued\": \"2024-01-01\",\n            \"cdoExpiry\": \"2024-04-21\",\n            \"interimExemption\": null\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/cdo",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"cdo"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add Pre-Exempt Che Adams",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"owner\": {\n        \"firstName\": \"Che\",\n        \"lastName\": \"Adams\",\n        \"personReference\": null,\n        \"address\": {\n            \"addressLine1\": \" 12A, MORANT ROAD\",\n            \"town\": \"RINGWOOD\",\n            \"postcode\": \"BH24 1SX\",\n            \"country\": \"England\"\n        }\n    },\n    \"enforcementDetails\": {\n        \"court\": null,\n        \"policeForce\": \"21\",\n        \"legislationOfficer\": \"\"\n    },\n    \"dogs\": [\n        {\n            \"breed\": \"Japanese Tosa\",\n            \"name\": \"\",\n            \"applicationType\": \"cdo\",\n            \"cdoIssued\": \"2024-01-01\",\n            \"cdoExpiry\": \"2024-05-31\",\n            \"interimExemption\": null\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/cdo",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"cdo"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add Interim exempt Ricardo Scimeca",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "ddi-username",
												"value": "internal-user"
											},
											{
												"key": "ddi-displayname",
												"value": "User, Internal"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"owner\": {\n        \"firstName\": \"Ricardo\",\n        \"lastName\": \"Scimeca\",\n        \"personReference\": null,\n        \"address\": {\n            \"addressLine1\": \"FLAT 1, FERRYMANS QUAY\",\n            \"town\": \"WILLIAM MORRIS WAY\",\n            \"postcode\": \"SW6 2UT\",\n            \"country\": \"England\"\n        }\n    },\n    \"enforcementDetails\": {\n        \"court\": null,\n        \"policeForce\": \"30\",\n        \"legislationOfficer\": \"\"\n    },\n    \"dogs\": [\n        {\n            \"breed\": \"Japanese Tosa\",\n            \"name\": \"\",\n            \"applicationType\": \"interim-exemption\",\n            \"cdoIssued\": null,\n            \"cdoExpiry\": null,\n            \"interimExemption\": \"2024-04-22\"\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/cdo",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"cdo"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "2-Tests",
							"item": [
								{
									"name": "Sorting",
									"item": [
										{
											"name": "/cdos - sort by Police Force ASC",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const isInAscendingOrder = () => { ",
															"    const currentPoliceForce = { value: '' }",
															"",
															"    return (cdo) => {",
															"        const policeForce = cdo.exemption.policeForce",
															"        const isInOrder = policeForce.localeCompare(currentPoliceForce.value) >= 0",
															"        if (!isInOrder) {",
															"            console.error(currentPoliceForce.value)",
															"            console.error(policeForce, currentPoliceForce.value)",
															"        }",
															"        currentPoliceForce.value = policeForce",
															"        return isInOrder",
															"    }",
															"}",
															"",
															"const cdos = pm.response.json().cdos;",
															"",
															"pm.test(\"response is ok\", function () {",
															"    pm.response.to.have.status(200);",
															"})",
															"",
															"pm.test(\"results are in descending order by joinedExemptionScheme\", function () {",
															"    pm.expect(cdos.every(isInAscendingOrder())).to.be.true;",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{DDI_API_BASE_URL}}/cdos?status=PreExempt&sortKey=policeForce",
													"host": [
														"{{DDI_API_BASE_URL}}"
													],
													"path": [
														"cdos"
													],
													"query": [
														{
															"key": "status",
															"value": "PreExempt"
														},
														{
															"key": "sortKey",
															"value": "policeForce"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "/cdos - sort by Lastname ASC",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const isInAscendingOrder = () => { ",
															"    const currentOwner = { value: '' }",
															"",
															"    return (cdo) => {",
															"        const owner = cdo.person.lastName + ' ' + cdo.person.firstName",
															"        const isInOrder = owner.localeCompare(currentOwner.value) >= 0",
															"        if (!isInOrder) {",
															"            console.error(currentOwner.value)",
															"            console.error(owner, currentOwner.value)",
															"        }",
															"        currentOwner.value = owner",
															"        return isInOrder",
															"    }",
															"}",
															"",
															"const cdos = pm.response.json().cdos;",
															"",
															"pm.test(\"response is ok\", function () {",
															"    pm.response.to.have.status(200);",
															"})",
															"",
															"pm.test(\"results are in descending order by joinedExemptionScheme\", function () {",
															"    pm.expect(cdos.every(isInAscendingOrder())).to.be.true;",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{DDI_API_BASE_URL}}/cdos?status=PreExempt&sortKey=owner",
													"host": [
														"{{DDI_API_BASE_URL}}"
													],
													"path": [
														"cdos"
													],
													"query": [
														{
															"key": "status",
															"value": "PreExempt"
														},
														{
															"key": "sortKey",
															"value": "owner"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "/cdos - sort by IndexNumber DESC",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const isInAscendingOrder = () => { ",
															"    const currentDogId = { value: 99999999 }",
															"",
															"    return (cdo) => {",
															"        const dogId = cdo.dog.id",
															"        const isInOrder = dogId <= currentDogId.value",
															"        if (!isInOrder) {",
															"            console.error(currentDogId.value)",
															"            console.error(cdo.dog.id, currentDogId.value)",
															"        }",
															"        currentDogId.value = dogId",
															"        return isInOrder",
															"    }",
															"}",
															"",
															"const cdos = pm.response.json().cdos;",
															"",
															"pm.test(\"response is ok\", function () {",
															"    pm.response.to.have.status(200);",
															"})",
															"",
															"pm.test(\"results are in descending order by joinedExemptionScheme\", function () {",
															"    pm.expect(cdos.every(isInAscendingOrder())).to.be.true;",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{DDI_API_BASE_URL}}/cdos?status=PreExempt&sortKey=indexNumber&sortOrder=DESC",
													"host": [
														"{{DDI_API_BASE_URL}}"
													],
													"path": [
														"cdos"
													],
													"query": [
														{
															"key": "status",
															"value": "PreExempt"
														},
														{
															"key": "sortKey",
															"value": "indexNumber"
														},
														{
															"key": "sortOrder",
															"value": "DESC"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "/cdos - with Pre-Exempt status",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/* ",
													"    Response has the following structure",
													"    {",
													"        \"cdos\": [",
													"            {",
													"                \"person\": {",
													"                    \"id\": 19,",
													"                    \"firstName\": \"Scott\",",
													"                    \"lastName\": \"Pilgrim\",",
													"                    \"personReference\": \"P-DCAC-AE23\"",
													"                },",
													"                \"dog\": {",
													"                    \"id\": 300024,",
													"                    \"status\": \"Pre-exempt\",",
													"                    \"dogReference\": \"ED300024\"",
													"                },",
													"                \"exemption\": {",
													"                    \"policeForce\": \"Cheshire Constabulary\",",
													"                    \"cdoExpiry\": \"2024-04-19\",",
													"                    \"joinedExemptionScheme\":  \"2024-04-19\"",
													"                }",
													"            }",
													"        ]",
													"    }",
													"*/",
													"const isPreExempt = cdo => {",
													"    return cdo.dog.status === 'Pre-exempt'",
													"}",
													"",
													"const cdos = pm.response.json().cdos;",
													"",
													"",
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(200);",
													"    const [cdo] = cdos",
													"    pm.expect(cdo.person.id).to.be.a('number')",
													"    pm.expect(cdo.person.firstName).to.be.a('string')",
													"    pm.expect(cdo.person.lastName).to.be.a('string')",
													"    pm.expect(cdo.person.personReference).to.be.a('string')",
													"    pm.expect(cdo.person.id).to.be.a('number')",
													"    pm.expect(cdo.dog.id).to.be.a('number')",
													"    pm.expect(cdo.dog.status).to.equal('Pre-exempt')",
													"    pm.expect(cdo.exemption.policeForce).to.be.a('string')",
													"    pm.expect(cdo.exemption.cdoExpiry).to.be.a('string')",
													"    pm.expect(cdo.exemption.joinedExemptionScheme).not.to.be.undefined",
													"})",
													"",
													"pm.test(\"only contains Pre-Exempt\", function () {",
													"    pm.expect(cdos.every(isPreExempt)).to.be.true;",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/cdos?status=PreExempt",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"cdos"
											],
											"query": [
												{
													"key": "status",
													"value": "PreExempt"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/cdos - with array of statuses",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const isPreExemptOrInterimExempt = cdo => {",
													"    return cdo.dog.status === 'Pre-exempt' || cdo.dog.status === 'Interim exempt'",
													"}",
													"const cdos = pm.response.json().cdos;",
													"",
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(200);",
													"})",
													"",
													"pm.test(\"only contains Pre-Exempt and Interim exempt\", function () {",
													"    pm.expect(cdos.every(isPreExemptOrInterimExempt)).to.be.true;",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/cdos?status=PreExempt&status=InterimExempt",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"cdos"
											],
											"query": [
												{
													"key": "status",
													"value": "PreExempt"
												},
												{
													"key": "status",
													"value": "InterimExempt"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/cdos - with sorted ASC InterimExempt",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const isInterimExempt = cdo => {",
													"    return cdo.dog.status === 'Interim exempt'",
													"}",
													"",
													"const isInAscendingOrder = () => { ",
													"    const currentCdo = { value: new Date(0) }",
													"",
													"    return (cdo) => {",
													"        const joinedExemptionScheme = new Date(cdo.exemption.joinedExemptionScheme)",
													"        const isInOrder = joinedExemptionScheme >= currentCdo.value",
													"        if (!isInOrder) {",
													"            console.error(currentCdo.value)",
													"            console.error(cdo.exemption.joinedExemptionScheme, currentCdo.value)",
													"        }",
													"        currentCdo.value = joinedExemptionScheme",
													"        return isInOrder",
													"    }",
													"}",
													"",
													"const cdos = pm.response.json().cdos;",
													"",
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(200);",
													"})",
													"",
													"pm.test(\"results are in descending order by joinedExemptionScheme\", function () {",
													"    pm.expect(cdos.every(isInAscendingOrder())).to.be.true;",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/cdos?status=InterimExempt&sortKey=joinedExemptionScheme&sortOrder=ASC",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"cdos"
											],
											"query": [
												{
													"key": "status",
													"value": "InterimExempt"
												},
												{
													"key": "sortKey",
													"value": "joinedExemptionScheme"
												},
												{
													"key": "sortOrder",
													"value": "ASC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/cdos - with sorted DESC InterimExempt Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const isInterimExempt = cdo => {",
													"    return cdo.dog.status === 'Interim exempt'",
													"}",
													"",
													"const isInDescendingOrder = () => { ",
													"    const currentCdo = { value: new Date('9999-12-31') }",
													"",
													"    return (cdo) => {",
													"        const joinedExemptionScheme = new Date(cdo.exemption.joinedExemptionScheme)",
													"        const isInOrder = joinedExemptionScheme <= currentCdo.value",
													"        if (!isInOrder) {",
													"            console.error(currentCdo.value)",
													"            console.error(cdo.exemption.joinedExemptionScheme, currentCdo.value)",
													"        }",
													"        currentCdo.value = joinedExemptionScheme",
													"        return isInOrder",
													"    }",
													"}",
													"",
													"const cdos = pm.response.json().cdos;",
													"",
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(200);",
													"})",
													"",
													"pm.test(\"results are in descending order by joinedExemptionScheme\", function () {",
													"    pm.expect(cdos.every(isInDescendingOrder())).to.be.true;",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/cdos?status=InterimExempt&sortKey=joinedExemptionScheme&sortOrder=DESC",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"cdos"
											],
											"query": [
												{
													"key": "status",
													"value": "InterimExempt"
												},
												{
													"key": "sortKey",
													"value": "joinedExemptionScheme"
												},
												{
													"key": "sortOrder",
													"value": "DESC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/cdos - due in 30 days",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const thirtyDays = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000)",
													"",
													"const isPreExemptAndInThirtyDays = cdo => {",
													"        return new Date(cdo.exemption.cdoExpiry) <= thirtyDays",
													"}",
													"",
													"const cdos = pm.response.json().cdos;",
													"",
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(200);",
													"})",
													"",
													"pm.test(\"only contains Pre-Exempt\", function () {",
													"    pm.expect(cdos.every(isPreExemptAndInThirtyDays)).to.be.true;",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/cdos?status=PreExempt&withinDays=30",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"cdos"
											],
											"query": [
												{
													"key": "status",
													"value": "PreExempt"
												},
												{
													"key": "withinDays",
													"value": "30"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/cdos - invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{DDI_API_BASE_URL}}/cdos",
											"host": [
												"{{DDI_API_BASE_URL}}"
											],
											"path": [
												"cdos"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "3-Teardown",
							"item": []
						}
					]
				}
			]
		},
		{
			"name": "System can import",
			"item": [
				{
					"name": "/dog imports a valid dog",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.have.body(\"ok\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "ddi-username",
								"value": "internal-user"
							},
							{
								"key": "ddi-displayname",
								"value": "User, Internal"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"dog\": {\n      \"dog_breed_id\":1,\n      \"dog_reference\": \"{{$guid}}\",\n      \"status_id\": 1,\n      \"name\": \"{{$randomFirstName}}\",\n      \"birth_date\": \"{{$isoTimestamp}}\",\n      \"death_date\": \"{{$isoTimestamp}}\",\n      \"tattoo\":\"tattoo\",\n      \"colour\": \"colour\",\n      \"sex\": \"Male\",\n      \"exported_date\": \"{{$isoTimestamp}}\",\n      \"stolen_date\": \"{{$isoTimestamp}}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{DDI_API_BASE_URL}}/dog",
							"host": [
								"{{DDI_API_BASE_URL}}"
							],
							"path": [
								"dog"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Activities",
			"item": [
				{
					"name": "/activities/sent/dog should return list of dog activities",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response a list of dog activities\", function () {",
									"    const activities = pm.response.json().activities;",
									"    pm.expect(activities.length > 1).to.be.true;",
									"    pm.expect(activities[0].label).to.be.a('string')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "ddi-username",
								"value": "internal-user"
							},
							{
								"key": "ddi-displayname",
								"value": "User, Internal"
							}
						],
						"url": {
							"raw": "{{DDI_API_BASE_URL}}/activities/sent/dog",
							"host": [
								"{{DDI_API_BASE_URL}}"
							],
							"path": [
								"activities",
								"sent",
								"dog"
							]
						}
					},
					"response": []
				},
				{
					"name": "/activities/received/dog should return list of dog activities Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response a list of dog activities\", function () {",
									"    const activities = pm.response.json().activities;",
									"    pm.expect(activities.length > 1).to.be.true;",
									"    pm.expect(activities[0].label).to.be.a('string')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "ddi-username",
								"value": "internal-user"
							},
							{
								"key": "ddi-displayname",
								"value": "User, Internal"
							}
						],
						"url": {
							"raw": "{{DDI_API_BASE_URL}}/activities/received/dog",
							"host": [
								"{{DDI_API_BASE_URL}}"
							],
							"path": [
								"activities",
								"received",
								"dog"
							]
						}
					},
					"response": []
				},
				{
					"name": "/activities/sent/owner should return list of owner activities",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response a list of owner activities\", function () {",
									"    const activities = pm.response.json().activities;",
									"    pm.expect(activities.length > 0).to.be.true;",
									"    pm.expect(activities[0].label).to.be.a('string')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "ddi-username",
								"value": "internal-user"
							},
							{
								"key": "ddi-displayname",
								"value": "User, Internal"
							}
						],
						"url": {
							"raw": "{{DDI_API_BASE_URL}}/activities/sent/owner",
							"host": [
								"{{DDI_API_BASE_URL}}"
							],
							"path": [
								"activities",
								"sent",
								"owner"
							]
						}
					},
					"response": []
				},
				{
					"name": "/activities/received/owner should return an empty list of owner received activities",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response a list of owner activities\", function () {",
									"    const activities = pm.response.json().activities;",
									"    pm.expect(activities).to.be.a('Array')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "ddi-username",
								"value": "internal-user"
							},
							{
								"key": "ddi-displayname",
								"value": "User, Internal"
							}
						],
						"url": {
							"raw": "{{DDI_API_BASE_URL}}/activities/received/owner",
							"host": [
								"{{DDI_API_BASE_URL}}"
							],
							"path": [
								"activities",
								"received",
								"owner"
							]
						}
					},
					"response": []
				},
				{
					"name": "/activity/:activity-id should return an activity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response a list of dog activities\", function () {",
									"    const activity = pm.response.json().activity;",
									"    pm.expect(activity.label).to.be.a('string')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "ddi-username",
								"value": "internal-user"
							},
							{
								"key": "ddi-displayname",
								"value": "User, Internal"
							}
						],
						"url": {
							"raw": "{{DDI_API_BASE_URL}}/activity/1",
							"host": [
								"{{DDI_API_BASE_URL}}"
							],
							"path": [
								"activity",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Person",
			"item": [
				{
					"name": "persons DOB check includes empty fields",
					"item": [
						{
							"name": "Setup data for the DOB test - add person 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let cdoPostIndex = pm.environment.get(\"cdoPostIndex\");",
											"",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"response returns an owner\", function () {",
											"    const owner = pm.response.json().owner;",
											"    pm.expect(owner.firstName).to.be.a('string')",
											"    pm.expect(owner.lastName).to.be.a('string')",
											"",
											"    pm.collectionVariables.set(\"duplicateFirstName\", owner.firstName);",
											"    pm.collectionVariables.set(\"duplicateLastName\", owner.lastName);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "ddi-username",
										"value": "internal-user"
									},
									{
										"key": "ddi-displayname",
										"value": "User, Internal"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"owner\": {\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"dateOfBirth\": \"1990-01-01\",\n    \"address\": {\n      \"addressLine1\": \"{{$randomStreetAddress}}\",\n      \"addressLine2\": \"Anywhere Estate\",\n      \"town\": \"{{$randomCity}}\",\n      \"postcode\": \"S1 1AA\",\n      \"country\": \"Wales\"\n    }\n  },\n  \"enforcementDetails\": {\n    \"court\": \"1\",\n    \"policeForce\": \"1\",\n    \"legislationOfficer\": \"Sidney Lewis\"\n  },\n  \"dogs\": [\n    {\n      \"breed\": \"XL Bully\",\n      \"name\": \"{{$randomFirstName}}\",\n      \"applicationType\": \"cdo\",\n      \"cdoIssued\": \"2023-10-10\",\n      \"cdoExpiry\": \"2023-12-10\",\n      \"interimExemption\": \"2023-12-10\",\n      \"status\": \"Status 1\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/cdo",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"cdo"
									]
								}
							},
							"response": []
						},
						{
							"name": "Setup data for the DOB test - add person 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let cdoPostIndex = pm.environment.get(\"cdoPostIndex\");",
											"",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"response returns an owner\", function () {",
											"    const owner = pm.response.json().owner;",
											"    pm.expect(owner.firstName).to.be.a('string')",
											"    pm.expect(owner.lastName).to.be.a('string')",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "ddi-username",
										"value": "internal-user"
									},
									{
										"key": "ddi-displayname",
										"value": "User, Internal"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"owner\": {\n    \"firstName\": \"{{duplicateFirstName}}\",\n    \"lastName\": \"{{duplicateLastName}}\",\n    \"dateOfBirth\": \"2000-02-02\",\n    \"address\": {\n      \"addressLine1\": \"{{$randomStreetAddress}}\",\n      \"addressLine2\": \"Anywhere Estate\",\n      \"town\": \"{{$randomCity}}\",\n      \"postcode\": \"RG1 1AA\",\n      \"country\": \"England\"\n    }\n  },\n  \"enforcementDetails\": {\n    \"court\": \"1\",\n    \"policeForce\": \"1\",\n    \"legislationOfficer\": \"Sidney Lewis\"\n  },\n  \"dogs\": [\n    {\n      \"breed\": \"XL Bully\",\n      \"name\": \"{{$randomFirstName}}\",\n      \"applicationType\": \"cdo\",\n      \"cdoIssued\": \"2023-10-10\",\n      \"cdoExpiry\": \"2023-12-10\",\n      \"interimExemption\": \"2023-12-10\",\n      \"status\": \"Status 1\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/cdo",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"cdo"
									]
								}
							},
							"response": []
						},
						{
							"name": "Setup data for the DOB test - add person 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let cdoPostIndex = pm.environment.get(\"cdoPostIndex\");",
											"",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"response returns an owner\", function () {",
											"    const owner = pm.response.json().owner;",
											"    pm.expect(owner.firstName).to.be.a('string')",
											"    pm.expect(owner.lastName).to.be.a('string')",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "ddi-username",
										"value": "internal-user"
									},
									{
										"key": "ddi-displayname",
										"value": "User, Internal"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"owner\": {\n    \"firstName\": \"{{duplicateFirstName}}\",\n    \"lastName\": \"{{duplicateLastName}}\",\n    \"dateOfBirth\": null,\n    \"address\": {\n      \"addressLine1\": \"{{$randomStreetAddress}}\",\n      \"addressLine2\": \"Anywhere Estate\",\n      \"town\": \"{{$randomCity}}\",\n      \"postcode\": \"RG1 1AA\",\n      \"country\": \"England\"\n    }\n  },\n  \"enforcementDetails\": {\n    \"court\": \"1\",\n    \"policeForce\": \"1\",\n    \"legislationOfficer\": \"Sidney Lewis\"\n  },\n  \"dogs\": [\n    {\n      \"breed\": \"XL Bully\",\n      \"name\": \"{{$randomFirstName}}\",\n      \"applicationType\": \"cdo\",\n      \"cdoIssued\": \"2023-10-10\",\n      \"cdoExpiry\": \"2023-12-10\",\n      \"interimExemption\": \"2023-12-10\",\n      \"status\": \"Status 1\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/cdo",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"cdo"
									]
								}
							},
							"response": []
						},
						{
							"name": "/persons returns results with empty DOB",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('GET /persons search on DOB should return results with empty DOB', () => {",
											"    const response = pm.response.json()",
											"    pm.expect(response.persons).to.be.a('array')",
											"    pm.expect(response.persons).to.have.length(2)",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/persons?firstName={{duplicateFirstName}}&lastName={{duplicateLastName}}&dateOfBirth=1990-01-01",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"persons"
									],
									"query": [
										{
											"key": "firstName",
											"value": "{{duplicateFirstName}}"
										},
										{
											"key": "lastName",
											"value": "{{duplicateLastName}}"
										},
										{
											"key": "dateOfBirth",
											"value": "1990-01-01"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Update Birth Date on empty Birth Date applies change",
					"item": [
						{
							"name": "Setup data for DOB update test",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"response has no DOB\", function () {",
											"    const owner = pm.response.json().owner;",
											"    pm.expect(owner.birthDate).to.be.null;",
											"});",
											"",
											"pm.test(\"response has personReference\", function () {",
											"     pm.expect(pm.response.json()).to.be.an('object');",
											"     pm.expect(pm.response.json()).to.have.property('owner');",
											"     pm.expect(pm.response.json().owner).to.have.property('personReference');",
											"     pm.collectionVariables.set(\"ownerWithoutBirthDateRef\", pm.response.json().owner.personReference);",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "ddi-username",
										"value": "internal-user"
									},
									{
										"key": "ddi-displayname",
										"value": "User, Internal"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"owner\": {\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"address\": {\n      \"addressLine1\": \"{{$randomStreetAddress}}\",\n      \"addressLine2\": \"Anywhere Estate\",\n      \"town\": \"City of London\",\n      \"postcode\": \"S1 1AA\",\n      \"country\": \"Wales\"\n    }\n  },\n  \"enforcementDetails\": {\n    \"court\": \"1\",\n    \"policeForce\": \"1\",\n    \"legislationOfficer\": \"Sidney Lewis\"\n  },\n  \"dogs\": [\n    {\n      \"breed\": \"XL Bully\",\n      \"name\": \"Rex{{cdoPostIndex}}\",\n      \"applicationType\": \"cdo\",\n      \"cdoIssued\": \"2023-10-10\",\n      \"cdoExpiry\": \"2023-12-10\",\n      \"interimExemption\": \"2023-12-10\",\n      \"status\": \"Status 1\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/cdo",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"cdo"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should update birth date if it is null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"response has a DOB\", function () {",
											"    const owner = pm.response.json().owner;",
											"    pm.expect(owner.birthDate).to.eq(\"1998-10-20\");",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "ddi-username",
										"value": "internal-user"
									},
									{
										"key": "ddi-displayname",
										"value": "User, Internal"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"owner\": {\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"dateOfBirth\": \"1998-10-20\",\n    \"personReference\": \"{{ownerWithoutBirthDateRef}}\",\n    \"address\": {\n      \"addressLine1\": \"{{$randomStreetAddress}}\",\n      \"addressLine2\": \"Anywhere Estate\",\n      \"town\": \"City of London\",\n      \"postcode\": \"S1 1AA\",\n      \"country\": \"Wales\"\n    }\n  },\n  \"enforcementDetails\": {\n    \"court\": \"1\",\n    \"policeForce\": \"1\",\n    \"legislationOfficer\": \"Sidney Lewis\"\n  },\n  \"dogs\": [\n    {\n      \"breed\": \"XL Bully\",\n      \"name\": \"Rex{{cdoPostIndex}}\",\n      \"applicationType\": \"cdo\",\n      \"cdoIssued\": \"2023-10-10\",\n      \"cdoExpiry\": \"2023-12-10\",\n      \"interimExemption\": \"2023-12-10\",\n      \"status\": \"Status 1\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/cdo",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"cdo"
									]
								}
							},
							"response": []
						},
						{
							"name": "/persons returns an array of persons",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"returns a person with DOB fixed\", function () {",
											"    const response = pm.response.json()",
											"    pm.expect(response.birthDate).to.equal(\"1998-10-20\")",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/person/{{ownerWithoutBirthDateRef}}",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"person",
										"{{ownerWithoutBirthDateRef}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "/persons returns an array of persons Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"returns a persons array\", function () {",
									"    const response = pm.response.json()",
									"    pm.expect(response.persons).to.be.a('array')",
									"    pm.expect(response.persons.length < 100).to.be.true",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{DDI_API_BASE_URL}}/persons?firstName=Dan&lastName=Jones&dateOfBirth=2000-01-01",
							"host": [
								"{{DDI_API_BASE_URL}}"
							],
							"path": [
								"persons"
							],
							"query": [
								{
									"key": "firstName",
									"value": "Dan"
								},
								{
									"key": "lastName",
									"value": "Jones"
								},
								{
									"key": "dateOfBirth",
									"value": "2000-01-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/persons returns an array of persons given firstName only",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"returns a persons array\", function () {",
									"    const response = pm.response.json()",
									"    pm.expect(response.persons).to.be.a('array')",
									"    pm.expect(response.persons.length < 100).to.be.true",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{DDI_API_BASE_URL}}/persons?firstName=dan",
							"host": [
								"{{DDI_API_BASE_URL}}"
							],
							"path": [
								"persons"
							],
							"query": [
								{
									"key": "firstName",
									"value": "dan"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/persons returns an array of persons given firstName and lastName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"returns a persons array\", function () {",
									"    const response = pm.response.json()",
									"    pm.expect(response.persons).to.be.a('array')",
									"    pm.expect(response.persons.length < 100).to.be.true",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{DDI_API_BASE_URL}}/persons?firstName=dan&lastName=Jones",
							"host": [
								"{{DDI_API_BASE_URL}}"
							],
							"path": [
								"persons"
							],
							"query": [
								{
									"key": "firstName",
									"value": "dan"
								},
								{
									"key": "lastName",
									"value": "Jones"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/persons returns an array of persons given lowercase search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"returns a persons array\", function () {",
									"    const response = pm.response.json()",
									"    pm.expect(response.persons).to.be.a('array')",
									"    pm.expect(response.persons.length < 100).to.be.true",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{DDI_API_BASE_URL}}/persons?firstName=dan&lastName=jones&dateOfBirth=2000-01-01",
							"host": [
								"{{DDI_API_BASE_URL}}"
							],
							"path": [
								"persons"
							],
							"query": [
								{
									"key": "firstName",
									"value": "dan"
								},
								{
									"key": "lastName",
									"value": "jones"
								},
								{
									"key": "dateOfBirth",
									"value": "2000-01-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/persons returns an array of persons Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"returns a persons array\", function () {",
									"    const response = pm.response.json()",
									"    pm.expect(response.persons).to.be.a('array')",
									"    pm.expect(response.persons.length < 100).to.be.true",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{DDI_API_BASE_URL}}/persons",
							"host": [
								"{{DDI_API_BASE_URL}}"
							],
							"path": [
								"persons"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Dog",
			"item": [
				{
					"name": "Delete",
					"item": [
						{
							"name": "Setup",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"dog details\", function () {",
											"    const dogs = pm.response.json().dogs;",
											"    const dog = dogs[0]",
											"    pm.collectionVariables.set(\"dogIndexToDelete\",  dog.indexNumber);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "ddi-username",
										"value": "internal-user"
									},
									{
										"key": "ddi-displayname",
										"value": "User, Internal"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"owner\": {\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"dateOfBirth\": \"{{$isoTimestamp}}\",\n    \"address\": {\n      \"addressLine1\": \"{{$randomStreetAddress}}\",\n      \"addressLine2\": \"Anywhere Estate\",\n      \"town\": \"City of London\",\n      \"postcode\": \"S1 1AA\",\n      \"country\": \"Wales\"\n    }\n  },\n  \"enforcementDetails\": {\n    \"court\": \"1\",\n    \"policeForce\": \"1\",\n    \"legislationOfficer\": \"Sidney Lewis\"\n  },\n  \"dogs\": [\n    {\n      \"breed\": \"XL Bully\",\n      \"name\": \"{{$randomFirstName}}\",\n      \"applicationType\": \"cdo\",\n      \"cdoIssued\": \"2023-10-10\",\n      \"cdoExpiry\": \"2023-12-10\",\n      \"interimExemption\": \"2023-12-10\",\n      \"status\": \"Status 1\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/cdo",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"cdo"
									]
								}
							},
							"response": []
						},
						{
							"name": "/dog invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response returns 404 given invalid dog index number requested\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "ddi-username",
										"value": "internal-user"
									},
									{
										"key": "ddi-displayname",
										"value": "User, Internal"
									}
								],
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/dog/ED9999999999",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"dog",
										"ED9999999999"
									]
								}
							},
							"response": []
						},
						{
							"name": "/dog",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response returns a 204 and empty body given\", function () {",
											"    pm.response.to.have.status(204);",
											"    const body = pm.response.body",
											"    pm.expect(body).to.eq(undefined)",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "ddi-username",
										"value": "internal-user"
									},
									{
										"key": "ddi-displayname",
										"value": "User, Internal"
									}
								],
								"url": {
									"raw": "{{DDI_API_BASE_URL}}/dog/{{dogIndexToDelete}}",
									"host": [
										"{{DDI_API_BASE_URL}}"
									],
									"path": [
										"dog",
										"{{dogIndexToDelete}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Courts",
			"item": [
				{
					"name": "courts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"response returns list of courts\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.courts.length > 100).to.be.true",
									"    pm.expect(jsonData.courts[0].id).to.be.a('number')",
									"    pm.expect(jsonData.courts[0].name).to.be.a('string')",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{DDI_API_BASE_URL}}/courts",
							"host": [
								"{{DDI_API_BASE_URL}}"
							],
							"path": [
								"courts"
							]
						}
					},
					"response": []
				},
				{
					"name": "/courts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"response returns the created court\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.be.a('number')",
									"    pm.expect(jsonData.name).to.eq('Reading County Court and Family Court')",
									"    pm.collectionVariables.set('courtId', jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "ddi-username",
								"value": "internal-user"
							},
							{
								"key": "ddi-displayname",
								"value": "User, Internal"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Reading County Court and Family Court\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{DDI_API_BASE_URL}}/courts",
							"host": [
								"{{DDI_API_BASE_URL}}"
							],
							"path": [
								"courts"
							]
						}
					},
					"response": []
				},
				{
					"name": "/courts/:invalid-court-id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{DDI_API_BASE_URL}}/courts/-1",
							"host": [
								"{{DDI_API_BASE_URL}}"
							],
							"path": [
								"courts",
								"-1"
							]
						}
					},
					"response": []
				},
				{
					"name": "/courts duplicates should fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response should fail\", function () {",
									"    pm.response.to.have.status(409);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Reading County Court and Family Court\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{DDI_API_BASE_URL}}/courts",
							"host": [
								"{{DDI_API_BASE_URL}}"
							],
							"path": [
								"courts"
							]
						}
					},
					"response": []
				},
				{
					"name": "/courts duplicates should fail case insensitive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response should fail\", function () {",
									"    pm.response.to.have.status(409);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Reading County Court and family court\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{DDI_API_BASE_URL}}/courts",
							"host": [
								"{{DDI_API_BASE_URL}}"
							],
							"path": [
								"courts"
							]
						}
					},
					"response": []
				},
				{
					"name": "/courts/:court-id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(204);",
									"    const body = pm.response.body",
									"    pm.expect(body).to.eq(undefined)",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "ddi-username",
								"value": "internal-user"
							},
							{
								"key": "ddi-displayname",
								"value": "User, Internal"
							}
						],
						"url": {
							"raw": "{{DDI_API_BASE_URL}}/courts/{{courtId}}",
							"host": [
								"{{DDI_API_BASE_URL}}"
							],
							"path": [
								"courts",
								"{{courtId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/courts Deleted courts should be recreated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"response returns the created court\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.be.a('number')",
									"    pm.expect(jsonData.name).to.eq('Reading County Court and Family Court')",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "ddi-username",
								"value": "internal-user"
							},
							{
								"key": "ddi-displayname",
								"value": "User, Internal"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Reading County Court and Family Court\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{DDI_API_BASE_URL}}/courts",
							"host": [
								"{{DDI_API_BASE_URL}}"
							],
							"path": [
								"courts"
							]
						}
					},
					"response": []
				},
				{
					"name": "/courts/:court-id Teardown",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(204);",
									"    const body = pm.response.body",
									"    pm.expect(body).to.eq(undefined)",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "ddi-username",
								"value": "internal-user"
							},
							{
								"key": "ddi-displayname",
								"value": "User, Internal"
							}
						],
						"url": {
							"raw": "{{DDI_API_BASE_URL}}/courts/{{courtId}}",
							"host": [
								"{{DDI_API_BASE_URL}}"
							],
							"path": [
								"courts",
								"{{courtId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Police",
			"item": [
				{
					"name": "/police-forces",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"response returns list of police forces\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.policeForces.length > 50).to.be.true",
									"    pm.expect(jsonData.policeForces[0].id).to.be.a('number')",
									"    pm.expect(jsonData.policeForces[0].name).to.be.a('string')",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{DDI_API_BASE_URL}}/police-forces",
							"host": [
								"{{DDI_API_BASE_URL}}"
							],
							"path": [
								"police-forces"
							]
						}
					},
					"response": []
				},
				{
					"name": "/police-forces",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"response returns the created Police Force\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.be.a('number')",
									"    pm.expect(jsonData.name).to.eq('The Shire Shirriffs Constabulary')",
									"    pm.collectionVariables.set('policeId', jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "ddi-username",
								"value": "internal-user"
							},
							{
								"key": "ddi-displayname",
								"value": "User, Internal"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"The Shire Shirriffs Constabulary\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{DDI_API_BASE_URL}}/police-forces",
							"host": [
								"{{DDI_API_BASE_URL}}"
							],
							"path": [
								"police-forces"
							]
						}
					},
					"response": []
				},
				{
					"name": "/police-forces/:invalid-court-id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{DDI_API_BASE_URL}}/police-forces/-1",
							"host": [
								"{{DDI_API_BASE_URL}}"
							],
							"path": [
								"police-forces",
								"-1"
							]
						}
					},
					"response": []
				},
				{
					"name": "/police-forces duplicates should fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response should fail\", function () {",
									"    pm.response.to.have.status(409);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"The Shire Shirriffs Constabulary\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{DDI_API_BASE_URL}}/police-forces",
							"host": [
								"{{DDI_API_BASE_URL}}"
							],
							"path": [
								"police-forces"
							]
						}
					},
					"response": []
				},
				{
					"name": "/police-forces duplicates should fail case insensitive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response should fail\", function () {",
									"    pm.response.to.have.status(409);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"The Shire shirriffs Constabulary\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{DDI_API_BASE_URL}}/police-forces",
							"host": [
								"{{DDI_API_BASE_URL}}"
							],
							"path": [
								"police-forces"
							]
						}
					},
					"response": []
				},
				{
					"name": "/police-forces/:police-id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(204);",
									"    const body = pm.response.body",
									"    pm.expect(body).to.eq(undefined)",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "ddi-username",
								"value": "internal-user"
							},
							{
								"key": "ddi-displayname",
								"value": "User, Internal"
							}
						],
						"url": {
							"raw": "{{DDI_API_BASE_URL}}/police-forces/{{policeId}}",
							"host": [
								"{{DDI_API_BASE_URL}}"
							],
							"path": [
								"police-forces",
								"{{policeId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/police-forces Deleted police forces should be recreated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"response returns the created police force\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.be.a('number')",
									"    pm.expect(jsonData.name).to.eq('The Shire Shirriffs Constabulary')",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "ddi-username",
								"value": "internal-user"
							},
							{
								"key": "ddi-displayname",
								"value": "User, Internal"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"The Shire Shirriffs Constabulary\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{DDI_API_BASE_URL}}/police-forces",
							"host": [
								"{{DDI_API_BASE_URL}}"
							],
							"path": [
								"police-forces"
							]
						}
					},
					"response": []
				},
				{
					"name": "/police-forces/:police-id Teardown",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(204);",
									"    const body = pm.response.body",
									"    pm.expect(body).to.eq(undefined)",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "ddi-username",
								"value": "internal-user"
							},
							{
								"key": "ddi-displayname",
								"value": "User, Internal"
							}
						],
						"url": {
							"raw": "{{DDI_API_BASE_URL}}/police-forces/{{policeId}}",
							"host": [
								"{{DDI_API_BASE_URL}}"
							],
							"path": [
								"police-forces",
								"{{policeId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Insurance",
			"item": [
				{
					"name": "insurance/companies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response returns a list of Insurance Companies inc Dogs Trust\", function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.companies.length > 0).to.be.true;",
									"    pm.expect(jsonData.companies[0].id).to.eq(1)",
									"    pm.expect(jsonData.companies.map(company => company.name)).to.contain('Dogs Trust')",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{DDI_API_BASE_URL}}/insurance/companies",
							"host": [
								"{{DDI_API_BASE_URL}}"
							],
							"path": [
								"insurance",
								"companies"
							]
						}
					},
					"response": []
				},
				{
					"name": "/insurance/companies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"response returns the created Insurance Company\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.be.a('number')",
									"    pm.expect(jsonData.name).to.eq('Lloyds of London')",
									"    pm.collectionVariables.set('insuranceId', jsonData.id)",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "ddi-username",
								"value": "internal-user"
							},
							{
								"key": "ddi-displayname",
								"value": "User, Internal"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Lloyds of London\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{DDI_API_BASE_URL}}/insurance/companies",
							"host": [
								"{{DDI_API_BASE_URL}}"
							],
							"path": [
								"insurance",
								"companies"
							]
						}
					},
					"response": []
				},
				{
					"name": "/insurance/companies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{DDI_API_BASE_URL}}/insurance/companies/-1",
							"host": [
								"{{DDI_API_BASE_URL}}"
							],
							"path": [
								"insurance",
								"companies",
								"-1"
							]
						}
					},
					"response": []
				},
				{
					"name": "/insurance/companies duplicates should fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response should fail\", function () {",
									"    pm.response.to.have.status(409);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Lloyds of London\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{DDI_API_BASE_URL}}/insurance/companies",
							"host": [
								"{{DDI_API_BASE_URL}}"
							],
							"path": [
								"insurance",
								"companies"
							]
						}
					},
					"response": []
				},
				{
					"name": "/insurance/companies duplicates should fail case insensitive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response should fail\", function () {",
									"    pm.response.to.have.status(409);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"lloyds of London\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{DDI_API_BASE_URL}}/insurance/companies",
							"host": [
								"{{DDI_API_BASE_URL}}"
							],
							"path": [
								"insurance",
								"companies"
							]
						}
					},
					"response": []
				},
				{
					"name": "/insurance/companies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(204);",
									"    const body = pm.response.body",
									"    pm.expect(body).to.eq(undefined)",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "ddi-username",
								"value": "internal-user"
							},
							{
								"key": "ddi-displayname",
								"value": "User, Internal"
							}
						],
						"url": {
							"raw": "{{DDI_API_BASE_URL}}/insurance/companies/{{insuranceId}}",
							"host": [
								"{{DDI_API_BASE_URL}}"
							],
							"path": [
								"insurance",
								"companies",
								"{{insuranceId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/insurance/companies Deleted insurance companies should be recreated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"response returns the created insurance company\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.be.a('number')",
									"    pm.expect(jsonData.name).to.eq('Lloyds of London')",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "ddi-username",
								"value": "internal-user"
							},
							{
								"key": "ddi-displayname",
								"value": "User, Internal"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Lloyds of London\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{DDI_API_BASE_URL}}/insurance/companies",
							"host": [
								"{{DDI_API_BASE_URL}}"
							],
							"path": [
								"insurance",
								"companies"
							]
						}
					},
					"response": []
				},
				{
					"name": "/insurance/companies Teardown",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(204);",
									"    const body = pm.response.body",
									"    pm.expect(body).to.eq(undefined)",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "ddi-username",
								"value": "internal-user"
							},
							{
								"key": "ddi-displayname",
								"value": "User, Internal"
							}
						],
						"url": {
							"raw": "{{DDI_API_BASE_URL}}/insurance/companies/{{insuranceId}}",
							"host": [
								"{{DDI_API_BASE_URL}}"
							],
							"path": [
								"insurance",
								"companies",
								"{{insuranceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "countries",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"response returns list of countries\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.countries).to.have.lengthOf(3)",
							"    pm.expect(jsonData.countries).to.deep.eq(['England', 'Scotland', 'Wales'])",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{DDI_API_BASE_URL}}/countries",
					"host": [
						"{{DDI_API_BASE_URL}}"
					],
					"path": [
						"countries"
					]
				}
			},
			"response": []
		},
		{
			"name": "healthy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.have.body(\"ok\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{DDI_API_BASE_URL}}/healthy",
					"host": [
						"{{DDI_API_BASE_URL}}"
					],
					"path": [
						"healthy"
					]
				}
			},
			"response": []
		},
		{
			"name": "healthz",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.have.body(\"ok\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{DDI_API_BASE_URL}}/healthz",
					"host": [
						"{{DDI_API_BASE_URL}}"
					],
					"path": [
						"healthz"
					]
				}
			},
			"response": []
		},
		{
			"name": "counties",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response returns a list of counties including City of London\", function () {",
							"    pm.response.to.have.status(200);",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.counties.length > 50).to.be.true;",
							"    pm.expect(jsonData.counties.some(county => county === 'City of London')).to.be.true;",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{DDI_API_BASE_URL}}/counties",
					"host": [
						"{{DDI_API_BASE_URL}}"
					],
					"path": [
						"counties"
					]
				}
			},
			"response": []
		},
		{
			"name": "dog-breeds",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response returns a list of Dog breeds in XL Bully\", function () {",
							"    pm.response.to.have.status(200);",
							"    const jsonData = pm.response.json();",
							"    const breeds = jsonData.breeds",
							"    pm.expect(breeds.length > 4).to.be.true;",
							"    pm.expect(breeds.some(breed => breed.breed === 'XL Bully')).to.be.true;",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{DDI_API_BASE_URL}}/dog-breeds",
					"host": [
						"{{DDI_API_BASE_URL}}"
					],
					"path": [
						"dog-breeds"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "dogId1",
			"value": ""
		},
		{
			"key": "index-number",
			"value": "",
			"type": "string"
		},
		{
			"key": "reference",
			"value": "",
			"type": "string"
		},
		{
			"key": "owner",
			"value": ""
		},
		{
			"key": "duplicateFirstName",
			"value": ""
		},
		{
			"key": "duplicateLastName",
			"value": ""
		},
		{
			"key": "ownerWithoutBirthDateRef",
			"value": "",
			"type": "string"
		},
		{
			"key": "dogIndexToDelete",
			"value": "",
			"type": "string"
		},
		{
			"key": "courtId",
			"value": "",
			"type": "string"
		},
		{
			"key": "cdosToDelete",
			"value": "",
			"type": "string"
		},
		{
			"key": "welshCdo",
			"value": "P-F2AC-29E3",
			"type": "string"
		},
		{
			"key": "policeId",
			"value": "",
			"type": "string"
		},
		{
			"key": "dogIndexNumberChange",
			"value": ""
		},
		{
			"key": "courtToDeleteId",
			"value": "",
			"type": "string"
		},
		{
			"key": "dogIndexNumberWithDeletedCourt",
			"value": "",
			"type": "string"
		},
		{
			"key": "policeToBeDeleted",
			"value": ""
		},
		{
			"key": "insuranceId",
			"value": "",
			"type": "string"
		},
		{
			"key": "insuranceIdToDelete",
			"value": "",
			"type": "string"
		}
	]
}